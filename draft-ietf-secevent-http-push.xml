<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" category="std">

  <front>
    <title abbrev="draft-ietf-secevent-http-push-00">Push-Based SET Token Delivery Using HTTP</title>

    <author initials="A." surname="Backman" fullname="Annabelle Backman" role="editor">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt">
      <organization>Oracle</organization>
      <address>
        <email>phil.hunt@yahoo.com</email>
      </address>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization>Cisco</organization>
      <address>
        <email>morteza.ansari@cisco.com</email>
      </address>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization>Microsoft</organization>
      <address>
        <email>tonynad@microsoft.com</email>
      </address>
    </author>

    <date year="2018" month="July" day="20"/>

    <area>Security</area>
    <workgroup>Security Events Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines how a series of security event tokens 
(SETs) may be delivered to a previously registered receiver 
using HTTP POST over TLS initiated as a push to the receiver.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction and Overview">
<t>This specification defines how a stream of SETs <xref target="SET"/> over TLS.
The specification defines a method to push SETs via HTTP POST.</t>

<t>This specification defines a method for SET delivery in what
is known as Event Streams.</t>

<t>This specification does not define the method by which Event 
Streams are defined, provisioned, managed, monitored,
and configured and is out of scope of this specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
they appear in all capitals, as shown here.</t>

<t>For purposes of readability examples are not URL encoded.
Implementers MUST percent encode URLs as described in Section 2.1 of
<xref target="RFC3986"/>.</t>

<t>Throughout this documents all figures MAY contain spaces and extra
line-wrapping for readability and space limitations. Similarly, some
URI’s contained within examples, have been shortened for space and
readability reasons.</t>

</section>
<section anchor="defn" title="Definitions">
<t>This specification assumes terminology defined in the Security
Event Token specification <xref target="SET"/>.</t>

<t>The following definitions are defined for Security Event distribution:</t>

<t><list style="hanging">
  <t hangText='Event Transmitter'><vspace blankLines='0'/>
  A service provider that delivers SETs to other providers known
as Event Receivers. An Event Transmitter is responsible for offering a
service that allows the Event Receiver to check the Event Stream
configuration and status known as the “Control Plane”.</t>
  <t hangText='Event Receiver'><vspace blankLines='0'/>
  A service provider that registers to receive SETs from an Event
Transmitter and provides an endpoint to receive SETs via HTTP POST. 
Event Receivers can check current Event Stream configuration and status
by accessing the Event Transmitters “Control Plane”.</t>
  <t hangText='Event Stream'><vspace blankLines='0'/>
  An Event Stream is a defined location, distribution method and
whereby an Event Transmitter and Event Receiver exchange a pre-
defined family of SETs. A Stream is assumed to have configuration data
such as HTTP endpoints, timeouts, public key sets for signing and
encryption, and Event Families.</t>
  <t hangText='Subject'><vspace blankLines='0'/>
  The security subject around which a security event has occurred. For
example, a security subject might per a user, a person, an email
address, a service provider entity, an IP address, an OAuth Client, a
mobile device, or any identifiable thing referenced in security and
authorization systems.</t>
  <t hangText='Event'><vspace blankLines='0'/>
  An Event is defined to be an event as represented by a security event
token (SET).  See <xref target="SET"/>.</t>
</list></t>

<t>NumericDate
A JSON numeric value representing the number of seconds from
1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring
leap seconds.  This is equivalent to the IEEE Std 1003.1, 2013 Edition
<xref target="POSIX.1"></xref> definition “Seconds Since the Epoch”, in
which each day is accounted for by exactly 86400 seconds, other than
that non-integer values can be represented.  See <xref target="RFC3339"/> for
details regarding date/times in general and UTC in particular.</t>

</section>
<section anchor="event_stream" title="SET Event Stream Protocol">
<t>An Event Stream represents the communication channel over which a 
series of SETs are delivered to a configured Event Receiver.</t>

<section anchor="event_delivery" title="Event Delivery Process">
<t>When an Event occurs, the Event Transmitter constructs a SET
token <xref target="SET"/> that describes the Event. The Event Transmitter
determines the Event Streams over which the SET should be distributed
to.</t>

<t>How SETs are defined and the process by which Events are identified for 
Event Receivers is out-of-scope of this    specification.</t>

<t>When a SET is available for an Event Receiver, the Event Transmitter
attempts to deliver the SET based on the Event Receiver’s registered
delivery mechanism:</t>

<t><list style="symbols">
  <t>The Event Transmitter uses an HTTP/1.1 POST to the Event Receiver
endpoint to deliver the SET;</t>
  <t>Or, the Event Transmitter delivers the Event through a different
method not defined by this specification.</t>
</list></t>

<t>In Push-Based SET Delivery Using HTTP, SETs are delivered one at a
time using HTTP POST requests by an Event Transmitter to an Event
Receiver. The HTTP request body is a JSON Web Token <xref target="RFC7519"/>
with a <spanx style="verb">Content-Type</spanx> header of <spanx style="verb">application/secevent+jwt</spanx> as
defined in Section 2.2 and 6.2 of <xref target="SET"/>. Upon receipt, the 
Event Receiver acknowledges receipt with a response with HTTP 
Status 202, as described below in <xref target="httpPost"/>.</t>

<t>After successful (acknowledged) SET delivery, Event 
Transmitters SHOULD NOT be required to maintain or record SETs for 
recovery. Once a SET is acknowledged, the Event Receiver SHALL be 
responsible for retention and recovery.</t>

<t>Transmitted SETs SHOULD be self-validating (e.g. signed)
if there is a requirement to verify they were issued by the Event 
Transmitter at a later date when de-coupled from the original 
delivery where authenticity could be checked via the HTTP or 
TLS mutual authentication.</t>

<t>Upon receiving a SET, the Event Receiver reads the SET and validates 
it. The Event Receiver MUST acknowledge receipt to the Event Transmitter, using the 
defined acknowledgement or error method.</t>

<t>The Event Receiver SHALL NOT use the Event acknowledgement mechanism
to report Event errors other than relating to the parsing and validation
of the SET.</t>

</section>
<section anchor="httpPost" title="Push Delivery using HTTP">
<t>This method allows an Event Transmitter to use HTTP POST 
(Section 4.3.3 of <xref target="RFC7231"/>) to deliver
SETs to a previously registered web callback URI supplied by the
Event Receiver as part of an Event Stream configuration process 
(not defined by this document).</t>

<t>The SET to be delivered MAY be signed 
and/or encrypted as defined in <xref target="SET"/>.</t>

<t>The Event Stream configuration defines a URI of an Event 
Receiver provided endpoint which accepts HTTP POST requests (e.g. 
<spanx style="verb">https://rp.example.com/Events</spanx>).</t>

<t>The HTTP Content-Type (see 
Section 3.1.1.5 of <xref target="RFC7231"/>) for the HTTP POST is 
<spanx style="verb">application/secevent+jwt</spanx> and SHALL consist of 
a single SET (see <xref target="SET"/>).
As per Section 5.3.2 of <xref target="RFC7231"/>, the expected 
media type (<spanx style="verb">Accept</spanx> header) response is 
<spanx style="verb">application/json</spanx>.</t>

<t>To deliver an Event, the Event Transmitter generates an event 
delivery message and uses HTTP POST to the configured endpoint with
the appropriate <spanx style="verb">Accept</spanx> and 
<spanx style="verb">Content-Type</spanx> headers.
~~~
POST /Events  HTTP/1.1</t>

<t title="Example HTTP POST Request" anchor="postSet">Host: notify.examplerp.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Type: application/secevent+jwt
eyJhbGciOiJub25lIn0
.
eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
.
~~~</t>

<t>Upon receipt of the request, the Event Receiver SHALL 
validate the JWT structure of the SET as defined in 
Section 7.2 of <xref target="RFC7519"/>. The Event Receiver 
SHALL also validate the SET information as described
in Section 2 of <xref target="SET"/>.
If the SET is determined to be valid, the Event Receiver SHALL
“acknowledge” successful submission by responding with HTTP Status
202 as <spanx style="verb">Accepted</spanx> 
(see Section 6.3.3 of <xref target="RFC7231"/>).</t>

<t>In order
to maintain compatibility with other methods of transmission, the 
Event Receiver SHOULD NOT include an HTTP response body representation
of the submitted SET or what the SET’s pending status is when 
acknowledging success. In the case of an error (e.g. HTTP Status 400),
the purpose of the HTTP response body is to indicate any SET parsing, 
validation, or cryptographic errors.</t>

<t>The following is a non-normative example of a successful
receipt of a SET.</t>

<figure title="Example Successful Delivery Response" anchor="goodPostResponse"><artwork><![CDATA[
HTTP/1.1 202 Accepted
]]></artwork></figure>

<t>Note that the purpose of the “acknowledgement” response is to let the 
Event Transmitter know that a SET has been delivered and the 
information no longer needs to be retained by the Event Transmitter. 
Before acknowledgement, Event Receivers SHOULD ensure they have 
validated received SETs and retained them in a manner appropriate 
to information retention requirements appropriate to the SET 
event types signaled. The level and method of retention of SETs
by Event Receivers is out-of-scope of this specification.</t>

<t>In the Event of a general HTTP error condition, the Event Receiver
MAY respond with an appropriate HTTP Status code as defined in 
Section 6 of <xref target="RFC7231"/>.
When the Event Receiver detects an error parsing or 
validating a received SET (as defined by <xref target="SET"/>), 
the Event Receiver SHALL indicate an HTTP Status 400 error with an 
error code as described in <xref target="errorResponse"/>.</t>

<t>The following is an example non-normative error 
response.</t>

<figure title="Example HTTP Status 400 Response" anchor="badPostResponse"><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "err":"dup",
  "description":"SET already received. Ignored."

}
]]></artwork></figure>

</section>
<section anchor="errorResponse" title="Error Response Handling">

<t>If a SET is invalid, the following error codes are defined:</t>

<t title="SET Errors" anchor="reqErrors">|Err Value|Description
|json|Invalid JSON object.
|jwtParse|Invalid or unparsable JWT or JSON structure.
|jwtHdr|In invalid JWT header was detected.
|jwtCrypto|Unable to parse due to unsupported algorithm.
|jws|Signature was not validated.
|jwe|Unable to decrypt JWE encoded data.
|jwtAud|Invalid audience value.
|jwtIss|Issuer not recognized.
|setType|An unexpected Event type was received.
|setParse|Invalid structure was encountered such as an 
inability to parse or an incomplete set of Event claims.
|setData|SET event claims incomplete or invalid.
|dup|A duplicate SET was received and has been ignored.</t>

<t>An error response SHALL include a JSON
object which provides details about the error. The JSON object
includes the JSON attributes:</t>

<t><list style="hanging">
  <t hangText='err'><vspace blankLines='0'/>
  A value which is a keyword that 
describes the error (see <xref target="reqErrors"/>).
description</t>
  <t>A human-readable text that provides
additional diagnostic information.</t>
</list></t>

<t>When included as part of an HTTP Status 400 response, the above
JSON is the HTTP response body (see <xref target="badPostResponse"/>).</t>

</section>
</section>
<section anchor="aa" title="Authentication and Authorization">

<t>The SET delivery method described in this specification is
based upon HTTP and depends on the use of TLS and/or standard 
HTTP authentication and authorization schemes as per 
<xref target="RFC7235"/>. For example, the following
methodologies could be used among others:</t>

<t><list style="hanging">
  <t hangText='TLS Client Authentication'><vspace blankLines='0'/>
  Event delivery
endpoints MAY request TLS mutual client authentication. 
See Section 7.3 of <xref target="RFC5246"/>.</t>
  <t hangText='Bearer Tokens'><vspace blankLines='0'/>
  Bearer tokens 
<xref target="RFC6750"/> MAY be used when combined with TLS and a token
framework such as OAuth 2.0 <xref target="RFC6749"/>. 
For security considerations regarding the use of bearer tokens in
SET delivery see <xref target="bearerConsiderations"/>.</t>
  <t hangText='Basic Authentication'><vspace blankLines='0'/>
  Usage of basic
authentication should be avoided due to its use of a single factor
that is based upon a relatively static, symmetric secret.
Implementers SHOULD combine the use of basic authentication with
other factors. The security considerations of HTTP BASIC, are well
documented in <xref target="RFC7617"/> and SHOULD be considered
along with using signed SETs (see SET Payload Authentication below).</t>
  <t hangText='SET Payload Authentication'><vspace blankLines='0'/>
  In scenarios 
where SETs are signed and
the delivery method is HTTP POST (see <xref target="httpPost"/>),
Event Receivers MAY elect to use Basic Authentication or not 
to use HTTP or TLS based authentication at all. See 
<xref target="payloadAuthentication"/> for considerations.</t>
</list></t>

<t>As per Section 4.1 of <xref target="RFC7235"/>, a SET
delivery endpoint SHALL indicate supported HTTP authentication 
schemes via the <spanx style="verb">WWW-Authenticate</spanx> header.</t>

<t>Because SET Delivery describes a simple function, authorization
for the ability to pick-up or deliver SETs can be derived by
considering the identity of the SET issuer, or via an authentication
method above. This specification considers authentication as a
feature to prevent denial-of-service attacks. Because SETs are
not commands (see ), Event Receivers are free to ignore SETs that 
are not of interest.</t>

<t>For illustrative purposes only, SET delivery examples show an OAuth2
bearer token value <xref target="RFC6750"/> in the authorization header.
This is not intended to imply that bearer tokens are
preferred. However, the use of bearer tokens in the specification does
reflect common practice.</t>

<section anchor="authzTokens" title="Use of Tokens as Authorizations">
<t>When using bearer tokens or proof-of-possession tokens that
represent an authorization grant such as issued by OAuth (see <xref target="RFC6749"/>), implementers SHOULD consider the type of
authorization granted, any authorized scopes (see Section 3.3 of <xref target="RFC6749"/>), and the security subject(s) that SHOULD be mapped
from the authorization when considering local access control rules.
Section 6 of the OAuth Assertions draft <xref target="RFC7521"/>, documents common scenarios for
authorization including:</t>

<t><list style="symbols">
  <t>Clients using an assertion to authenticate and/or act on behalf
of itself;</t>
  <t>Clients acting on behalf of a user; and,</t>
  <t>A Client acting on behalf of an anonymous user (e.g., see next
section).</t>
</list></t>

<t>When using OAuth authorization tokens, implementers MUST take
into account the threats and countermeasures documented in the
security considerations for the use of client authorizations (see
Section 8 of <xref target="RFC7521"/>). When using
other token formats or frameworks, implementers MUST take into account
similar threats and countermeasures, especially those documented by
the relevant specifications.</t>

</section>
</section>
<section anchor="Security" title="Security Considerations">

<section anchor="payloadAuthentication" title="Authentication Using Signed SETs">
<t>In scenarios where HTTP authorization or TLS mutual authentication
are not used or are considered weak, JWS signed SETs SHOULD be 
used (see <xref target="RFC7515"/> and <xref target="SET"/>
Security Considerations). This enables the Event Receiver
to validate that the SET issuer is authorized to deliver SETs.</t>

</section>
<section anchor="http-considerations" title="HTTP Considerations">
<t>SET delivery depends on the use of Hypertext Transfer Protocol and thus
subject to the security considerations of HTTP Section 9 of <xref target="RFC7230"/> and its related specifications.</t>

<t>As stated in Section 2.7.1 of <xref target="RFC7230"/>, an 
HTTP requestor MUST NOT generate the <spanx style="verb">userinfo</spanx>
(i.e., username and password) component (and its “@” delimiter) when
an “http” URI reference is generated with a message as they are now
disallowed in HTTP.</t>

</section>
<section anchor="tls-support-considerations" title="TLS Support Considerations">
<t>SETs contain sensitive information that is considered PII
(e.g. subject claims). Therefore, Event Transmitters and
Event Receivers MUST require the use of a transport-layer 
security mechanism. Event delivery endpoints MUST support TLS 
1.2 <xref target="RFC5246"/> and MAY support additional 
transport-layer mechanisms meeting its security requirements. 
When using TLS, the client MUST perform a TLS/SSL server
certificate check, per <xref target="RFC6125"/>. Implementation
security considerations for TLS can be found in “Recommendations for
Secure Use of TLS and DTLS” <xref target="RFC7525"/>.</t>

</section>
<section anchor="authorization-token-considerations" title="Authorization Token Considerations">
<t>When using authorization tokens such as those issued by OAuth 2.0
<xref target="RFC6749"/>, implementers MUST take into account threats
and countermeasures documented in Section 8 of <xref target="RFC7521"/>.</t>

</section>
<section anchor="bearerConsiderations" title="Bearer Token Considerations">
<t>Due to the possibility of interception, Bearer tokens MUST be 
exchanged using TLS.</t>

<t>Bearer tokens MUST have a limited lifetime that can be determined
directly or indirectly (e.g., by checking with a validation service)
by the service provider. By expiring tokens, clients are forced to
obtain a new token (which usually involves re-authentication) for
continued authorized access. For example, in OAuth2, a client MAY use
OAuth token refresh to obtain a new bearer token after authenticating
to an authorization server. See Section 6 of <xref target="RFC6749"/>.</t>

<t>Implementations supporting OAuth bearer tokens need to factor in
security considerations of this authorization method 
<xref target="RFC7521"/>. Since security is only as good
as the weakest link, implementers also need to consider authentication
choices coupled with OAuth bearer tokens. The security considerations
of the default authentication method for OAuth bearer tokens, HTTP
BASIC, are well documented in 
<xref target="RFC7617"/>, therefore implementers
are encouraged to prefer stronger authentication methods. Designating
the specific methods of authentication and authorization are
out-of-scope for the delivery of SET tokens, however this 
information is provided as a resource to implementers.</t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>If a SET needs to be retained for audit purposes, JWS MAY 
be used to provide verification of its authenticity.</t>

<t>Event Transmitters SHOULD attempt to specialize Event Streams 
so that the content is targeted to the specific business and 
protocol needs of subscribers.</t>

<t>When sharing personally identifiable information or information
that is otherwise considered confidential to affected users, Event 
Transmitters and Receivers MUST have the appropriate legal agreements
and user consent or terms of service in place.</t>

<t>The propagation of subject identifiers can be perceived as personally
identifiable information. Where possible, Event Transmitters and Receivers
SHOULD devise approaches that prevent propagation – for example, the
passing of a hash value that requires the subscriber to already know
the subject.</t>

</section>
<section anchor="IANA" title="IANA Considerations">

<t>There are no IANA considerations.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="SET" target='https://www.rfc-editor.org/info/rfc8417'>
<front>
<title>Security Event Token (SET)</title>
<author initials='P.' surname='Hunt' fullname='P. Hunt' role='editor'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='W.' surname='Denniss' fullname='W. Denniss'><organization /></author>
<author initials='M.' surname='Ansari' fullname='M. Ansari'><organization /></author>
<date year='2018' month='July' />
<abstract><t>This specification defines the Security Event Token (SET) data structure.  A SET describes statements of fact from the perspective of an issuer about a subject.  These statements of fact represent an event that occurred directly to or about a security subject, for example, a statement about the issuance or revocation of a token on behalf of a subject.  This specification is intended to enable representing security- and identity-related events.  A SET is a JSON Web Token (JWT), which can be optionally signed and/or encrypted. SETs can be distributed via protocols such as HTTP.</t></abstract>
</front>
<seriesInfo name='RFC' value='8417'/>
<seriesInfo name='DOI' value='10.17487/RFC8417'/>
</reference>


<reference anchor="POSIX.1" >
  <front>
    <title>The Open Group Base Specifications Issue 7</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2013"/>
  </front>
  <seriesInfo name="IEEE" value="Std 1003.1, 2013 Edition"/>
  <format type="HTML" target="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_15"/>
</reference>




<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7235" target='https://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC6750" target='https://www.rfc-editor.org/info/rfc6750'>
<front>
<title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='D.' surname='Hardt' fullname='D. Hardt'><organization /></author>
<date year='2012' month='October' />
<abstract><t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a &quot;bearer&quot;) can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6750'/>
<seriesInfo name='DOI' value='10.17487/RFC6750'/>
</reference>



<reference  anchor="RFC6749" target='https://www.rfc-editor.org/info/rfc6749'>
<front>
<title>The OAuth 2.0 Authorization Framework</title>
<author initials='D.' surname='Hardt' fullname='D. Hardt' role='editor'><organization /></author>
<date year='2012' month='October' />
<abstract><t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6749'/>
<seriesInfo name='DOI' value='10.17487/RFC6749'/>
</reference>



<reference  anchor="RFC7617" target='https://www.rfc-editor.org/info/rfc7617'>
<front>
<title>The 'Basic' HTTP Authentication Scheme</title>
<author initials='J.' surname='Reschke' fullname='J. Reschke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This document defines the &quot;Basic&quot; Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t></abstract>
</front>
<seriesInfo name='RFC' value='7617'/>
<seriesInfo name='DOI' value='10.17487/RFC7617'/>
</reference>



<reference  anchor="RFC7521" target='https://www.rfc-editor.org/info/rfc7521'>
<front>
<title>Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants</title>
<author initials='B.' surname='Campbell' fullname='B. Campbell'><organization /></author>
<author initials='C.' surname='Mortimore' fullname='C. Mortimore'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='Y.' surname='Goland' fullname='Y. Goland'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification provides a framework for the use of assertions with OAuth 2.0 in the form of a new client authentication mechanism and a new authorization grant type.  Mechanisms are specified for transporting assertions during interactions with a token endpoint; general processing rules are also specified.</t><t>The intent of this specification is to provide a common framework for OAuth 2.0 to interwork with other identity systems using assertions and to provide alternative client authentication mechanisms.</t><t>Note that this specification only defines abstract message flows and processing rules.  In order to be implementable, companion specifications are necessary to provide the corresponding concrete instantiations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7521'/>
<seriesInfo name='DOI' value='10.17487/RFC7521'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6125" target='https://www.rfc-editor.org/info/rfc6125'>
<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<author initials='J.' surname='Hodges' fullname='J. Hodges'><organization /></author>
<date year='2011' month='March' />
<abstract><t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6125'/>
<seriesInfo name='DOI' value='10.17487/RFC6125'/>
</reference>



<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>




    </references>



<section anchor="other-streaming-specifications" title="Other Streaming Specifications">
<t>[[EDITORS NOTE: This section to be removed prior to publication]]</t>

<t>The following pub/sub, queuing, streaming systems were reviewed 
as possible solutions or as input to the current draft:</t>

<t>XMPP Events
The WG considered the XMPP events ands its ability to provide a single
messaging solution without the need for both polling and push modes.
The feeling was the size and methodology of XMPP was to far apart from
the current capabilities of the SECEVENTs community which focuses in
on HTTP based service delivery and authorization.</t>

<t>Amazon Simple Notification Service
Simple Notification Service, is a pub/sub messaging product from 
AWS. SNS supports a variety of subscriber types: HTTP/HTTPS endpoints, 
AWS Lambda functions, email addresses (as JSON or plain text), phone 
numbers (via SMS), and AWS SQS standard queues. It doesn’t directly 
support pull, but subscribers can get the pull model by creating an 
SQS queue and subscribing it to the topic. Note that this puts the 
cost of pull support back onto the subscriber, just as it is in the 
push model. It is not clear that one way is strictly better than the 
other; larger, sophisticated developers may be happy to own message 
persistence so they can have their own internal delivery guarantees. 
The long tail of OIDC clients may not care about that, or may fail 
to get it right. Regardless, I think we can learn something from the 
Delivery Policies supported by SNS, as well as the delivery controls 
that SQS offers (e.g. Visibility Timeout, Dead-Letter Queues). I’m 
not suggesting that we need all of these things in the spec, but 
they give an idea of what features people have found useful.
Other information:</t>

<t><list style="symbols">
  <t>API Reference: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html</t>
  <t>Visibility Timeouts: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html</t>
</list></t>

<t>Apache Kafka
Apache Kafka is an Apache open source project based upon TCP for 
distributed streaming. It prescribes some interesting general 
purpose features that seem to extend far beyond the simpler 
streaming model SECEVENTs is after. A comment from MS has been that 
Kafka does an acknowledge with poll combination event which seems 
to be a performance advantage. See: https://kafka.apache.org/intro</t>

<t>Google Pub/Sub
Google Pub Sub system favours a model whereby polling and acknowledgement
of events is done as separate endpoints as separate functions.
Information:</t>

<t><list style="symbols">
  <t>Cloud Overview - https://cloud.google.com/pubsub/</t>
  <t>Subscriber Overview - https://cloud.google.com/pubsub/docs/subscriber</t>
  <t>Subscriber Pull(poll) - https://cloud.google.com/pubsub/docs/pull</t>
</list></t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>The editors would like to thanks the members of the SCIM WG which 
began discussions of provisioning events starting with: draft-hunt-scim-notify-00 in 2015.</t>

<t>The editors would like to thank the authors of draft-ietf-secevent-delivery-02,
on which this draft is based.</t>

<t>The editor would like to thank the participants in the the SECEVENTS
working group for their support of this specification.</t>

</section>
<section anchor="change-log" title="Change Log">
<t>Draft 00 - AB - Based on draft-ietf-secevent-delivery-02 with the 
following changes:</t>

<t><list style="symbols">
  <t>Renamed to “Push-Based SET Token Delivery Using HTTP”</t>
  <t>Removed references to the HTTP Polling delivery method.</t>
  <t>Removed informative reference to RFC6202.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAJ3KV1sAA51c6XbbOJb+j6fAOD86npFkWVntPn1OObaTKBMvsbwk7ulT
gUhIYsxFQ5B2lKXPvMa83jzJ3AUAQVpO1Uy6OpFEEri4uMt3F7Df74sqqVK9
K09rs+i/UkbHcnJ4Ls+LG53LA50mt7pcyQuT5HP59vz8VKjptNS3uzLR1axv
dKRvdV71F1W17C9hDH89LtWs6j9wV384FLGqYN7RcPtlf/iiPxqKCH6YF+Vq
V5oqFsmy3JVVWZtqNBzuDEdCqFKrXTnRUV0m1UrcFeXNvCzqZfObPMRpjLyC
S0jwG7wsbvQK7o135TivdJnrqn+AtAlhKpXHv6u0yIGQlTZimezKv1dF1JOm
KKtSzwx8WmX44R8wf10tinJX9IWEP0luduXeQL5S0U2mcvotVxmMtJfnaqrT
VLeuFeVc5ck3VSVFDvdk6lvBF3SmknRXlkm0UPDkb4ouDaIio8tlgduj46Qq
ynDqo4F8B4SbYOIjHEKn8lV4qT0v3FIWpoDVB1Nn0y+/Ze6Cnxg4uitxx3a3
toxOZ/3EmFrHgySfFVshJacD+bbOq4CQ00WSNr+1KTgpVZTqcPol3D1YwN2/
rdSiKIiA9kInsL2VNlEdLlaVSW06l9pTvSmKeXuqzLjbf5vTxTWT7eUGhg5n
AlnQ31R4oT3PfmKiojUNPzFQ9MRvEV7vzgSic6xilSZt0QERy1etK39iAyt4
JldxZxNFXpQZPHard+lm0OtdefZ6/+XT7Rf0w+nJZPxxsM1X8Y+1BecLLU+W
oP+kPxKtgpwsdZTMkojIMHKMsiBf+Cedbrjvff/JLgG1z8D4daVlMZOHqY4q
EHmVStBB+7XIk8jIw3ye5FqXxg/hLcUT/5PRZaINiuJua6bx4eEh2IMqltvD
4ZPBdo8ek4egPonVN/wzI860H317fvTeC/yynppBATwgCzOABWwVOeyIxgtb
O893dna2d17s7GxN0WSCfdi63P4dtG85fDpYVFn6qFLz34dPf99+JkS/35dq
aioQ/EqcLxIjTchMCY/DwEYuijup7MqQR8ZZNTKesMlgko0Uj2EfzabM1EpO
NTxMJhrMdlXA00uwvUlRm3QlSz1PTEWXSjDAeJcUtTfkuPvnssBfz99PQCaB
Q8DnWCqD44CRxhErEAX39ICXkiVxDFoFxrQs4jqiJeAensAtt4m+k98fJXjt
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

-->

</rfc>

