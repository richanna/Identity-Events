<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-secevent-http-push-00" category="std">

  <front>
    <title abbrev="draft-ietf-secevent-http-push">Push-Based SET Token Delivery Using HTTP</title>

    <author initials="A." surname="Backman" fullname="Annabelle Backman" role="editor">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones" role="editor">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt" role="editor">
      <organization>Oracle</organization>
      <address>
        <email>phil.hunt@yahoo.com</email>
      </address>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization>Cisco</organization>
      <address>
        <email>morteza.ansari@cisco.com</email>
      </address>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization>Microsoft</organization>
      <address>
        <email>tonynad@microsoft.com</email>
      </address>
    </author>

    <date year="2018" month="July" day="20"/>

    <area>Network</area>
    <workgroup>Network Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines how a series of security event tokens 
(SETs) may be delivered to a previously registered receiver 
using HTTP POST over TLS initiated as a push to the receiver.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction and Overview">
<t>This specification defines how a stream of SETs (see
<xref target="SET"/>) can be transmitted to a previously 
registered Event Receiver using HTTP <xref target="RFC7231"/> over TLS. The
specification defines a method to push SETs via HTTP POST.</t>

<t>This specification defines a method for SET delivery in what
is known as Event Streams.</t>

<t>This specification does not define the method by which Event 
Streams are defined, provisioned, managed, monitored,
and configured and is out of scope of this specification.</t>

<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
they appear in all capitals, as shown here.</t>

<t>For purposes of readability examples are not URL encoded.
Implementers MUST percent encode URLs as described in Section 2.1 of
<xref target="RFC3986"/>.</t>

<t>Throughout this documents all figures MAY contain spaces and extra
line-wrapping for readability and space limitations. Similarly, some
URI’s contained within examples, have been shortened for space and
readability reasons.</t>

</section>
<section anchor="defn" title="Definitions">
<t>This specification assumes terminology defined in the Security
Event Token specification <xref target="SET"/>.</t>

<t>The following definitions are defined for Security Event distribution:</t>

<t><list style="hanging">
  <t hangText='Event Transmitter'><vspace blankLines='0'/>
  A service provider that delivers SETs to other providers known
as Event Receivers. An Event Transmitter is responsible for offering a
service that allows the Event Receiver to check the Event Stream
configuration and status known as the “Control Plane”.</t>
  <t hangText='Event Receiver'><vspace blankLines='0'/>
  A service provider that registers to receive SETs from an Event
Transmitter and provides an endpoint to receive SETs via HTTP POST. 
Event Receivers can check current Event Stream configuration and status
by accessing the Event Transmitters “Control Plane”.</t>
  <t hangText='Event Stream'><vspace blankLines='0'/>
  An Event Stream is a defined location, distribution method and
whereby an Event Transmitter and Event Receiver exchange a pre-
defined family of SETs. A Stream is assumed to have configuration data
such as HTTP endpoints, timeouts, public key sets for signing and
encryption, and Event Families.</t>
  <t hangText='Subject'><vspace blankLines='0'/>
  The security subject around which a security event has occurred. For
example, a security subject might per a user, a person, an email
address, a service provider entity, an IP address, an OAuth Client, a
mobile device, or any identifiable thing referenced in security and
authorization systems.</t>
  <t hangText='Event'><vspace blankLines='0'/>
  An Event is defined to be an event as represented by a security event
token (SET).  See <xref target="SET"/>.</t>
  <t hangText='NumericDate'><vspace blankLines='0'/>
  A JSON numeric value representing the number of seconds from
1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring
leap seconds.  This is equivalent to the IEEE Std 1003.1, 2013 Edition
<xref target="POSIX.1"></xref> definition “Seconds Since the Epoch”, in
which each day is accounted for by exactly 86400 seconds, other than
that non-integer values can be represented.  See <xref target="RFC3339"/> for
details regarding date/times in general and UTC in particular.</t>
</list></t>

</section>
</section>
<section anchor="event_stream" title="SET Event Stream Protocol">
<t>An Event Stream represents the communication channel over which a 
series of SETs are delivered to a configured Event Receiver.</t>

<section anchor="event_delivery" title="Event Delivery Process">
<t>When an Event occurs, the Event Transmitter constructs a SET
token <xref target="SET"/> that describes the Event. The Event Transmitter
determines the Event Streams over which the SET should be distributed
to.</t>

<t>How SETs are defined and the process by which Events are identified for 
Event Receivers is out-of-scope of this    specification.</t>

<t>When a SET is available for an Event Receiver, the Event Transmitter
attempts to deliver the SET based on the Event Receiver’s registered
delivery mechanism:</t>

<t><list style="symbols">
  <t>The Event Transmitter uses an HTTP/1.1 POST to the Event Receiver
endpoint to deliver the SET;</t>
  <t>Or, the Event Transmitter delivers the Event through a different
method not defined by this specification.</t>
</list></t>

<t>In Push-Based SET Delivery Using HTTP, SETs are delivered one at a
time using HTTP POST requests by an Event Transmitter to an Event
Receiver. The HTTP request body is a JSON Web Token <xref target="RFC7519"/>
with a <spanx style="verb">Content-Type</spanx> header of <spanx style="verb">application/secevent+jwt</spanx> as
defined in Section 2.2 and 6.2 of <xref target="SET"/>. Upon receipt, the 
Event Receiver acknowledges receipt with a response with HTTP 
Status 202, as described below in <xref target="httpPost"/>.</t>

<t>After successful (acknowledged) SET delivery, Event 
Transmitters SHOULD NOT be required to maintain or record SETs for 
recovery. Once a SET is acknowledged, the Event Receiver SHALL be 
responsible for retention and recovery.</t>

<t>Transmitted SETs SHOULD be self-validating (e.g. signed)
if there is a requirement to verify they were issued by the Event 
Transmitter at a later date when de-coupled from the original 
delivery where authenticity could be checked via the HTTP or 
TLS mutual authentication.</t>

<t>Upon receiving a SET, the Event Receiver reads the SET and validates 
it. The Event Receiver MUST acknowledge receipt to the Event Transmitter, using the 
defined acknowledgement or error method.</t>

<t>The Event Receiver SHALL NOT use the Event acknowledgement mechanism
to report Event errors other than relating to the parsing and validation
of the SET.</t>

</section>
<section anchor="httpPost" title="Push Delivery using HTTP">
<t>This method allows an Event Transmitter to use HTTP POST 
(Section 4.3.3 <xref target="RFC7231"/>) to deliver
SETs to a previously registered web callback URI supplied by the
Event Receiver as part of an Event Stream configuration process 
(not defined by this document).</t>

<t>The SET to be delivered MAY be signed 
and/or encrypted as defined in <xref target="SET"/>.</t>

<t>The Event Stream configuration defines a URI of an Event 
Receiver provided endpoint which accepts HTTP POST requests (e.g. 
<spanx style="verb">https://rp.example.com/Events</spanx>).</t>

<t>The HTTP Content-Type (see 
Section 3.1.1.5 <xref target="RFC7231"/>) for the HTTP POST is 
<spanx style="verb">application/secevent+jwt</spanx> and SHALL consist of 
a single SET (see <xref target="SET"/>).
As per Section 5.3.2 <xref target="RFC7231"/>, the expected 
media type (<spanx style="verb">Accept</spanx> header) response is 
<spanx style="verb">application/json</spanx>.</t>

<t>To deliver an Event, the Event Transmitter generates an event 
delivery message and uses HTTP POST to the configured endpoint with
the appropriate <spanx style="verb">Accept</spanx> and 
<spanx style="verb">Content-Type</spanx> headers.</t>

<figure title="Example HTTP POST Request" anchor="postSet"><artwork><![CDATA[
POST /Events  HTTP/1.1

Host: notify.examplerp.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Type: application/secevent+jwt
eyJhbGciOiJub25lIn0
.
eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
.
]]></artwork></figure>

<t>Upon receipt of the request, the Event Receiver SHALL 
validate the JWT structure of the SET as defined in 
Section 7.2 <xref target="RFC7519"/>. The Event Receiver 
SHALL also validate the SET information as described
in Section 2 <xref target="SET"/>.</t>

<t>If the SET is determined to be valid, the Event Receiver SHALL
“acknowledge” successful submission by responding with HTTP Status
202 as <spanx style="verb">Accepted</spanx> 
(see Section 6.3.3 <xref target="RFC7231"/>).</t>

<t>In order
to maintain compatibility with other methods of transmission, the 
Event Receiver SHOULD NOT include an HTTP response body representation
of the submitted SET or what the SET’s pending status is when 
acknowledging success. In the case of an error (e.g. HTTP Status 400),
the purpose of the HTTP response body is to indicate any SET parsing, 
validation, or cryptographic errors.</t>

<t>The following is a non-normative example of a successful
receipt of a SET.</t>

<figure title="Example Successful Delivery Response" anchor="goodPostResponse"><artwork><![CDATA[
HTTP/1.1 202 Accepted
]]></artwork></figure>

<t>Note that the purpose of the “acknowledgement” response is to let the 
Event Transmitter know that a SET has been delivered and the 
information no longer needs to be retained by the Event Transmitter. 
Before acknowledgement, Event Receivers SHOULD ensure they have 
validated received SETs and retained them in a manner appropriate 
to information retention requirements appropriate to the SET 
event types signaled. The level and method of retention of SETs
by Event Receivers is out-of-scope of this specification.</t>

<t>In the Event of a general HTTP error condition, the Event Receiver
MAY respond with an appropriate HTTP Status code as defined in 
Section 6 <xref target="RFC7231"/>.</t>

<t>When the Event Receiver detects an error parsing or 
validating a received SET (as defined by <xref target="SET"/>), 
the Event Receiver SHALL indicate an HTTP Status 400 error with an 
error code as described in <xref target="errorResponse"/>.</t>

<t>The following is an example non-normative error 
response.</t>

<figure title="Example HTTP Status 400 Response" anchor="badPostResponse"><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "err":"dup",
  "description":"SET already received. Ignored."

}
]]></artwork></figure>

</section>
<section anchor="errorResponse" title="Error Response Handling">

<t>If a SET is invalid, the following error codes are defined:</t>

<texttable title="SET Errors" anchor="reqErrors">
      <ttcol align='left'>Err Value</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>json</c>
      <c>Invalid JSON object.</c>
      <c>jwtParse</c>
      <c>Invalid or unparsable JWT or JSON structure.</c>
      <c>jwtHdr</c>
      <c>In invalid JWT header was detected.</c>
      <c>jwtCrypto</c>
      <c>Unable to parse due to unsupported algorithm.</c>
      <c>jws</c>
      <c>Signature was not validated.</c>
      <c>jwe</c>
      <c>Unable to decrypt JWE encoded data.</c>
      <c>jwtAud</c>
      <c>Invalid audience value.</c>
      <c>jwtIss</c>
      <c>Issuer not recognized.</c>
      <c>setType</c>
      <c>An unexpected Event type was received.</c>
      <c>setParse</c>
      <c>Invalid structure was encountered such as an inability to parse or an incomplete set of Event claims.</c>
      <c>setData</c>
      <c>SET event claims incomplete or invalid.</c>
      <c>dup</c>
      <c>A duplicate SET was received and has been ignored.</c>
</texttable>

<t>An error response SHALL include a JSON
object which provides details about the error. The JSON object
includes the JSON attributes:</t>

<t><list style="hanging">
  <t hangText='err'><vspace blankLines='0'/>
  A value which is a keyword that 
describes the error (see <xref target="reqErrors"/>).
description</t>
  <t>A human-readable text that provides
additional diagnostic information.</t>
</list></t>

<t>When included as part of an HTTP Status 400 response, the above
JSON is the HTTP response body (see <xref target="badPostResponse"/>).</t>

</section>
</section>
<section anchor="aa" title="Authentication and Authorization">

<t>The SET delivery method described in this specification is
based upon HTTP and depends on the use of TLS and/or standard 
HTTP authentication and authorization schemes as per 
<xref target="RFC7235"/>. For example, the following
methodologies could be used among others:</t>

<t><list style="hanging">
  <t hangText='TLS Client Authentication'><vspace blankLines='0'/>
  Event delivery
endpoints MAY request TLS mutual client authentication. 
See Section 7.3 <xref target="RFC5246"/>.</t>
  <t hangText='Bearer Tokens'><vspace blankLines='0'/>
  Bearer tokens 
<xref target="RFC6750"/> MAY be used when combined with TLS and a token
framework such as OAuth 2.0 <xref target="RFC6749"/>. 
For security considerations regarding the use of bearer tokens in
SET delivery see <xref target="bearerConsiderations"/>.</t>
  <t hangText='Basic Authentication'><vspace blankLines='0'/>
  Usage of basic
authentication should be avoided due to its use of a single factor
that is based upon a relatively static, symmetric secret.
Implementers SHOULD combine the use of basic authentication with
other factors. The security considerations of HTTP BASIC, are well
documented in <xref target="RFC7617"/> and SHOULD be considered
along with using signed SETs (see SET Payload Authentication below).</t>
  <t hangText='SET Payload Authentication'><vspace blankLines='0'/>
  In scenarios 
where SETs are signed and
the delivery method is HTTP POST (see <xref target="httpPost"/>),
Event Receivers MAY elect to use Basic Authentication or not 
to use HTTP or TLS based authentication at all. See 
<xref target="payloadAuthentication"/> for considerations.</t>
</list></t>

<t>As per Section 4.1 of <xref target="RFC7235"/>, a SET
delivery endpoint SHALL indicate supported HTTP authentication 
schemes via the <spanx style="verb">WWW-Authenticate</spanx> header.</t>

<t>Because SET Delivery describes a simple function, authorization
for the ability to pick-up or deliver SETs can be derived by
considering the identity of the SET issuer, or via an authentication
method above. This specification considers authentication as a
feature to prevent denial-of-service attacks. Because SETs are
not commands (see ), Event Receivers are free to ignore SETs that 
are not of interest.</t>

<t>For illustrative purposes only, SET delivery examples show an OAuth2
bearer token value <xref target="RFC6750"/> in the authorization header.
This is not intended to imply that bearer tokens are
preferred. However, the use of bearer tokens in the specification does
reflect common practice.</t>

<section anchor="authzTokens" title="Use of Tokens as Authorizations">
<t>When using bearer tokens or proof-of-possession tokens that
represent an authorization grant such as issued by OAuth (see <xref target="RFC6749"/>), implementers SHOULD consider the type of
authorization granted, any authorized scopes (see Section 3.3 of <xref target="RFC6749"/>), and the security subject(s) that SHOULD be mapped
from the authorization when considering local access control rules.
Section 6 of the OAuth Assertions draft <xref target="RFC7521"/>, documents common scenarios for
authorization including:</t>

<t><list style="symbols">
  <t>Clients using an assertion to authenticate and/or act on behalf
of itself;</t>
  <t>Clients acting on behalf of a user; and,</t>
  <t>A Client acting on behalf of an anonymous user (e.g., see next
section).</t>
</list></t>

<t>When using OAuth authorization tokens, implementers MUST take
into account the threats and countermeasures documented in the
security considerations for the use of client authorizations (see
Section 8 of <xref target="RFC7521"/>). When using
other token formats or frameworks, implementers MUST take into account
similar threats and countermeasures, especially those documented by
the relevant specifications.</t>

</section>
</section>
<section anchor="Security" title="Security Considerations">

<section anchor="payloadAuthentication" title="Authentication Using Signed SETs">
<t>In scenarios where HTTP authorization or TLS mutual authentication
are not used or are considered weak, JWS signed SETs SHOULD be 
used (see <xref target="RFC7515"/> and 
Security Considerations <xref target="SET"/>). This enables the Event Receiver
to validate that the SET issuer is authorized to deliver SETs.</t>

</section>
<section anchor="http-considerations" title="HTTP Considerations">
<t>SET delivery depends on the use of Hypertext Transfer Protocol and thus
subject to the security considerations of HTTP Section 9 <xref target="RFC7230"/> and its related specifications.</t>

<t>As stated in Section 2.7.1 <xref target="RFC7230"/>, an 
HTTP requestor MUST NOT generate the <spanx style="verb">userinfo</spanx>
(i.e., username and password) component (and its “@” delimiter) when
an “http” URI reference is generated with a message as they are now
disallowed in HTTP.</t>

</section>
<section anchor="tls-support-considerations" title="TLS Support Considerations">
<t>SETs contain sensitive information that is considered PII
(e.g. subject claims). Therefore, Event Transmitters and
Event Receivers MUST require the use of a transport-layer 
security mechanism. Event delivery endpoints MUST support TLS 
1.2 <xref target="RFC5246"/> and MAY support additional 
transport-layer mechanisms meeting its security requirements. 
When using TLS, the client MUST perform a TLS/SSL server
certificate check, per <xref target="RFC6125"/>. Implementation
security considerations for TLS can be found in “Recommendations for
Secure Use of TLS and DTLS” <xref target="RFC7525"/>.</t>

</section>
<section anchor="authorization-token-considerations" title="Authorization Token Considerations">
<t>When using authorization tokens such as those issued by OAuth 2.0
<xref target="RFC6749"/>, implementers MUST take into account threats
and countermeasures documented in Section 8 of <xref target="RFC7521"/>.</t>

<section anchor="bearerConsiderations" title="Bearer Token Considerations">
<t>Due to the possibility of interception, Bearer tokens MUST be 
exchanged using TLS.</t>

<t>Bearer tokens MUST have a limited lifetime that can be determined
directly or indirectly (e.g., by checking with a validation service)
by the service provider. By expiring tokens, clients are forced to
obtain a new token (which usually involves re-authentication) for
continued authorized access. For example, in OAuth2, a client MAY use
OAuth token refresh to obtain a new bearer token after authenticating
to an authorization server. See Section 6 of <xref target="RFC6749"/>.</t>

<t>Implementations supporting OAuth bearer tokens need to factor in
security considerations of this authorization method 
<xref target="RFC7521"/>. Since security is only as good
as the weakest link, implementers also need to consider authentication
choices coupled with OAuth bearer tokens. The security considerations
of the default authentication method for OAuth bearer tokens, HTTP
BASIC, are well documented in 
<xref target="RFC7617"/>, therefore implementers
are encouraged to prefer stronger authentication methods. Designating
the specific methods of authentication and authorization are
out-of-scope for the delivery of SET tokens, however this 
information is provided as a resource to implementers.</t>

</section>
</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>If a SET needs to be retained for audit purposes, JWS MAY 
be used to provide verification of its authenticity.</t>

<t>Event Transmitters SHOULD attempt to specialize Event Streams 
so that the content is targeted to the specific business and 
protocol needs of subscribers.</t>

<t>When sharing personally identifiable information or information
that is otherwise considered confidential to affected users, Event 
Transmitters and Receivers MUST have the appropriate legal agreements
and user consent or terms of service in place.</t>

<t>The propagation of subject identifiers can be perceived as personally
identifiable information. Where possible, Event Transmitters and Receivers
SHOULD devise approaches that prevent propagation — for example, the
passing of a hash value that requires the subscriber to already know
the subject.</t>

</section>
<section anchor="IANA" title="IANA Considerations">

<t>There are no IANA considerations.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="SET" target='https://www.rfc-editor.org/info/rfc8417'>
<front>
<title>Security Event Token (SET)</title>
<author initials='P.' surname='Hunt' fullname='P. Hunt' role='editor'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='W.' surname='Denniss' fullname='W. Denniss'><organization /></author>
<author initials='M.' surname='Ansari' fullname='M. Ansari'><organization /></author>
<date year='2018' month='July' />
<abstract><t>This specification defines the Security Event Token (SET) data structure.  A SET describes statements of fact from the perspective of an issuer about a subject.  These statements of fact represent an event that occurred directly to or about a security subject, for example, a statement about the issuance or revocation of a token on behalf of a subject.  This specification is intended to enable representing security- and identity-related events.  A SET is a JSON Web Token (JWT), which can be optionally signed and/or encrypted. SETs can be distributed via protocols such as HTTP.</t></abstract>
</front>
<seriesInfo name='RFC' value='8417'/>
<seriesInfo name='DOI' value='10.17487/RFC8417'/>
</reference>


<reference anchor="POSIX.1" >
  <front>
    <title>The Open Group Base Specifications Issue 7</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2013"/>
  </front>
  <seriesInfo name="IEEE" value="Std 1003.1, 2013 Edition"/>
  <format type="HTML" target="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_15"/>
</reference>




<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC7235" target='https://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC6750" target='https://www.rfc-editor.org/info/rfc6750'>
<front>
<title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='D.' surname='Hardt' fullname='D. Hardt'><organization /></author>
<date year='2012' month='October' />
<abstract><t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a &quot;bearer&quot;) can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6750'/>
<seriesInfo name='DOI' value='10.17487/RFC6750'/>
</reference>



<reference  anchor="RFC6749" target='https://www.rfc-editor.org/info/rfc6749'>
<front>
<title>The OAuth 2.0 Authorization Framework</title>
<author initials='D.' surname='Hardt' fullname='D. Hardt' role='editor'><organization /></author>
<date year='2012' month='October' />
<abstract><t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6749'/>
<seriesInfo name='DOI' value='10.17487/RFC6749'/>
</reference>



<reference  anchor="RFC7617" target='https://www.rfc-editor.org/info/rfc7617'>
<front>
<title>The 'Basic' HTTP Authentication Scheme</title>
<author initials='J.' surname='Reschke' fullname='J. Reschke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This document defines the &quot;Basic&quot; Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t></abstract>
</front>
<seriesInfo name='RFC' value='7617'/>
<seriesInfo name='DOI' value='10.17487/RFC7617'/>
</reference>



<reference  anchor="RFC7521" target='https://www.rfc-editor.org/info/rfc7521'>
<front>
<title>Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants</title>
<author initials='B.' surname='Campbell' fullname='B. Campbell'><organization /></author>
<author initials='C.' surname='Mortimore' fullname='C. Mortimore'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='Y.' surname='Goland' fullname='Y. Goland'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification provides a framework for the use of assertions with OAuth 2.0 in the form of a new client authentication mechanism and a new authorization grant type.  Mechanisms are specified for transporting assertions during interactions with a token endpoint; general processing rules are also specified.</t><t>The intent of this specification is to provide a common framework for OAuth 2.0 to interwork with other identity systems using assertions and to provide alternative client authentication mechanisms.</t><t>Note that this specification only defines abstract message flows and processing rules.  In order to be implementable, companion specifications are necessary to provide the corresponding concrete instantiations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7521'/>
<seriesInfo name='DOI' value='10.17487/RFC7521'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6125" target='https://www.rfc-editor.org/info/rfc6125'>
<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<author initials='J.' surname='Hodges' fullname='J. Hodges'><organization /></author>
<date year='2011' month='March' />
<abstract><t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6125'/>
<seriesInfo name='DOI' value='10.17487/RFC6125'/>
</reference>



<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>




    </references>



<section anchor="other-streaming-specifications" title="Other Streaming Specifications">
<t>[[EDITORS NOTE: This section to be removed prior to publication]]</t>

<t>The following pub/sub, queuing, streaming systems were reviewed 
as possible solutions or as input to the current draft:</t>

<t>XMPP Events</t>

<t>The WG considered the XMPP events ands its ability to provide a single
messaging solution without the need for both polling and push modes.
The feeling was the size and methodology of XMPP was to far apart from
the current capabilities of the SECEVENTs community which focuses in
on HTTP based service delivery and authorization.</t>

<t>Amazon Simple Notification Service</t>

<t>Simple Notification Service, is a pub/sub messaging product from 
AWS. SNS supports a variety of subscriber types: HTTP/HTTPS endpoints, 
AWS Lambda functions, email addresses (as JSON or plain text), phone 
numbers (via SMS), and AWS SQS standard queues. It doesn’t directly 
support pull, but subscribers can get the pull model by creating an 
SQS queue and subscribing it to the topic. Note that this puts the 
cost of pull support back onto the subscriber, just as it is in the 
push model. It is not clear that one way is strictly better than the 
other; larger, sophisticated developers may be happy to own message 
persistence so they can have their own internal delivery guarantees. 
The long tail of OIDC clients may not care about that, or may fail 
to get it right. Regardless, I think we can learn something from the 
Delivery Policies supported by SNS, as well as the delivery controls 
that SQS offers (e.g. Visibility Timeout, Dead-Letter Queues). I’m 
not suggesting that we need all of these things in the spec, but 
they give an idea of what features people have found useful.</t>

<t>Other information:</t>

<t><list style="symbols">
  <t>API Reference: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html</t>
  <t>Visibility Timeouts: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html</t>
</list></t>

<t>Apache Kafka</t>

<t>Apache Kafka is an Apache open source project based upon TCP for 
distributed streaming. It prescribes some interesting general 
purpose features that seem to extend far beyond the simpler 
streaming model SECEVENTs is after. A comment from MS has been that 
Kafka does an acknowledge with poll combination event which seems 
to be a performance advantage. See: https://kafka.apache.org/intro</t>

<t>Google Pub/Sub</t>

<t>Google Pub Sub system favours a model whereby polling and acknowledgement
of events is done as separate endpoints as separate functions.</t>

<t>Information:</t>

<t><list style="symbols">
  <t>Cloud Overview - https://cloud.google.com/pubsub/</t>
  <t>Subscriber Overview - https://cloud.google.com/pubsub/docs/subscriber</t>
  <t>Subscriber Pull(poll) - https://cloud.google.com/pubsub/docs/pull</t>
</list></t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>The editors would like to thanks the members of the SCIM WG which 
began discussions of provisioning events starting with: draft-hunt-scim-notify-00 in 2015.</t>

<t>The editors would like to thank the authors of draft-ietf-secevent-delivery-02,
on which this draft is based.</t>

<t>The editor would like to thank the participants in the the SECEVENTS
working group for their support of this specification.</t>

</section>
<section anchor="change-log" title="Change Log">
<t>Draft 00 - AB - Based on draft-ietf-secevent-delivery-02 with the 
following changes:</t>

<t><list style="symbols">
  <t>Renamed to “Push-Based SET Token Delivery Using HTTP”</t>
  <t>Removed references to the HTTP Polling delivery method.</t>
  <t>Removed informative reference to RFC6202.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAOqNhFsAA51c6XbbOJb+j6fAOD86npZk2c5m1+lzyrGdRJl4ieUlcU2d
CkRCEmMuaoK0o6TSZ15jXm+eZO4CgCAtpzKTTqckkQQuLu7y3QXs9/uiSqpU
78rT2sz7L5XRsRwfnsvz4kbn8kCnya0ul/LCJPlMvjk/PxVqMin17a6MSzWt
+omupn2jI32r86o/r6pFfwEjibiIcpXpv7itPxyKWFVw29Zw80V/+Ly/NRQR
/DAryuWuNFUskkW5K6uyNtXWcLgz3BJClVrtymNd3RXljcB/ZmVRL/xP8gr+
QXJf48/iRi/h13hXjvJKl7mu+gdIkhCmUnn8h0qLHOZfaiMWya78rSqinjRF
WZV6auDTMsMPv8O0dTUvyl3RFxL+JLnZlXsD+VJFN5nK6Tde8F6eq4lOU926
VpQzlSdfVZUUOdyTqa8FX9CZStJdWSbRXMGTvyq6NIiKjC6XBW6OjpOqKMOp
jwbyLRBugomPcAidypfhpfa8cEtZmAJWH0ydTT7/mrkLfuK6BG7gRu1ubBid
TvuJMbWOB0k+LTZ+SNrpQL6p8yqg7HSepM1vbZJOShWlOqRnAXcP5nD3r0s1
L4qfYcU4qstKm6gO2aHKpDadS+25XxfFrD13Ztztv87oIs3enmwvNzB0OBNI
i/6qwgvtefYTExWtafiJgaInfo3wencmEK5jFas0aQsXCGG+bF35iS2u4Jlc
xZ1tFnlRZvDYrd6lm0Hvd+XZq/0XTzaf0w+nJ+PRh8EmX8U/1lacz7U8WYB9
IA2TaDXkeKGjZJpERIaRI5QW+dw/6bTHfe/7T3YJqJ8Gxq8rLYupPEx1VIFS
qFSCltqvRZ5ERh7msyTXujR+CG9Ctv1PRpeJNiisu62ZRoeHh7tyXMVyczjc
Hmz26DF5CFKVWI3EP1PiTPvRN+dH77xKLOqJGRTAA7I9A1jARpHDjmi8sLHz
bGdnZ3Pn+c7OxgRNKliQjcvNP0A/F8Mng3mVpY8qNftj+OSPzadC9Pt9qSam
Ak2oxPk8MdKEzJTwOAxs5Ly4k8quDHkE9hS0tFpKsqqwyWCyjRSPYR/NuszU
Uk40PEwmHMx6VcDTC7DdSVGbdClLPUtMRZdKsMx4lxS1N/S4++eywF/P341B
JoFDwOdYKoPjgPXGESsQBff0gJeSJXEMWgXmtiziOqIl4B6ewC23ib6T3x4l
eO27+MdDf36CC2CfVYZcwNXKx0Zr8e3bv8GX79/XZaRyXDtwNDdZUlUrVi+C
5R8S/84cEwIewJCgEM+3tje/f/e8GKACiNXUKZlpkHSaj3hE5N0mquHpQIof
rc+PADJIrjh2TjjJ5d1cVQIevcmLuxx3gkkfEzfMYPXABYyaF5WdgbbMTjFZ
wojgNuwwwo4jwcXau+MeMK24TQyMhF/An6kZfQBlBEMMHwVublTk02RWIzfx
KxBR1BUJaQRagh+qe5QBucdFRR9BzfeLHIkg6/HtEYx3+x3FacUfgfYH3LpE
v27k2tHF+Hytx/+Vxyf0+ezw/cXo7PAAP4/f7L175z8Ie8f4zcnFu4PmU/Pk
/snR0eHxAT8Mv8rWT2LtaO8jXMFlrp2cno9OjvfereHm0AoB+NQZMhN5CEIA
Ypgg8ADRY+URMbiXMpnAF3jm5f6p3Hxi5Wxrc3MH5Iy/vNh8/gS+3M11zpOB
fVnyVwFbuJRqsdCqxEFUmoLIL5JKpQBZQCrMHMVjDsINPH4FcrSoy0Vh2GzA
FsdqkqRkOb6obJFq3nGUkYuzd1LnURGDqxcjvIaLAWMribsLXUa4OL4F7zY4
X2tJY806vzXYhOkEr2Z758Wz799JQMFgzuYoHS1+GVoFyxBMtvcRRapSMJ5Z
qAgpBBboL6DSAs1s/66E9aOeopqES8L76BGZJqD77I8AIsCXVJXpEtFdpsXF
2ehvxs0BhN8lQE7uGdKTc3WrYffAywE3wV3jTTgXjw2ziHBW+GxwHiEOUG8S
J8egRflKOV6lqQqcZgZLBX5nSV6kxWzp1JDlSyNzyeYL1liG6e1RnBkkZmug
OU2LO+RUHFAWaDgbGudLeNwYTCNsaE2YQohvu/KW1v2PteHadze3t66lAGSC
juk2AdaQvYjBVFZgrJz1MmwIQSEKWEbpb7KmTHhT5qywQaAl782ElgUEZAFr
SCapJtqL6RR8IixQCUcDTa1w4YbY1rHwQEY019FNcI1Nn3B2THm3BWFCVQcW
Fx9ZA2MFHiyVp6nK9Rpa9PYMP2CI8zvEDOs6mTnTsshgSiZIhItGOuwoqAig
fvGiSMjnt4foOpoOT8kx8sphu0u8Fq5ePrR6AY5CRaCF5BkbpgU0mntMcTyx
nN1t9tPOlqCzc0KYFiy+vZbsOUeF6naH9gwJWSUWBBLbm6y/YEg10+z3+8KL
uwJLsHTQAcQspIc0kLw36X+bIYAzQcRq8JcgB8RmtxFgL6ok02DV4BNAwDSJ
yEMZDYaNrEYyy0lEYSFgPMvlghfb0P0KyQJkB3wb15PPYEQFI20P8wz/DLpb
1PAYe27VhYFzoK2IaHvjgQTjL6xN64X3urGyZDav0KzDxRoEFm+Cb4Zp4/hB
qDgGnTM8QEem0WVXS7p5dCqbO3N5sgeYX+7DmvIKfhBZAbYSrQ4O0APMDzcB
qIlxhGmiUJvRBM9AokGfgUls9TzJyDoOI2ywA8E5KBLBHlaZQMTQs9j9ZieM
i6ErCg0ICIRBv0YQqMtCQUhaIo5eH0BYpHVoU49BQCAwOQAsTFr+dnxyLHP+
Ud6qtNbN+E5b4PJElxazF3nMui4gQhj2h5vw93w43KW/1/LifF9C8AsRMz5p
TTsQir9joLOBgtaTIE8FGj2RarVwwwK15Fbgr/5nnQA1HBjQUBj6PBz5/GaD
vd8fP7Kf1gOHASDJEj5O8ogx5OGiiOYAhCAMZVHUCv6JIexARYoiENLKepcJ
IY2oArV78ezJcOjo7VlvAIYxF2Qd8yLvI16awa/ETOPAfLBpzaYgstjeRtAE
04CGgzNPcX9nqozJ5TmGGRSlGTjx0kaUyE74aaHKKolqQAaod4C2WxbqtCyq
IgKT9u0RScYfHHb8KHLpGjlPNnsOiLuzOneumnI+OuXIwumzaCI8sunsqltR
XIC220av8UQ+dQdrQMPtl+DCiQfR9RVAzMbIkilB87bK6CMhwBII8tCUA7VW
dZy6OAjA6DBwxRRC3R8Pd5CwT3ivi25CLhEUgt0CaFanMcW5zmvoGIgYCCne
QKAYMJCNAW49PrywXGlHQHyvM0lWeO85UQ5u+sW03w5uMO3QiW+Yl0QqKsUt
iKdysMWz2I38AJOFgn+zRUWAwe6eZwClFyA0WIFy/maCEF/4KDLTKHWJyQDX
/fvqbUBPQDgDfdzGJuB4ygVYO9JBOiEW6VD3C0xw8tCyGmTYXK44OEBYkEzJ
CVTCIoAmgCWbvTKaHOXdNPaKBHZvlVZBcCsRMQq0FbKbBCnBmGpTkbSsRB+o
lA63NaqIvKVB7PNyUsRsHNlpXOmJBfA2zfAUwz+BkQjc8gnhFGbLz5cL/QmC
ORWzC/kEgU9qF73hcup//3xXfeLo0scLTSC2RXL/DP4Lz3tfJi8ARjN+XFS8
Sx1ZBzOOuDfV8Uwbd6e0BFoYrvk7LVSMGSxvDbd67bhwogGLI1HfvmEG7bQw
FXnTvSnyDzAVauO0TuXjYMp4vZUA6bk0RQt2NtE7ewnwe9ZOAnbhCJIixKgo
Y4uzUanxBxx0IE/QoTU6GkzfWxU7UBIBpxLdOAQj/NwjZz+BCOi1FFiaJwju
0mkfHF0CngqF7rEezAaEFmH1IkHLotEkGWI4rS2zPh0GT6aoCZgJ4ZswQ8/a
oVfwiiRcpoqUD/6lZAJwtw+uGvBhzAEIPgvIYpZgUqYxG4S+KY2La4wQLEXO
9lJEAc9j9FE5oUcmY+Iwq6safa570ilrI3y3BIyRMysZjmG28QYPWWv5BSIp
kpYr8c9QsiLYSi+7LRsW8KZnlZ6UwDuLZgBiOixJlyX8yzbJBtgr5QPFEaxo
MFl3MG+HBQVxi6J0wRjNYQJoBJdTFg9LPqAWY6MJxwzEcOSIiE1AGlrCxv6F
Oc1HXgMfgAAuO+GCL46jH7J8uMzGVorHzuw8GWwPtlsZ1PXARwiXD3goJ30H
1jGCqSfAOHlxNgIjgXbPC/g9U2UIzKGFUx0M1o7inOsXj1f5FJePWre7izLH
EUTjLTA7hbpLWiox/7mBosFhHWfIAzPcycf8gLImBYzrDRfivYoLvOImB2Bx
I1hQxAgrvBbbFPEJt93sbmyUi4ENCbEMtMHI55NbMA0Q+h5KroNpt9sKoQP8
72lnY9H+edWn6YGX4keuCkSXVQUxJGw6rldAKAZymjLbaV6f1B+IPUOBqiPk
KcjXVosMNh/6C8AC3AaADjFaJFrDpz1ikHOk6437ukfoZ4h+PyE3GkDjNuIh
LMORRWWzM7xlAeIyRs0oZ8jIqmGS1ecAzzfbCl4VE72Y5y2LRYnFF+lXgWOJ
lRABw+F//etfgsa3mys9khMAi021i3AKnIeTA5AILAjy4LuyywyxF4bdu/Kl
BvRUyvmTF8P4s9nZnscvREhKe4Rw34Vevp1PXkfJSfK2nmw9TUf5UAzw17v4
6q1RH46L6w9vL6PsBu8o4jdnd9HX4vbd9vFndTWsrz/M55MPL831+OnnydYw
ebf/Nru+uhQ3lx/eLqLl6NnVMnhoa1HEV6PuQ7dn2WV6/ebo9uR8fnN8Phoe
fxavso/nl8nH7OjJ8debzZPz4+T4a7R5vD8yo2w+jN+8/HqSvLhV2XzzY/I0
1a9fVdHrL+m77Ph2Mt55fS2uLm+i5YvN64No6+jg/ebR+XVydPX+7uTg4xD+
C8RHW9dXF9ujdGhG+ds02trZjLLj1FEtWmSvXuvt5YfjNMqPbo8PzrLjz4fD
o+wsO4GJrg+uxfzj549frs+jzaPPr25Oxm9jYEwaZ5d1/OrsafT68uvo82Iy
ujken128ujjj63OYcKmu3m7Gr4W9IUtvRsldMsleVddjWHt++RV24+Tj1WaK
v0evX32NtuPbKHuPnE8nV68WkzdHyQcxvkvi7JWJr2ig56Pssvp4lRrakW2T
xG/SOxjw2SjHhw0+vPXx6ssm/ZYtbsRk63Kvu7fTS2TWy3m0fbw92X57M/pc
AGU7w+M3F8tJ9gIH2Yy2Lpfn2StRuZEmWxd4YXG9D98/vx9eA1+OD97eXH++
2fqYvYdZR1tHsBOw71+uD27w3vrjlYD1EdnxApl2zut/NrpZ3KrXT0jKgAew
1pR5AZScvd4B2d3cmb4H8UV1+7YrHy1Atca64jL5P9YOWbkCdT9jk7z2PYQ/
i0pax20t9g9gp3DQh255e3UuOfwG0yEb799xQN50P2/sJYUaK6GT4JlUagrZ
mo0Acs6Vca5WNPhehOFG6PFGDVGUkrPhvcvK0QQPr1esBahpLQwTTD3JAO/i
fJOlteWU8WmCEY5FBMQiSKq1nDr+BI4fHYsj99l9mMKhJMQLAFPCOAJs5ALW
bks+NBODNAZKlLKxNWcibXVMFQQsSR6ldaxdqN34JIoUfeqohe5o5S6UQEiK
NWHH5L+hi2RG2LoFcJ1gvmg4SVeZlQM54tRBhD0cjDgY4jJoCBgpnwyH61R6
dNVEJ3ErSE8I2iVACXZzUaIXqbW4teflmJgEsxFyKmalWgCYsQD4Xv2KgiBM
EPq+FVeuI8oD8RCBYimLh1FJfT4DhcIJhFffWVHECIvP3FI6ejxuxM/jancv
qvRxUdnK0womrXXw/1oLgACzUl2F4hKiC3zQlrSIjZjip8pkA0ldXkuEGprD
qEWOqdRc69hYnSu1LXm2AsVgPsCKLzWMorsxS6+jpD6Q1blBC0ShKNVNvJ3y
vSU28uXI2BIA92dUv8a2ghxhVgB1BAlQs5gmug7iYNN6xKIpZJGwPTGARgwB
dZVi3hgFKoVLnAO28Q3VxN3gNuuKFa+fzfutSEM1fCUJdIlnrhmRfmH+O6m8
kegk1TDCsEbNplvy1kpDvaRK/AMW/1nLsLmE5Apzi5aZsrhO/12IiWF8kJ9Q
rf2Uj4N5gWMerIOGP+jDAqvQtS92brdi4VjlFhh0GXz7Rhed/q0odye8Gqu8
HbtBA7sMju6aByTlpYqdv/4BuCV4LL4JKddgzLXdtbherPXwK1NLZT74mbxy
iqmMpecgGF8s4sCHNSG+ezM0UT+0Ql2WhRbokJbln3wDQp4iK749ajProbif
/LVPhSV54J4bvjab0kqt7wrxpwQC5CXVwP4EG+kZIP4MJvl7a8o/4SlkIvfY
/Qn+iCblDGlBRcqBpJvuqlOQSR3eBHTUOUoqJdURDsEv9KSHRf7hN3HpZnAr
oydsYvVOGasEuDH2mX1yS/DMRc71yYL0AtZc05c6x6QEdodglmQGIVI1z9zT
Rro1jdH+EEbDWTDr4M2ju1n7m5upYk1uEag8dD05VIL25O3VcZtpqo4TLJxy
6czfNzLG3ocZwpIowPTkLE++OhKMrijYx9v2cliZD6MPvSUl8hvptY/d25UG
kuL9SDlWAtFLudq5wi1wrTOeqVwTAUxUoKBXmBwl+8kERKlKMuNnPQBGMHNB
WHVwRzhAUbqt5udAOT2f9/BbypYIxwjXRt7Be9nEaikMgfoJ7ueQM3RWM6ls
SL+gDu45C+r9uzN7FuuRgAoWbZu88b0droKpJtwgZS0VO65AJYQdjfOidEFV
tv5l7jfswCBUq+byNM9JaMo2xzO4EO1CncWBnITxiyZ4HNg2GndegwPvcz8U
yq7+UvGQbmHYQpDYRr84UcBQUwHQC/y78012YXEnn9e1eo65bJyAXbdaEBsS
8xAmtSvpmFeG+3ut7DRtfyvnARZUqR+UfV3116cMg+QPYYyW77qPGoBswaW8
GuNCoh6JiDXCeeMKfDXjSUyr26QjHWJQsIOCn7m/jk7LRASYS1PTHubShIcH
TzEcxFZB3y3Ssvq2DIc9aVib9qn/GmlWWYFIAUOhFcKH1HIXiGyzGUTHdptZ
ZvlaIjcAurJZUEWIeJxOMQHxThPQPffh3NOtJ9h0KIWwGSuqthnhM1iuZZpv
f/b86fD7d5fdpZVR6ATmZOJ7BB3zQXnoaTEtVabp3Imzbtz4sjUYSjfuEwq2
qRPTt5pQ2jPWpW2Yb3oWgo2etMhMctESLSvPdM9+azRCQy+VARW7x/ILykXi
4HhddCSmKair24LyzNbVJbApliqfpJ2qCM9ikKaDRAcCrGzJApD2kiLRJKKz
NCBF2CYDTADE3WkwtbGE5XaLDbSSDqWUH+Xwm+kwg3a7VIfBMA6pyMu98Wi/
R8jlTqepcAl/n6xHfXi2+RwkgXPUrlTnxoOIEQ8N2VQDF1ZsKcD3opMNOFXL
tFBxZwu4FLpu201W3yPwNAToqs5VmRQgoFx984VrOx12RCGbusYmCVPM1uw1
VVcI4ruRDYq8xiMWrp6zSnbQmyJyEGHNp+DTAbz1XetDLZgD6tUBFVvwUtuD
cudOZ6/QILdz/U+ol1iG1qpnO0784n3mvBNmNBBtlYkUziK64uWnq6urfkCk
T6yjSulI4dJbrQWN10TFIIw+rfPI9veF1le4KkkIfZLopg+wpPANEbzNtusJ
5iVAMlkKxyNnI7hNpVqGiT8qAZeUUsH1YNTYFixX0kOHOZArepDdLObebsIv
YqoZxyLhpbbGO09USlGx7Q0EJKKiG1DHgF0ktwLFBzugFPo0Esz1+zkFFPBp
qdnqEPSyvcOEUVyjOiya+urBQdge9yRNazxEQwFe0/CeY8t3y276pndDZ0ls
p+KWCK2thUotx2BbsNsO1cmG67tD2pCwPOYkJwrEkmlvW3Pkx4JaHQlbvinu
tO8BesD8hx2BweEOCGOnpLzIWipwgj2EjUDHd2ERg53TtGENdoXhcr7y9Yfr
wa3eMDZ5beIKqkyCEMBfYLzRnJu1V3H5wqcznVg2TJyVCn52/rPpY2BP6uqA
3pWC0CQrPQeLLrGJ4pViKlZMhI0dmJF0lzAwwYSOM92+0Lnd2Bw/sUu0dTtp
H5t13uXGYWR4QiMWvquiTYqFFo1OYwd0atus6WAC9lKXdYotwU0+xyo7c2YP
GF3yRtI5W5/d36JqaHO2wkpG41GwXbJNDwNvIIT6whiwGbvXis4m8FRUsw/M
o0OiIHOSvNtcpVNMVgNi0On0l3A0lEtEiu42RhPYd/wLDtPDe/ccWFx5M2La
Il9mRU1wxOape4SFIGSthGFOrbt4ghfA7GovmGWzI0rUOFKpGw0RFi6U21hZ
ouYQ4FScwrQhbaaVofMqbRCB3QkPwRDnAqyKB4A20Eo6zub2/EXg+Whj1wey
WZqFQGy0OJoibfSw9MEVynCFwvD5mB+tsic1GR9w6mjRMLkdrBs8FNewUn1L
2tw6EIpwx3GkjVXBBLkrDwZY9wI0bucbB6jr26PV+OKvTFpftJAWAy0PFBpp
sUBnZTeTd0oUM6AulCFcBJypbnry7dW4hRMbQyHoucDMPX+6+dTiz4fZ5hsj
2I1ryhutOu6CgC2o5DXVIgsXKBXQ2MKgj5MOSAjhWkKC6VceaWp52dWh6xsw
yyXlB6jgAN6vabJm01ob4Q4n2Hz+XyF6pyg7DT4cWu5h1EKRCNr4rkACxsTQ
pNss+RywZjgQHWYQYSNnYRvMsITnOj8YO6JJwqTGJ/E4GehBj2wUHt3mIzxg
RDHdsk6VxCLHTXrsyFz7dY2YlyUVtqegexAw8RoC9zVqCPLnInDD3LyuPtB0
mRiuw7BM3ok4MdTAxcvEZWCmHER5zLj4JzY22F9/ZA52BR4jrBVWaVwsGEj/
6WgkbFuj3VdO1JHgwh1Yaerdr0KRCbofqVzYzqakbIWIiguvuKB+qpaY2vBi
4zvtBp18gwzyDTiujRRI0cWmL5ZzGoF2EAMld1eQ0hLdyf2U2ESnyY/hHnuS
whIWwLTAU8HcjAGtZ3DHLpHFsEq4vDEev6NzOKDZEfrkKfth6sLsUdhkMcvm
FmV1fJTNxupHnglXbiOPKR0ygo1eA+4DfABeNTeyVdLyopWQkgfwYa3xVU+5
xbdlR7nh+adlbhXyXOXGPXhkv9SFkFuDoQiB3E/5ROcLxV97/Ad9Naz/0aNH
Msw/3fd/K1M44qD2FU1E1K7twAU+WLymELOdy6KloE9xx9/iRrAGPhEW3kwF
W8WnZfEgXjLV1AVPquzDUNe4Afak1HSSh5Lr/pvFYcBxkkPfiqGCBlV3emxd
2NJz9zQZhIwYni0SDnItQIsceiypzzoiHyWKCZkhBbDvzsKfx5zZrk1NECXJ
b4v0lhrX+22HTf2KGFCDZtY6Dr2fsn0RrVRo4mJETDo4xQRTAMZHsIAxAWDM
QDboxQgt8lqRpaKW95AgQHF8gqCTqyUd5/xJKwBopRWFaOu3cQaqwb3tUA17
AZBCzpphVvEHDpZS1W2ybApBtMTcngvzIyUceaNGYluFsAdnEQlhSjdN8puO
DlLDkaPNh3IdoBXNiyTi/DN1rJOIrVjkD1OBrpMm1lNVp91scvj6hRUj9/gt
SJ0sYscciDCN2OMefmqoCFdMqJGqYyW+UsHmVBARGXzVyeze6l2b0QBLq1RS
JMkJcgJhI9JflgIwAdHqZ3ChiXeP3AvhFz7nFAXLRKvRBL77vmTFRxUMLCvS
LgPi1ox96WVyq6IunH0A+QcF6ZUtLHSOCqLWyid8GGejcgqXxCfGEnV8ZsLn
MylGbZ1p8IeWVx0xseewcDwbB4HF6JxRE6ZoIHbEbQNUk1LlTNv3kLR2bILW
GSN+AvsLh4V5tXhgtJ5wepGYR17QzBXZRz6ny6YuPEUb7gwpuP/qU/UUNN4l
phWmUBcyDQSQBg3SdMoVYASxZvXpG6S6g87In3Qbl1M9w7BpVmoGPcI2Q3Pq
1x6uQB9j32zDfgEPaKYq0ra3A4dTM795Dk7683qlT5vSeyq4kmsCPomH+EQR
dekcbfogHm3WKqxQ4HFmY9eqwPUZV/jk7GhIMsAYEtiwwiYwJqA0B8r5XIHz
4MyjfVcAwUTjGv+sJNDm2GYSbNAS9jI1S4DK7B3v3QcZ+OvKAJt4i81eFDBI
evpePh5px5MY4oTSDSzuFIO3oqq/qJCK//ztP387PBidn5yNMXo63LUpaOvd
nHZnBW4diE5R8ot0Jq7h5vffu20+cHED1t6TEJrV1FxoPHH2gDgfj8JTJvqO
DmwYv9HSFGltvR2dIUnyRe0jT/eSBEqu7Qrx4ej01J4UZTKuXocKhI/QLdoe
JsX4l0xMkO+3lsgV0QTHbUStJYW8mqv/k0ekM9Sgs0B2mrqDP/R6oQzbcAbM
Eq3p2p31tQatU9Pmxq8TATEjCukmxADYdIdldjqQHq45gt+JbHsWmXMG+4eX
h8fnxp1jrtzx2Sn4P0OnrIWrX3NNyKmydyr3HBGGCPTSO3xHC1ZPjouqMdJj
fl6IH1zscTODlQTZcHTBb6Dig21i72oMOOV47ACSIXBaJppRdahf2Da4y4cm
8J9x+KIHHEe+U9kkVr7Qg7kxfFWCewEC5pKBw9yxUaIRw7Sg/lKtQ4A2x9Om
gt8JAPdhoWZ8NLa5ZRx8/H7cFPZRrDU26laU7M//57/+G9/PYmG3cNHook5T
gN91FXoMMocz7RpSAaegvKSE0jG0sbldgRPSPPzODzsAR61OF6pikUQDGTa5
otuv7cF2QNN8hoemcVTR4a0id07PU9aTn2tD72JIKm4140G8TKe0YFtPiVKt
7NtTkHV3/IoBPO9NPJhoPoqGJ+VoFPJuv8gUfW6J7/tZAKmcrcaWiludFugT
3CvS5mC8STfxDS8ujSLwDjyLRrC24JwKstO5t6Sk+ykWo7YWJ+CzWlGVATeN
FJOKxdjXg+w5GR3s+4gGCaAFou11PT+qovodXpviQxgb4B4Cp0p8W8cAnBD2
CqT0oo0R7kN+AyaOqENO5fSGI36Xhi8+iOaFAAUYU1TqpjAK8gB6QUd2Cc1a
C+KXZKsRRjKAQHGhl+64s2WXiQ9Pz/k1KD3AqCruv+OteU8yvA57CtILmohr
NvVsBqEAVzNh0Dtr6/A1UGxujH0hSKv0xTLOb8CaYfYJW8ZirfAZ6oS3JUp0
+wUaDNovTmaAhZrWKdgbdmKB/6eax97pCFhrc2z+TX+A7M1A3cH//Zs5N0BJ
2RzRwqwV2sA0o6k2YBg/ysaVTuEBTe/8gynuM8r8/yeCbThwwvy6BiZsmH+a
/q2fom9fScOTi70F4hP5H2p6o9rfbKus/QnfaigtfAcDShAraO043z/lE9TB
Gxcal0tqi3U+WxJHSfSFWtxr1wotXH+83y+SAgP4EFURTCWYXPJPE70sXNGN
eIG5Pe/i2aA1jgmXMqUm9j3JaStr/o/GTUcfl5J57fR6PIy9g9PCFFair7Xd
KOxtGNGxv0M6DanmRPMrc0iW6Ch5jPUPsCEUufP24rHLG5xuoIjJ9MJIegui
EPwWUnkK3mtcT8LvEr5bDAOcuIUtodcD0ord25BCRNBp18c41yIROtiaU3LY
aPD3CMmb5Gf4q/do1MjeVpD9tKiD9zj2/dIivDBo3phKr8eE9cAz48ar/h8e
RF3YaNxFe5xT8DCPcd3rPzsS+iQQec8eDkG64BRtNb9eFswgtUGlyY3Nwan8
hm1iptltO0S0PzpCFMhSASHnDEQJNAPQkHE5FP8CReqe5g0B984ZGhQ195Zk
fOktxOJJ1ufjmf3hEE3f1nDzqY2AfkBeUGKmWVe9eNkZ9P5wqyeoBs0vU0lc
/dh1cbWme3A2fnlOslAkYrmtkjYwcUxvZyatpxfF2gRDUnp88NARin1+c9e7
YhbskqAXN0tgSl/uvYR/XrqXn/zFWlmfyQs2cQNnRw0J9pnGGg0F52s/+yLs
NXqOIxVfmTEOLXH/ldXNTn/WIHjS+6BbHdR3YBBM8G0NtwbifwH/4N+ApFsA
AA==

-->

</rfc>

