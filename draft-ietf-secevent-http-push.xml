<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-secevent-http-push-00" category="std">

  <front>
    <title abbrev="draft-ietf-secevent-http-push">Push-Based SET Token Delivery Using HTTP</title>

    <author initials="A." surname="Backman" fullname="Annabelle Backman" role="editor">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones" role="editor">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt" role="editor">
      <organization>Oracle</organization>
      <address>
        <email>phil.hunt@yahoo.com</email>
      </address>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization>Cisco</organization>
      <address>
        <email>morteza.ansari@cisco.com</email>
      </address>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization>Microsoft</organization>
      <address>
        <email>tonynad@microsoft.com</email>
      </address>
    </author>

    <date year="2018" month="July" day="20"/>

    <area>Network</area>
    <workgroup>Network Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines how a series of security event tokens 
(SETs) may be delivered to a previously registered receiver 
using HTTP POST over TLS initiated as a push to the receiver.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction and Overview">
<t>This specification defines how SETs (see
<xref target="SET"/>) can be transmitted to a previously 
registered Event Receiver using HTTP <xref target="RFC7231"/> over TLS. The
specification defines a method to push SETs via HTTP POST.</t>

<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
they appear in all capitals, as shown here.</t>

<t>For purposes of readability examples are not URL encoded.
Implementers MUST percent encode URLs as described in Section 2.1 of
<xref target="RFC3986"/>.</t>

<t>Throughout this documents all figures MAY contain spaces and extra
line-wrapping for readability and space limitations. Similarly, some
URI’s contained within examples, have been shortened for space and
readability reasons.</t>

</section>
<section anchor="defn" title="Definitions">
<t>This specification assumes terminology defined in the Security
Event Token specification <xref target="SET"/>, as well as the terms defined below:</t>

<t><list style="hanging">
  <t hangText='Event Transmitter'><vspace blankLines='0'/>
  A service provider that delivers SETs to other providers known
as Event Receivers.</t>
  <t hangText='Event Receiver'><vspace blankLines='0'/>
  A service provider that registers to receive SETs from an Event
Transmitter and provides an endpoint to receive SETs via HTTP POST.</t>
</list></t>

</section>
</section>
<section anchor="event_delivery" title="Event Delivery">

<section anchor="event_delivery_process" title="Event Delivery Process">
<t>When an Event occurs, the Event Transmitter constructs a SET
token <xref target="SET"/> that describes the Event.</t>

<t>How SETs are defined and the process by which Events are identified for 
Event Receivers is out-of-scope of this    specification.</t>

<t>When a SET is available for an Event Receiver, the Event Transmitter
attempts to deliver the SET based on the Event Receiver’s registered
delivery mechanism:</t>

<t><list style="symbols">
  <t>The Event Transmitter uses an HTTP/1.1 POST to the Event Receiver
endpoint to deliver the SET;</t>
  <t>Or, the Event Transmitter delivers the Event through a different
method not defined by this specification.</t>
</list></t>

<t>In Push-Based SET Delivery Using HTTP, SETs are delivered one at a
time using HTTP POST requests by an Event Transmitter to an Event
Receiver. The HTTP request body is a JSON Web Token <xref target="RFC7519"/>
with a <spanx style="verb">Content-Type</spanx> header of <spanx style="verb">application/secevent+jwt</spanx> as
defined in Section 2.2 and 6.2 of <xref target="SET"/>. Upon receipt, the 
Event Receiver acknowledges receipt with a response with HTTP 
Status 202, as described below in <xref target="httpPost"/>.</t>

<t>After successful (acknowledged) SET delivery, Event 
Transmitters SHOULD NOT be required to maintain or record SETs for 
recovery. Once a SET is acknowledged, the Event Receiver SHALL be 
responsible for retention and recovery.</t>

<t>Transmitted SETs SHOULD be self-validating (e.g. signed)
if there is a requirement to verify they were issued by the Event 
Transmitter at a later date when de-coupled from the original 
delivery where authenticity could be checked via the HTTP or 
TLS mutual authentication.</t>

<t>Upon receiving a SET, the Event Receiver reads the SET and validates 
it. The Event Receiver MUST acknowledge receipt to the Event Transmitter, using the 
defined acknowledgement or error method.</t>

<t>The Event Receiver SHALL NOT use the Event acknowledgement mechanism
to report Event errors other than relating to the parsing and validation
of the SET.</t>

</section>
<section anchor="httpPost" title="Push Delivery using HTTP">
<t>This method allows an Event Transmitter to use HTTP POST 
(Section 4.3.3 <xref target="RFC7231"/>) to deliver
SETs to a previously registered web callback URI supplied by the
Event Receiver as part of a configuration process 
(not defined by this document).</t>

<t>The SET to be delivered MAY be signed 
and/or encrypted as defined in <xref target="SET"/>.</t>

<t>The HTTP Content-Type (see 
Section 3.1.1.5 <xref target="RFC7231"/>) for the HTTP POST is 
<spanx style="verb">application/secevent+jwt</spanx> and SHALL consist of 
a single SET (see <xref target="SET"/>).
As per Section 5.3.2 <xref target="RFC7231"/>, the expected 
media type (<spanx style="verb">Accept</spanx> header) response is 
<spanx style="verb">application/json</spanx>.</t>

<t>To deliver an Event, the Event Transmitter generates an event 
delivery message and uses HTTP POST to the configured endpoint with
the appropriate <spanx style="verb">Accept</spanx> and 
<spanx style="verb">Content-Type</spanx> headers.</t>

<figure title="Example HTTP POST Request" anchor="postSet"><artwork><![CDATA[
POST /Events  HTTP/1.1

Host: notify.examplerp.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Type: application/secevent+jwt
eyJhbGciOiJub25lIn0
.
eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
.
]]></artwork></figure>

<t>Upon receipt of the request, the Event Receiver SHALL 
validate the JWT structure of the SET as defined in 
Section 7.2 <xref target="RFC7519"/>. The Event Receiver 
SHALL also validate the SET information as described
in Section 2 <xref target="SET"/>.</t>

<t>If the SET is determined to be valid, the Event Receiver SHALL
“acknowledge” successful submission by responding with HTTP Status
202 as <spanx style="verb">Accepted</spanx> 
(see Section 6.3.3 <xref target="RFC7231"/>).</t>

<t>In order
to maintain compatibility with other methods of transmission, the 
Event Receiver SHOULD NOT include an HTTP response body representation
of the submitted SET or what the SET’s pending status is when 
acknowledging success. In the case of an error (e.g. HTTP Status 400),
the purpose of the HTTP response body is to indicate any SET parsing, 
validation, or cryptographic errors.</t>

<t>The following is a non-normative example of a successful
receipt of a SET.</t>

<figure title="Example Successful Delivery Response" anchor="goodPostResponse"><artwork><![CDATA[
HTTP/1.1 202 Accepted
]]></artwork></figure>

<t>Note that the purpose of the “acknowledgement” response is to let the 
Event Transmitter know that a SET has been delivered and the 
information no longer needs to be retained by the Event Transmitter. 
Before acknowledgement, Event Receivers SHOULD ensure they have 
validated received SETs and retained them in a manner appropriate 
to information retention requirements appropriate to the SET 
event types signaled. The level and method of retention of SETs
by Event Receivers is out-of-scope of this specification.</t>

<t>In the Event of a general HTTP error condition, the Event Receiver
MAY respond with an appropriate HTTP Status code as defined in 
Section 6 <xref target="RFC7231"/>.</t>

<t>When the Event Receiver detects an error parsing or 
validating a received SET (as defined by <xref target="SET"/>), 
the Event Receiver SHALL indicate an HTTP Status 400 error with an 
error code as described in <xref target="errorResponse"/>.</t>

<t>The following is an example non-normative error 
response.</t>

<figure title="Example HTTP Status 400 Response" anchor="badPostResponse"><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "err":"dup",
  "description":"SET already received. Ignored."

}
]]></artwork></figure>

</section>
<section anchor="errorResponse" title="Error Response Handling">

<t>If a SET is invalid, the following error codes are defined:</t>

<texttable title="SET Errors" anchor="reqErrors">
      <ttcol align='left'>Err Value</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>json</c>
      <c>Invalid JSON object.</c>
      <c>jwtParse</c>
      <c>Invalid or unparsable JWT or JSON structure.</c>
      <c>jwtHdr</c>
      <c>In invalid JWT header was detected.</c>
      <c>jwtCrypto</c>
      <c>Unable to parse due to unsupported algorithm.</c>
      <c>jws</c>
      <c>Signature was not validated.</c>
      <c>jwe</c>
      <c>Unable to decrypt JWE encoded data.</c>
      <c>jwtAud</c>
      <c>Invalid audience value.</c>
      <c>jwtIss</c>
      <c>Issuer not recognized.</c>
      <c>setType</c>
      <c>An unexpected Event type was received.</c>
      <c>setParse</c>
      <c>Invalid structure was encountered such as an inability to parse or an incomplete set of Event claims.</c>
      <c>setData</c>
      <c>SET event claims incomplete or invalid.</c>
      <c>dup</c>
      <c>A duplicate SET was received and has been ignored.</c>
</texttable>

<t>An error response SHALL include a JSON
object which provides details about the error. The JSON object
includes the JSON attributes:</t>

<t><list style="hanging">
  <t hangText='err'><vspace blankLines='0'/>
  A value which is a keyword that 
describes the error (see <xref target="reqErrors"/>).
description</t>
  <t>A human-readable text that provides
additional diagnostic information.</t>
</list></t>

<t>When included as part of an HTTP Status 400 response, the above
JSON is the HTTP response body (see <xref target="badPostResponse"/>).</t>

</section>
</section>
<section anchor="aa" title="Authentication and Authorization">

<t>The SET delivery method described in this specification is
based upon HTTP and depends on the use of TLS and/or standard 
HTTP authentication and authorization schemes as per 
<xref target="RFC7235"/>. For example, the following
methodologies could be used among others:</t>

<t><list style="hanging">
  <t hangText='TLS Client Authentication'><vspace blankLines='0'/>
  Event delivery
endpoints MAY request TLS mutual client authentication. 
See Section 7.3 <xref target="RFC5246"/>.</t>
  <t hangText='Bearer Tokens'><vspace blankLines='0'/>
  Bearer tokens 
<xref target="RFC6750"/> MAY be used when combined with TLS and a token
framework such as OAuth 2.0 <xref target="RFC6749"/>. 
For security considerations regarding the use of bearer tokens in
SET delivery see <xref target="bearerConsiderations"/>.</t>
  <t hangText='Basic Authentication'><vspace blankLines='0'/>
  Usage of basic
authentication should be avoided due to its use of a single factor
that is based upon a relatively static, symmetric secret.
Implementers SHOULD combine the use of basic authentication with
other factors. The security considerations of HTTP BASIC, are well
documented in <xref target="RFC7617"/> and SHOULD be considered
along with using signed SETs (see SET Payload Authentication below).</t>
  <t hangText='SET Payload Authentication'><vspace blankLines='0'/>
  In scenarios 
where SETs are signed and
the delivery method is HTTP POST (see <xref target="httpPost"/>),
Event Receivers MAY elect to use Basic Authentication or not 
to use HTTP or TLS based authentication at all. See 
<xref target="payloadAuthentication"/> for considerations.</t>
</list></t>

<t>As per Section 4.1 of <xref target="RFC7235"/>, a SET
delivery endpoint SHALL indicate supported HTTP authentication 
schemes via the <spanx style="verb">WWW-Authenticate</spanx> header.</t>

<t>Because SET Delivery describes a simple function, authorization
for the ability to pick-up or deliver SETs can be derived by
considering the identity of the SET issuer, or via an authentication
method above. This specification considers authentication as a
feature to prevent denial-of-service attacks. Because SETs are
not commands (see ), Event Receivers are free to ignore SETs that 
are not of interest.</t>

<t>For illustrative purposes only, SET delivery examples show an OAuth2
bearer token value <xref target="RFC6750"/> in the authorization header.
This is not intended to imply that bearer tokens are
preferred. However, the use of bearer tokens in the specification does
reflect common practice.</t>

<section anchor="authzTokens" title="Use of Tokens as Authorizations">
<t>When using bearer tokens or proof-of-possession tokens that
represent an authorization grant such as issued by OAuth (see <xref target="RFC6749"/>), implementers SHOULD consider the type of
authorization granted, any authorized scopes (see Section 3.3 of <xref target="RFC6749"/>), and the security subject(s) that SHOULD be mapped
from the authorization when considering local access control rules.
Section 6 of the OAuth Assertions draft <xref target="RFC7521"/>, documents common scenarios for
authorization including:</t>

<t><list style="symbols">
  <t>Clients using an assertion to authenticate and/or act on behalf
of itself;</t>
  <t>Clients acting on behalf of a user; and,</t>
  <t>A Client acting on behalf of an anonymous user (e.g., see next
section).</t>
</list></t>

<t>When using OAuth authorization tokens, implementers MUST take
into account the threats and countermeasures documented in the
security considerations for the use of client authorizations (see
Section 8 of <xref target="RFC7521"/>). When using
other token formats or frameworks, implementers MUST take into account
similar threats and countermeasures, especially those documented by
the relevant specifications.</t>

</section>
</section>
<section anchor="Security" title="Security Considerations">

<section anchor="payloadAuthentication" title="Authentication Using Signed SETs">
<t>In scenarios where HTTP authorization or TLS mutual authentication
are not used or are considered weak, JWS signed SETs SHOULD be 
used (see <xref target="RFC7515"/> and 
Security Considerations <xref target="SET"/>). This enables the Event Receiver
to validate that the SET issuer is authorized to deliver SETs.</t>

</section>
<section anchor="http-considerations" title="HTTP Considerations">
<t>SET delivery depends on the use of Hypertext Transfer Protocol and thus
subject to the security considerations of HTTP Section 9 <xref target="RFC7230"/> and its related specifications.</t>

<t>As stated in Section 2.7.1 <xref target="RFC7230"/>, an 
HTTP requestor MUST NOT generate the <spanx style="verb">userinfo</spanx>
(i.e., username and password) component (and its “@” delimiter) when
an “http” URI reference is generated with a message as they are now
disallowed in HTTP.</t>

</section>
<section anchor="tls-support-considerations" title="TLS Support Considerations">
<t>SETs contain sensitive information that is considered PII
(e.g. subject claims). Therefore, Event Transmitters and
Event Receivers MUST require the use of a transport-layer 
security mechanism. Event delivery endpoints MUST support TLS 
1.2 <xref target="RFC5246"/> and MAY support additional 
transport-layer mechanisms meeting its security requirements. 
When using TLS, the client MUST perform a TLS/SSL server
certificate check, per <xref target="RFC6125"/>. Implementation
security considerations for TLS can be found in “Recommendations for
Secure Use of TLS and DTLS” <xref target="RFC7525"/>.</t>

</section>
<section anchor="authorization-token-considerations" title="Authorization Token Considerations">
<t>When using authorization tokens such as those issued by OAuth 2.0
<xref target="RFC6749"/>, implementers MUST take into account threats
and countermeasures documented in Section 8 of <xref target="RFC7521"/>.</t>

<section anchor="bearerConsiderations" title="Bearer Token Considerations">
<t>Due to the possibility of interception, Bearer tokens MUST be 
exchanged using TLS.</t>

<t>Bearer tokens MUST have a limited lifetime that can be determined
directly or indirectly (e.g., by checking with a validation service)
by the service provider. By expiring tokens, clients are forced to
obtain a new token (which usually involves re-authentication) for
continued authorized access. For example, in OAuth2, a client MAY use
OAuth token refresh to obtain a new bearer token after authenticating
to an authorization server. See Section 6 of <xref target="RFC6749"/>.</t>

<t>Implementations supporting OAuth bearer tokens need to factor in
security considerations of this authorization method 
<xref target="RFC7521"/>. Since security is only as good
as the weakest link, implementers also need to consider authentication
choices coupled with OAuth bearer tokens. The security considerations
of the default authentication method for OAuth bearer tokens, HTTP
BASIC, are well documented in 
<xref target="RFC7617"/>, therefore implementers
are encouraged to prefer stronger authentication methods. Designating
the specific methods of authentication and authorization are
out-of-scope for the delivery of SET tokens, however this 
information is provided as a resource to implementers.</t>

</section>
</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>If a SET needs to be retained for audit purposes, JWS MAY 
be used to provide verification of its authenticity.</t>

<t>When sharing personally identifiable information or information
that is otherwise considered confidential to affected users, Event 
Transmitters and Receivers MUST have the appropriate legal agreements
and user consent or terms of service in place.</t>

<t>The propagation of subject identifiers can be perceived as personally
identifiable information. Where possible, Event Transmitters and Receivers
SHOULD devise approaches that prevent propagation — for example, the
passing of a hash value that requires the subscriber to already know
the subject.</t>

</section>
<section anchor="IANA" title="IANA Considerations">

<t>There are no IANA considerations.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="SET" target='https://www.rfc-editor.org/info/rfc8417'>
<front>
<title>Security Event Token (SET)</title>
<author initials='P.' surname='Hunt' fullname='P. Hunt' role='editor'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='W.' surname='Denniss' fullname='W. Denniss'><organization /></author>
<author initials='M.' surname='Ansari' fullname='M. Ansari'><organization /></author>
<date year='2018' month='July' />
<abstract><t>This specification defines the Security Event Token (SET) data structure.  A SET describes statements of fact from the perspective of an issuer about a subject.  These statements of fact represent an event that occurred directly to or about a security subject, for example, a statement about the issuance or revocation of a token on behalf of a subject.  This specification is intended to enable representing security- and identity-related events.  A SET is a JSON Web Token (JWT), which can be optionally signed and/or encrypted. SETs can be distributed via protocols such as HTTP.</t></abstract>
</front>
<seriesInfo name='RFC' value='8417'/>
<seriesInfo name='DOI' value='10.17487/RFC8417'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC7235" target='https://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC6750" target='https://www.rfc-editor.org/info/rfc6750'>
<front>
<title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='D.' surname='Hardt' fullname='D. Hardt'><organization /></author>
<date year='2012' month='October' />
<abstract><t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a &quot;bearer&quot;) can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6750'/>
<seriesInfo name='DOI' value='10.17487/RFC6750'/>
</reference>



<reference  anchor="RFC6749" target='https://www.rfc-editor.org/info/rfc6749'>
<front>
<title>The OAuth 2.0 Authorization Framework</title>
<author initials='D.' surname='Hardt' fullname='D. Hardt' role='editor'><organization /></author>
<date year='2012' month='October' />
<abstract><t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6749'/>
<seriesInfo name='DOI' value='10.17487/RFC6749'/>
</reference>



<reference  anchor="RFC7617" target='https://www.rfc-editor.org/info/rfc7617'>
<front>
<title>The 'Basic' HTTP Authentication Scheme</title>
<author initials='J.' surname='Reschke' fullname='J. Reschke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This document defines the &quot;Basic&quot; Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t></abstract>
</front>
<seriesInfo name='RFC' value='7617'/>
<seriesInfo name='DOI' value='10.17487/RFC7617'/>
</reference>



<reference  anchor="RFC7521" target='https://www.rfc-editor.org/info/rfc7521'>
<front>
<title>Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants</title>
<author initials='B.' surname='Campbell' fullname='B. Campbell'><organization /></author>
<author initials='C.' surname='Mortimore' fullname='C. Mortimore'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='Y.' surname='Goland' fullname='Y. Goland'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification provides a framework for the use of assertions with OAuth 2.0 in the form of a new client authentication mechanism and a new authorization grant type.  Mechanisms are specified for transporting assertions during interactions with a token endpoint; general processing rules are also specified.</t><t>The intent of this specification is to provide a common framework for OAuth 2.0 to interwork with other identity systems using assertions and to provide alternative client authentication mechanisms.</t><t>Note that this specification only defines abstract message flows and processing rules.  In order to be implementable, companion specifications are necessary to provide the corresponding concrete instantiations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7521'/>
<seriesInfo name='DOI' value='10.17487/RFC7521'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6125" target='https://www.rfc-editor.org/info/rfc6125'>
<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<author initials='J.' surname='Hodges' fullname='J. Hodges'><organization /></author>
<date year='2011' month='March' />
<abstract><t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6125'/>
<seriesInfo name='DOI' value='10.17487/RFC6125'/>
</reference>



<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>




    </references>



<section anchor="other-streaming-specifications" title="Other Streaming Specifications">
<t>[[EDITORS NOTE: This section to be removed prior to publication]]</t>

<t>The following pub/sub, queuing, streaming systems were reviewed 
as possible solutions or as input to the current draft:</t>

<t>XMPP Events</t>

<t>The WG considered the XMPP events ands its ability to provide a single
messaging solution without the need for both polling and push modes.
The feeling was the size and methodology of XMPP was to far apart from
the current capabilities of the SECEVENTs community which focuses in
on HTTP based service delivery and authorization.</t>

<t>Amazon Simple Notification Service</t>

<t>Simple Notification Service, is a pub/sub messaging product from 
AWS. SNS supports a variety of subscriber types: HTTP/HTTPS endpoints, 
AWS Lambda functions, email addresses (as JSON or plain text), phone 
numbers (via SMS), and AWS SQS standard queues. It doesn’t directly 
support pull, but subscribers can get the pull model by creating an 
SQS queue and subscribing it to the topic. Note that this puts the 
cost of pull support back onto the subscriber, just as it is in the 
push model. It is not clear that one way is strictly better than the 
other; larger, sophisticated developers may be happy to own message 
persistence so they can have their own internal delivery guarantees. 
The long tail of OIDC clients may not care about that, or may fail 
to get it right. Regardless, I think we can learn something from the 
Delivery Policies supported by SNS, as well as the delivery controls 
that SQS offers (e.g. Visibility Timeout, Dead-Letter Queues). I’m 
not suggesting that we need all of these things in the spec, but 
they give an idea of what features people have found useful.</t>

<t>Other information:</t>

<t><list style="symbols">
  <t>API Reference: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html</t>
  <t>Visibility Timeouts: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html</t>
</list></t>

<t>Apache Kafka</t>

<t>Apache Kafka is an Apache open source project based upon TCP for 
distributed streaming. It prescribes some interesting general 
purpose features that seem to extend far beyond the simpler 
streaming model SECEVENTs is after. A comment from MS has been that 
Kafka does an acknowledge with poll combination event which seems 
to be a performance advantage. See: https://kafka.apache.org/intro</t>

<t>Google Pub/Sub</t>

<t>Google Pub Sub system favours a model whereby polling and acknowledgement
of events is done as separate endpoints as separate functions.</t>

<t>Information:</t>

<t><list style="symbols">
  <t>Cloud Overview - https://cloud.google.com/pubsub/</t>
  <t>Subscriber Overview - https://cloud.google.com/pubsub/docs/subscriber</t>
  <t>Subscriber Pull(poll) - https://cloud.google.com/pubsub/docs/pull</t>
</list></t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>The editors would like to thanks the members of the SCIM WG which 
began discussions of provisioning events starting with: draft-hunt-scim-notify-00 in 2015.</t>

<t>The editors would like to thank the authors of draft-ietf-secevent-delivery-02,
on which this draft is based.</t>

<t>The editor would like to thank the participants in the the SECEVENTS
working group for their support of this specification.</t>

</section>
<section anchor="change-log" title="Change Log">
<t>Draft 00 - AB - Based on draft-ietf-secevent-delivery-02 with the 
following changes:</t>

<t><list style="symbols">
  <t>Renamed to “Push-Based SET Token Delivery Using HTTP”</t>
  <t>Removed references to the HTTP Polling delivery method.</t>
  <t>Removed informative reference to RFC6202.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIACWQhFsAA51c6XIbu5X+j6fAyD9iTUSKonfdStWVJdmiYy0WtdhKUjHY
DZIt9cI0uknTvk7Na8zrzZPMWQA0mqJsz7gSX5PdWM7BWb6zgJ1OR1RJlepd
eVabaee1MjqWw8MLeVHc6Vwe6DSZ63IpL02ST+TRxcWZUKNRqee7Mi7VuOok
uhp3jI70XOdVZ1pVs84MZhJxEeUq0z95rdPriVhV8Fq/t/Oy03vR6fdEBF9M
inK5K00Vi2RW7sqqrE3V7/Ve9fpCqFKrXXmiq0VR3gn8a1IW9cx/Ja/hL9zu
W/xa3OklfBvvykFe6TLXVecAtySEqVQe/1OlRQ7rL7URs2RX/q0qoi1pirIq
9djAv5YZ/uMfsGxdTYtyV3SEhD9JbnblXle+VtFdpnL6jgney3M10mmqW8+K
cqLy5KuqkiKHdzL1teAHOlNJuivLJJoqGPm7okfdqMjocVng4eg4qYoyXPq4
K9/Bxk2w8DFOoVP5OnzUXhdeKQtTAPXB0tno9vfMPfAL1yVwAw9qd3vb6HTc
SYypddxN8nGx/cOtnXXlUZ1Xwc7OpknafNfe0mmpolSH+5nB290pvP37Uk2L
4ldYMYzqstImqkN2qDKpzcqj9tpvi2LSXjsz7vXfJ/SQVm8vtpcbmDpcCaRF
f1Xhg/Y6+4mJitYyPKKraMTvET5fXQmE60TFKk3awgVCmC9bT37hiCsYk6t4
5ZhFXpQZDJvrXXoZ9H5Xnr/Zf/l054UQnU5HqpGp4HwqcTFNjDQzHSXjJKKV
ZKzHCUiZnBYLqaTRZQIfijH8C1iYVEtJug5LgyExUjyG2c2mzNRSjjQMJsMC
xqYqYPQMLEpS1CZdylJPElPRoxLsBb4lRe3Njzw7HV7IAr+9eD8ETiVVAvYi
lsrgPGBTcMZqqv3oLpOSJXEMZw1GoCziOiISQP/lKbwyT/RCfnuU4LPv4i8P
/fkZF5BC+dhoLb59+w/48P37poxUjvQCF3OTJVW1hmIRkHxIPDt3hAd0w5Rw
NC/6T3a+f/f0d+XFVIv1O1Iy0yAstB7xhbY3T1TDx64U4qSoaJxK5X6R4/Lw
wQA3Ivj0HVm35g9wQkswrBItq5Ebx5fDi40t/q88OaV/nx9+uBycHx7gv4dH
e+/f+38I+8bw6PTy/UHzr2bk/unx8eHJAQ+Gb2XrK7FxvPcJnuDxbZyeXQxO
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
1++K/wXT6hbJ+1AAAA==

-->

</rfc>

