<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-secevent-http-push-01" category="std">

  <front>
    <title abbrev="draft-ietf-secevent-http-push">Push-Based SET Token Delivery Using HTTP</title>

    <author initials="A." surname="Backman" fullname="Annabelle Backman" role="editor">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt">
      <organization>Oracle</organization>
      <address>
        <email>phil.hunt@yahoo.com</email>
      </address>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization>Cisco</organization>
      <address>
        <email>morteza.ansari@cisco.com</email>
      </address>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization>Microsoft</organization>
      <address>
        <email>tonynad@microsoft.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="23"/>

    <area>Security</area>
    <workgroup>Security Events Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines how a series of security event tokens 
(SETs) may be delivered to a previously registered receiver 
using HTTP POST over TLS initiated as a push to the receiver.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction and Overview">
<t>This specification defines how a stream of SETs <xref target="SET"/> can be
transmitted to a previously registered Event Receiver using <xref target="HTTP"/>
over TLS.  The specification defines a method to push SETs via HTTP
POST.</t>

<t>This specification defines a method for SET delivery in what
is known as Event Streams.</t>

<t>This specification does not define the method by which Event 
Streams are defined, provisioned, managed, monitored,
and configured and is out of scope of this specification.</t>

<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
they appear in all capitals, as shown here.</t>

<t>For purposes of readability examples are not URL encoded.
Implementers MUST percent encode URLs as described in Section 2.1 of
<xref target="RFC3986"/>.</t>

<t>Throughout this documents all figures MAY contain spaces and extra
line-wrapping for readability and space limitations. Similarly, some
URI’s contained within examples, have been shortened for space and
readability reasons.</t>

</section>
<section anchor="defn" title="Definitions">
<t>This specification assumes terminology defined in the Security
Event Token specification <xref target="SET"/>.</t>

<t>The following definitions are defined for Security Event distribution:</t>

<t><list style="hanging">
  <t hangText='Event Transmitter'><vspace blankLines='0'/>
  A service provider that delivers SETs to other providers known
as Event Receivers. An Event Transmitter is responsible for offering a
service that allows the Event Receiver to check the Event Stream
configuration and status known as the “Control Plane”.</t>
  <t hangText='Event Receiver'><vspace blankLines='0'/>
  A service provider that registers to receive SETs from an Event
Transmitter and provides an endpoint to receive SETs via HTTP POST. 
Event Receivers can check current Event Stream configuration and status
by accessing the Event Transmitters “Control Plane”.</t>
  <t hangText='Event Stream'><vspace blankLines='0'/>
  An Event Stream is a defined location, distribution method and
whereby an Event Transmitter and Event Receiver exchange a pre-
defined family of SETs. A Stream is assumed to have configuration data
such as HTTP endpoints, timeouts, public key sets for signing and
encryption, and Event Families.</t>
  <t hangText='Subject'><vspace blankLines='0'/>
  The security subject around which a security event has occurred. For
example, a security subject might per a user, a person, an email
address, a service provider entity, an IP address, an OAuth Client, a
mobile device, or any identifiable thing referenced in security and
authorization systems.</t>
  <t hangText='Event'><vspace blankLines='0'/>
  An Event is defined to be an event as represented by a security event
token (SET).  See <xref target="SET"/>.</t>
  <t hangText='NumericDate'><vspace blankLines='0'/>
  A JSON numeric value representing the number of seconds from
1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring
leap seconds.  This is equivalent to the IEEE Std 1003.1, 2013 Edition
<xref target="POSIX.1"></xref> definition “Seconds Since the Epoch”, in
which each day is accounted for by exactly 86400 seconds, other than
that non-integer values can be represented.  See <xref target="RFC3339"/> for
details regarding date/times in general and UTC in particular.</t>
</list></t>

</section>
</section>
<section anchor="event_stream" title="SET Event Stream Protocol">
<t>An Event Stream represents the communication channel over which a 
series of SETs are delivered to a configured Event Receiver.</t>

<section anchor="event_delivery" title="Event Delivery Process">
<t>When an Event occurs, the Event Transmitter constructs a SET
token <xref target="SET"/> that describes the Event. The Event Transmitter
determines the Event Streams over which the SET should be distributed
to.</t>

<t>How SETs are defined and the process by which Events are identified for 
Event Receivers is out-of-scope of this    specification.</t>

<t>When a SET is available for an Event Receiver, the Event Transmitter
attempts to deliver the SET based on the Event Receiver’s registered
delivery mechanism:</t>

<t><list style="symbols">
  <t>The Event Transmitter uses an HTTP/1.1 POST to the Event Receiver
endpoint to deliver the SET;</t>
  <t>Or, the Event Transmitter delivers the Event through a different
method not defined by this specification.</t>
</list></t>

<t>In Push-Based SET Delivery Using HTTP, SETs are delivered one at a
time using HTTP POST requests by an Event Transmitter to an Event
Receiver. The HTTP request body is a JSON Web Token <xref target="RFC7519"/>
with a <spanx style="verb">Content-Type</spanx> header of <spanx style="verb">application/secevent+jwt</spanx> as
defined in Section 2.2 and 6.2 of <xref target="SET"/>. Upon receipt, the 
Event Receiver acknowledges receipt with a response with HTTP 
Status 202, as described below in <xref target="httpPost"/>.</t>

<t>After successful (acknowledged) SET delivery, Event 
Transmitters SHOULD NOT be required to maintain or record SETs for 
recovery. Once a SET is acknowledged, the Event Receiver SHALL be 
responsible for retention and recovery.</t>

<t>Transmitted SETs SHOULD be self-validating (e.g. signed)
if there is a requirement to verify they were issued by the Event 
Transmitter at a later date when de-coupled from the original 
delivery where authenticity could be checked via the HTTP or 
TLS mutual authentication.</t>

<t>Upon receiving a SET, the Event Receiver reads the SET and validates 
it. The Event Receiver MUST acknowledge receipt to the Event Transmitter, using the 
defined acknowledgement or error method.</t>

<t>The Event Receiver SHALL NOT use the Event acknowledgement mechanism
to report Event errors other than relating to the parsing and validation
of the SET.</t>

</section>
<section anchor="httpPost" title="Push Delivery using HTTP">
<t>This method allows an Event Transmitter to use HTTP POST 
(Section 4.3.3 of <xref target="RFC7231"/>) to deliver
SETs to a previously registered web callback URI supplied by the
Event Receiver as part of an Event Stream configuration process 
(not defined by this document).</t>

<t>The SET to be delivered MAY be signed 
and/or encrypted as defined in <xref target="SET"/>.</t>

<t>The Event Stream configuration defines a URI of an Event 
Receiver provided endpoint which accepts HTTP POST requests (e.g. 
<spanx style="verb">https://rp.example.com/Events</spanx>).</t>

<t>The HTTP Content-Type (see 
Section 3.1.1.5 of <xref target="RFC7231"/>) for the HTTP POST is 
<spanx style="verb">application/secevent+jwt</spanx> and SHALL consist of 
a single SET (see <xref target="SET"/>).
As per Section 5.3.2 of <xref target="RFC7231"/>, the expected 
media type (<spanx style="verb">Accept</spanx> header) response is 
<spanx style="verb">application/json</spanx>.</t>

<t>To deliver an Event, the Event Transmitter generates an event 
delivery message and uses HTTP POST to the configured endpoint with
the appropriate <spanx style="verb">Accept</spanx> and 
<spanx style="verb">Content-Type</spanx> headers.</t>

<figure title="Example HTTP POST Request" anchor="postSet"><artwork><![CDATA[
POST /Events  HTTP/1.1

Host: notify.examplerp.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Type: application/secevent+jwt
eyJhbGciOiJub25lIn0
.
eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
.
]]></artwork></figure>

<t>Upon receipt of the request, the Event Receiver SHALL 
validate the JWT structure of the SET as defined in 
Section 7.2 of <xref target="RFC7519"/>. The Event Receiver 
SHALL also validate the SET information as described
in Section 2 of <xref target="SET"/>.</t>

<t>If the SET is determined to be valid, the Event Receiver SHALL
“acknowledge” successful submission by responding with HTTP Status
202 as <spanx style="verb">Accepted</spanx> 
(see Section 6.3.3 of <xref target="RFC7231"/>).</t>

<t>In order
to maintain compatibility with other methods of transmission, the 
Event Receiver SHOULD NOT include an HTTP response body representation
of the submitted SET or what the SET’s pending status is when 
acknowledging success. In the case of an error (e.g. HTTP Status 400),
the purpose of the HTTP response body is to indicate any SET parsing, 
validation, or cryptographic errors.</t>

<t>The following is a non-normative example of a successful
receipt of a SET.</t>

<figure title="Example Successful Delivery Response" anchor="goodPostResponse"><artwork><![CDATA[
HTTP/1.1 202 Accepted
]]></artwork></figure>

<t>Note that the purpose of the “acknowledgement” response is to let the 
Event Transmitter know that a SET has been delivered and the 
information no longer needs to be retained by the Event Transmitter. 
Before acknowledgement, Event Receivers SHOULD ensure they have 
validated received SETs and retained them in a manner appropriate 
to information retention requirements appropriate to the SET 
event types signaled. The level and method of retention of SETs
by Event Receivers is out-of-scope of this specification.</t>

<t>In the Event of a general HTTP error condition, the Event Receiver
MAY respond with an appropriate HTTP Status code as defined in 
Section 6 of <xref target="RFC7231"/>.</t>

<t>When the Event Receiver detects an error parsing or 
validating a received SET (as defined by <xref target="SET"/>), 
the Event Receiver SHALL indicate an HTTP Status 400 error with an 
error code as described in <xref target="errorResponse"/>.</t>

<t>The following is an example non-normative error 
response.</t>

<figure title="Example HTTP Status 400 Response" anchor="badPostResponse"><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "err":"dup",
  "description":"SET already received. Ignored."

}
]]></artwork></figure>

</section>
<section anchor="errorResponse" title="Error Response Handling">

<t>If a SET is invalid, the following error codes are defined:</t>

<texttable title="SET Errors" anchor="reqErrors">
      <ttcol align='left'>Err Value</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>json</c>
      <c>Invalid JSON object.</c>
      <c>jwtParse</c>
      <c>Invalid or unparsable JWT or JSON structure.</c>
      <c>jwtHdr</c>
      <c>In invalid JWT header was detected.</c>
      <c>jwtCrypto</c>
      <c>Unable to parse due to unsupported algorithm.</c>
      <c>jws</c>
      <c>Signature was not validated.</c>
      <c>jwe</c>
      <c>Unable to decrypt JWE encoded data.</c>
      <c>jwtAud</c>
      <c>Invalid audience value.</c>
      <c>jwtIss</c>
      <c>Issuer not recognized.</c>
      <c>setType</c>
      <c>An unexpected Event type was received.</c>
      <c>setParse</c>
      <c>Invalid structure was encountered such as an inability to parse or an incomplete set of Event claims.</c>
      <c>setData</c>
      <c>SET event claims incomplete or invalid.</c>
      <c>dup</c>
      <c>A duplicate SET was received and has been ignored.</c>
</texttable>

<t>An error response SHALL include a JSON
object which provides details about the error. The JSON object
includes the JSON attributes:</t>

<t><list style="hanging">
  <t hangText='err'><vspace blankLines='0'/>
  A value which is a keyword that 
describes the error (see <xref target="reqErrors"/>).
description</t>
  <t>A human-readable text that provides
additional diagnostic information.</t>
</list></t>

<t>When included as part of an HTTP Status 400 response, the above
JSON is the HTTP response body (see <xref target="badPostResponse"/>).</t>

</section>
</section>
<section anchor="aa" title="Authentication and Authorization">

<t>The SET delivery method described in this specification is
based upon HTTP and depends on the use of TLS and/or standard 
HTTP authentication and authorization schemes as per 
<xref target="RFC7235"/>. For example, the following
methodologies could be used among others:</t>

<t><list style="hanging">
  <t hangText='TLS Client Authentication'><vspace blankLines='0'/>
  Event delivery
endpoints MAY request TLS mutual client authentication. 
See Section 7.3 of <xref target="RFC5246"/>.</t>
  <t hangText='Bearer Tokens'><vspace blankLines='0'/>
  Bearer tokens 
<xref target="RFC6750"/> MAY be used when combined with TLS and a token
framework such as OAuth 2.0 <xref target="RFC6749"/>. 
For security considerations regarding the use of bearer tokens in
SET delivery see <xref target="bearerConsiderations"/>.</t>
  <t hangText='Basic Authentication'><vspace blankLines='0'/>
  Usage of basic
authentication should be avoided due to its use of a single factor
that is based upon a relatively static, symmetric secret.
Implementers SHOULD combine the use of basic authentication with
other factors. The security considerations of HTTP BASIC, are well
documented in <xref target="RFC7617"/> and SHOULD be considered
along with using signed SETs (see SET Payload Authentication below).</t>
  <t hangText='SET Payload Authentication'><vspace blankLines='0'/>
  In scenarios 
where SETs are signed and
the delivery method is HTTP POST (see <xref target="httpPost"/>),
Event Receivers MAY elect to use Basic Authentication or not 
to use HTTP or TLS based authentication at all. See 
<xref target="payloadAuthentication"/> for considerations.</t>
</list></t>

<t>As per Section 4.1 of <xref target="RFC7235"/>, a SET
delivery endpoint SHALL indicate supported HTTP authentication 
schemes via the <spanx style="verb">WWW-Authenticate</spanx> header.</t>

<t>Because SET Delivery describes a simple function, authorization
for the ability to pick-up or deliver SETs can be derived by
considering the identity of the SET issuer, or via an authentication
method above. This specification considers authentication as a
feature to prevent denial-of-service attacks. Because SETs are
not commands (see ), Event Receivers are free to ignore SETs that 
are not of interest.</t>

<t>For illustrative purposes only, SET delivery examples show an OAuth2
bearer token value <xref target="RFC6750"/> in the authorization header.
This is not intended to imply that bearer tokens are
preferred. However, the use of bearer tokens in the specification does
reflect common practice.</t>

<section anchor="authzTokens" title="Use of Tokens as Authorizations">
<t>When using bearer tokens or proof-of-possession tokens that
represent an authorization grant such as issued by OAuth (see <xref target="RFC6749"/>), implementers SHOULD consider the type of
authorization granted, any authorized scopes (see Section 3.3 of <xref target="RFC6749"/>), and the security subject(s) that SHOULD be mapped
from the authorization when considering local access control rules.
Section 6 of the OAuth Assertions draft <xref target="RFC7521"/>, documents common scenarios for
authorization including:</t>

<t><list style="symbols">
  <t>Clients using an assertion to authenticate and/or act on behalf
of itself;</t>
  <t>Clients acting on behalf of a user; and,</t>
  <t>A Client acting on behalf of an anonymous user (e.g., see next
section).</t>
</list></t>

<t>When using OAuth authorization tokens, implementers MUST take
into account the threats and countermeasures documented in the
security considerations for the use of client authorizations (see
Section 8 of <xref target="RFC7521"/>). When using
other token formats or frameworks, implementers MUST take into account
similar threats and countermeasures, especially those documented by
the relevant specifications.</t>

</section>
</section>
<section anchor="Security" title="Security Considerations">

<section anchor="payloadAuthentication" title="Authentication Using Signed SETs">
<t>In scenarios where HTTP authorization or TLS mutual authentication
are not used or are considered weak, JWS signed SETs SHOULD be 
used (see <xref target="RFC7515"/> and <xref target="SET"/>
Security Considerations). This enables the Event Receiver
to validate that the SET issuer is authorized to deliver SETs.</t>

</section>
<section anchor="http-considerations" title="HTTP Considerations">
<t>SET delivery depends on the use of Hypertext Transfer Protocol and thus
subject to the security considerations of HTTP Section 9 of <xref target="RFC7230"/> and its related specifications.</t>

<t>As stated in Section 2.7.1 of <xref target="RFC7230"/>, an 
HTTP requestor MUST NOT generate the <spanx style="verb">userinfo</spanx>
(i.e., username and password) component (and its “@” delimiter) when
an “http” URI reference is generated with a message as they are now
disallowed in HTTP.</t>

</section>
<section anchor="tls-support-considerations" title="TLS Support Considerations">
<t>SETs contain sensitive information that is considered PII
(e.g. subject claims). Therefore, Event Transmitters and
Event Receivers MUST require the use of a transport-layer 
security mechanism. Event delivery endpoints MUST support TLS 
1.2 <xref target="RFC5246"/> and MAY support additional 
transport-layer mechanisms meeting its security requirements. 
When using TLS, the client MUST perform a TLS/SSL server
certificate check, per <xref target="RFC6125"/>. Implementation
security considerations for TLS can be found in “Recommendations for
Secure Use of TLS and DTLS” <xref target="RFC7525"/>.</t>

</section>
<section anchor="authorization-token-considerations" title="Authorization Token Considerations">
<t>When using authorization tokens such as those issued by OAuth 2.0
<xref target="RFC6749"/>, implementers MUST take into account threats
and countermeasures documented in Section 8 of <xref target="RFC7521"/>.</t>

</section>
<section anchor="bearerConsiderations" title="Bearer Token Considerations">
<t>Due to the possibility of interception, Bearer tokens MUST be 
exchanged using TLS.</t>

<t>Bearer tokens MUST have a limited lifetime that can be determined
directly or indirectly (e.g., by checking with a validation service)
by the service provider. By expiring tokens, clients are forced to
obtain a new token (which usually involves re-authentication) for
continued authorized access. For example, in OAuth2, a client MAY use
OAuth token refresh to obtain a new bearer token after authenticating
to an authorization server. See Section 6 of <xref target="RFC6749"/>.</t>

<t>Implementations supporting OAuth bearer tokens need to factor in
security considerations of this authorization method 
<xref target="RFC7521"/>. Since security is only as good
as the weakest link, implementers also need to consider authentication
choices coupled with OAuth bearer tokens. The security considerations
of the default authentication method for OAuth bearer tokens, HTTP
BASIC, are well documented in 
<xref target="RFC7617"/>, therefore implementers
are encouraged to prefer stronger authentication methods. Designating
the specific methods of authentication and authorization are
out-of-scope for the delivery of SET tokens, however this 
information is provided as a resource to implementers.</t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>If a SET needs to be retained for audit purposes, JWS MAY 
be used to provide verification of its authenticity.</t>

<t>Event Transmitters SHOULD attempt to specialize Event Streams 
so that the content is targeted to the specific business and 
protocol needs of subscribers.</t>

<t>When sharing personally identifiable information or information
that is otherwise considered confidential to affected users, Event 
Transmitters and Receivers MUST have the appropriate legal agreements
and user consent or terms of service in place.</t>

<t>The propagation of subject identifiers can be perceived as personally
identifiable information. Where possible, Event Transmitters and Receivers
SHOULD devise approaches that prevent propagation — for example, the
passing of a hash value that requires the subscriber to already know
the subject.</t>

</section>
<section anchor="IANA" title="IANA Considerations">

<t>There are no IANA considerations.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="SET" target='https://www.rfc-editor.org/info/rfc8417'>
<front>
<title>Security Event Token (SET)</title>
<author initials='P.' surname='Hunt' fullname='P. Hunt' role='editor'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='W.' surname='Denniss' fullname='W. Denniss'><organization /></author>
<author initials='M.' surname='Ansari' fullname='M. Ansari'><organization /></author>
<date year='2018' month='July' />
<abstract><t>This specification defines the Security Event Token (SET) data structure.  A SET describes statements of fact from the perspective of an issuer about a subject.  These statements of fact represent an event that occurred directly to or about a security subject, for example, a statement about the issuance or revocation of a token on behalf of a subject.  This specification is intended to enable representing security- and identity-related events.  A SET is a JSON Web Token (JWT), which can be optionally signed and/or encrypted. SETs can be distributed via protocols such as HTTP.</t></abstract>
</front>
<seriesInfo name='RFC' value='8417'/>
<seriesInfo name='DOI' value='10.17487/RFC8417'/>
</reference>



<reference  anchor="HTTP" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>


<reference anchor="POSIX.1" >
  <front>
    <title>The Open Group Base Specifications Issue 7</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2013"/>
  </front>
  <seriesInfo name="IEEE" value="Std 1003.1, 2013 Edition"/>
  <format type="HTML" target="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_15"/>
</reference>




<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7235" target='https://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC6750" target='https://www.rfc-editor.org/info/rfc6750'>
<front>
<title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='D.' surname='Hardt' fullname='D. Hardt'><organization /></author>
<date year='2012' month='October' />
<abstract><t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a &quot;bearer&quot;) can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6750'/>
<seriesInfo name='DOI' value='10.17487/RFC6750'/>
</reference>



<reference  anchor="RFC6749" target='https://www.rfc-editor.org/info/rfc6749'>
<front>
<title>The OAuth 2.0 Authorization Framework</title>
<author initials='D.' surname='Hardt' fullname='D. Hardt' role='editor'><organization /></author>
<date year='2012' month='October' />
<abstract><t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6749'/>
<seriesInfo name='DOI' value='10.17487/RFC6749'/>
</reference>



<reference  anchor="RFC7617" target='https://www.rfc-editor.org/info/rfc7617'>
<front>
<title>The 'Basic' HTTP Authentication Scheme</title>
<author initials='J.' surname='Reschke' fullname='J. Reschke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This document defines the &quot;Basic&quot; Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t></abstract>
</front>
<seriesInfo name='RFC' value='7617'/>
<seriesInfo name='DOI' value='10.17487/RFC7617'/>
</reference>



<reference  anchor="RFC7521" target='https://www.rfc-editor.org/info/rfc7521'>
<front>
<title>Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants</title>
<author initials='B.' surname='Campbell' fullname='B. Campbell'><organization /></author>
<author initials='C.' surname='Mortimore' fullname='C. Mortimore'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='Y.' surname='Goland' fullname='Y. Goland'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification provides a framework for the use of assertions with OAuth 2.0 in the form of a new client authentication mechanism and a new authorization grant type.  Mechanisms are specified for transporting assertions during interactions with a token endpoint; general processing rules are also specified.</t><t>The intent of this specification is to provide a common framework for OAuth 2.0 to interwork with other identity systems using assertions and to provide alternative client authentication mechanisms.</t><t>Note that this specification only defines abstract message flows and processing rules.  In order to be implementable, companion specifications are necessary to provide the corresponding concrete instantiations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7521'/>
<seriesInfo name='DOI' value='10.17487/RFC7521'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6125" target='https://www.rfc-editor.org/info/rfc6125'>
<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<author initials='J.' surname='Hodges' fullname='J. Hodges'><organization /></author>
<date year='2011' month='March' />
<abstract><t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6125'/>
<seriesInfo name='DOI' value='10.17487/RFC6125'/>
</reference>



<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>




    </references>



<section anchor="other-streaming-specifications" title="Other Streaming Specifications">
<t>[[EDITORS NOTE: This section to be removed prior to publication]]</t>

<t>The following pub/sub, queuing, streaming systems were reviewed 
as possible solutions or as input to the current draft:</t>

<t>XMPP Events
The WG considered the XMPP events ands its ability to provide a single
messaging solution without the need for both polling and push modes.
The feeling was the size and methodology of XMPP was to far apart from
the current capabilities of the SECEVENTs community which focuses in
on HTTP based service delivery and authorization.</t>

<t>Amazon Simple Notification Service
Simple Notification Service, is a pub/sub messaging product from 
AWS. SNS supports a variety of subscriber types: HTTP/HTTPS endpoints, 
AWS Lambda functions, email addresses (as JSON or plain text), phone 
numbers (via SMS), and AWS SQS standard queues. It doesn’t directly 
support pull, but subscribers can get the pull model by creating an 
SQS queue and subscribing it to the topic. Note that this puts the 
cost of pull support back onto the subscriber, just as it is in the 
push model. It is not clear that one way is strictly better than the 
other; larger, sophisticated developers may be happy to own message 
persistence so they can have their own internal delivery guarantees. 
The long tail of OIDC clients may not care about that, or may fail 
to get it right. Regardless, I think we can learn something from the 
Delivery Policies supported by SNS, as well as the delivery controls 
that SQS offers (e.g. Visibility Timeout, Dead-Letter Queues). I’m 
not suggesting that we need all of these things in the spec, but 
they give an idea of what features people have found useful.
Other information:</t>

<t><list style="symbols">
  <t>API Reference: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html</t>
  <t>Visibility Timeouts: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html</t>
</list></t>

<t>Apache Kafka
Apache Kafka is an Apache open source project based upon TCP for 
distributed streaming. It prescribes some interesting general 
purpose features that seem to extend far beyond the simpler 
streaming model SECEVENTs is after. A comment from MS has been that 
Kafka does an acknowledge with poll combination event which seems 
to be a performance advantage. See: https://kafka.apache.org/intro</t>

<t>Google Pub/Sub
Google Pub Sub system favours a model whereby polling and acknowledgement
of events is done as separate endpoints as separate functions.
Information:</t>

<t><list style="symbols">
  <t>Cloud Overview - https://cloud.google.com/pubsub/</t>
  <t>Subscriber Overview - https://cloud.google.com/pubsub/docs/subscriber</t>
  <t>Subscriber Pull(poll) - https://cloud.google.com/pubsub/docs/pull</t>
</list></t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>The editors would like to thanks the members of the SCIM WG which 
began discussions of provisioning events starting with: draft-hunt-scim-notify-00 in 2015.</t>

<t>The editors would like to thank the authors of draft-ietf-secevent-delivery-02,
on which this draft is based.</t>

<t>The editor would like to thank the participants in the the SECEVENTS
working group for their support of this specification.</t>

</section>
<section anchor="change-log" title="Change Log">
<t>Draft 00 - AB - Based on draft-ietf-secevent-delivery-02 with the 
following changes:</t>

<t><list style="symbols">
  <t>Renamed to “Push-Based SET Token Delivery Using HTTP”</t>
  <t>Removed references to the HTTP Polling delivery method.</t>
  <t>Removed informative reference to RFC6202.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAJE7f1sAA5186XbbOrbmfzwF2vlRcV9LluRMdq1a6zi2kyg3HmJ5SFy3
1glEQhJjDroEaUfJSa1+jX69fpLeAwCCtJxzulOnEkkkgY2NPXx7AHu9nqiS
KtV78qw2i95rZXQsJ0cX8qK41bk81Glyp8uVvDRJPpfvLi7OhJpOS323J+NS
zapeoqtZz+hI3+m86i2qatlbwkgiLqJcZfpPbusNhiJWFdw2Ggxf9QaveqMd
EcEP86Jc7UlTxSJZlnuyKmtTjQaD3cFICFVqtScnOqrLpFqJ+6K8nZdFvWx+
k0c4jZHXcAnpfouXxa1ewb3xnhznlS5zXfUOkTYhTKXy+HeVFjkQstJGLJM9
+c+qiLakKcqq1DMDn1YZfvgXzF9Xi6LcEz0h4U+Smz2535evVXSbqZx+45Xv
57ma6jTVrWtFOVd58l1VSZHDPZn6XvAFnakk3ZNlEi0UPPmbokv9qMjoclng
Luk4qYoynPq4L98D4SaY+BiH0Kl8HV5qzwu3lIUpYPXB1Nn062+Zu+AnBo7u
Sdyxve1to9NZLzGm1nE/yWfFdkjJWV++q/MqIORskaTNb20KTksVpTqcfgl3
9xdw928rtSgKIqC90Alsb6VNVIeLVWVSm86l9lRvi2Lenioz7vbf5nRxzWT7
uYGhw5lAFvR3FV5oz3OQmKhoTcNP9BU98VuE17szgeicqFilSVt0QMTyVevK
X9jACp7JVdzZRJEXZQaP3ek9uhnUe0+evzl49Wz4kn5AtaZfXo52hvTL2elk
/Kk/5PvxjzUSFwstT5dgGEijJJoLOVnqKJklERFm5BilQ770Tzptcd97/pNd
FOqjgfHrSstiJo9SHVWgBCqVoJX2a5EnkZFH+TzJtS6NH8Lbjh3/k9Flog0K
515rpvHR0RFYiCqWw8Fgpz/cosfkEShUYjUQ/8yIV+1H310cf/AqsKynpl8A
D8jm9GEB20UOe6Txwvbui93d3eHuy93d7SnaUrAY21fD30Efl4Nn/UWVpU8q
Nf998Oz34XMher2eVFNTgSpU4mKRGGlCZkp4HAY2clHcS2VXhjwyzs6ROYVt
B1ttpHgKO2s2ZaZWcqrhYbLdYM+rAp5egtFOitqkK1nqeWIqulSCSca7pKi9
hcfdv5AF/nrxYQJSChwCPsdSGRwHzDaOWIEouKf7vJQsiWPQMzCvZRHXES0B
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
Xn8/TV7dqWwx/Jw8T/XbN1X09lv6ITu5m052396I66vbaPVqeHMYjY4PPw6P
L26S4+uP96eHnwfwLxAfjW6uL3fG6cCM8/dpNNodRtlJ6qgWLbLXr/Xu6tNJ
GuXHdyeH59nJ16PBcXaencJEN4c3YvH56+dvNxfR8Pjrm9vTyfsYGJPG2VUd
vzl/Hr29+j7+upyOb08m55dvLs/5+gImXKnr98P4rbA3ZOntOLlPptmb6mYC
a8+vvsNunH6+Hqb4e/T2zfdoJ76Lso/I+XR6/WY5fXecfBKT+yTO3pj4mgZ6
Oc6uqs/XqaEd2TFJ/C69hwFfjHN82ODDo8/X34b0W7a8FdPR1X53b2dXyKzX
i2jnZGe68/52/LUAynYHJ+8uV9PsFQ4yjEZXq4vsjajcSNPRJV5Y3hzA968f
BzfAl5PD97c3X29Hn7OPMOt4dAw7Afv+7ebwFu+tP18LWB+RHS+RaRe8/hfj
2+WdevuMpAx4AGtNmRdAyfnbXZDd4e7sI4gvqtuPPflkCao10RUXyP+xccTK
Faj7ORvmjZ8hDlpW0npwa7d/gT+Fw0B0y/vrC8lxOJgO2cCAjhvyBvxly2RS
2LEWRgmeTKWmkK0JCSznXBbnykWD9UUYerQCDojQGtIoQ2ejfZekozkeX7XY
CEDURhg1mHqaAfzFKacra9EpAdTEJhyaCAhNkFprP3X8BUAAehhH8Yu1qIWD
S4ggALWEkQUYyyVwwBaBaDKGbQydKIlji89E3fooKwhhkjxK61i74LtxThQ7
+mRSC+/R4l1wgSAVq8SOz39Dd8m8sJUMYDwBf9Ewk64yN/tyzMmECNs4GIAw
6GUMEfBSPhsMNqkY6eqLTvTWkJ4Q0kuAEuzkotQvUmuR7JYXaGISzEZAqpiX
agnYxkLiBxUtCoswZeibWVwBjygPJEQEGqYsQkZt9RkOlAsnE16P50URI1A+
d0vpKPSkkUCPtN29qNsnRWVrUWuYtNGJCDZaSASYleoqFJcQZuCDtshFbMSk
P9UqG4TqMl0i1NMcRi1yTK7mWsfGql2pbRG0FToG8wF0fK1hFN2NYrY6eupD
W50bNEUUnFIlxRss315iY2GOlS0BcH9GFW1sNMgRbwWYR5AANYtp4u0gMjat
RyysQhYJ2xYDsMQQblcpZpJRoFK4xFlhG/FQldwNbvOwWAP7q5nANYmphq8k
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
0WDUF/8XOseNvL9bAAA=

-->

</rfc>

