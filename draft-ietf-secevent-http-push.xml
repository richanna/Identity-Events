<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-secevent-http-push-00" category="std">

  <front>
    <title abbrev="draft-ietf-secevent-http-push">Push-Based SET Token Delivery Using HTTP</title>

    <author initials="A." surname="Backman" fullname="Annabelle Backman" role="editor">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones" role="editor">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt" role="editor">
      <organization>Oracle</organization>
      <address>
        <email>phil.hunt@yahoo.com</email>
      </address>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization>Cisco</organization>
      <address>
        <email>morteza.ansari@cisco.com</email>
      </address>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization>Microsoft</organization>
      <address>
        <email>tonynad@microsoft.com</email>
      </address>
    </author>

    <date year="2018" month="July" day="20"/>

    <area>Network</area>
    <workgroup>Network Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines how a series of security event tokens 
(SETs) may be delivered to a previously registered receiver 
using HTTP POST over TLS initiated as a push to the receiver.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction and Overview">
<t>This specification defines how a stream of SETs (see
<xref target="I-D.ietf-secevent-token"/>) can be transmitted to a previously 
registered Event Receiver using HTTP <xref target="RFC7231"/> over TLS. The
specification defines a method to push SETs via HTTP POST.</t>

<t>This specification defines a method for SET delivery in what
is known as Event Streams.</t>

<t>This specification does not define the method by which Event 
Streams are defined, provisioned, managed, monitored,
and configured and is out of scope of this specification.</t>

<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
they appear in all capitals, as shown here.</t>

<t>For purposes of readability examples are not URL encoded.
Implementers MUST percent encode URLs as described in Section 2.1 of
<xref target="RFC3986"/>.</t>

<t>Throughout this documents all figures MAY contain spaces and extra
line-wrapping for readability and space limitations. Similarly, some
URI’s contained within examples, have been shortened for space and
readability reasons.</t>

</section>
<section anchor="defn" title="Definitions">
<t>This specification assumes terminology defined in the Security
Event Token specification <xref target="I-D.ietf-secevent-token"/>.</t>

<t>The following definitions are defined for Security Event distribution:</t>

<t><list style="hanging">
  <t hangText='Event Transmitter'><vspace blankLines='0'/>
  A service provider that delivers SETs to other providers known
as Event Receivers. An Event Transmitter is responsible for offering a
service that allows the Event Receiver to check the Event Stream
configuration and status known as the “Control Plane”.</t>
  <t hangText='Event Receiver'><vspace blankLines='0'/>
  A service provider that registers to receive SETs from an Event
Transmitter and provides an endpoint to receive SETs via HTTP POST. 
Event Receivers can check current Event Stream configuration and status
by accessing the Event Transmitters “Control Plane”.</t>
  <t hangText='Event Stream'><vspace blankLines='0'/>
  An Event Stream is a defined location, distribution method and
whereby an Event Transmitter and Event Receiver exchange a pre-
defined family of SETs. A Stream is assumed to have configuration data
such as HTTP endpoints, timeouts, public key sets for signing and
encryption, and Event Families.</t>
  <t hangText='Subject'><vspace blankLines='0'/>
  The security subject around which a security event has occurred. For
example, a security subject might per a user, a person, an email
address, a service provider entity, an IP address, an OAuth Client, a
mobile device, or any identifiable thing referenced in security and
authorization systems.</t>
  <t hangText='Event'><vspace blankLines='0'/>
  An Event is defined to be an event as represented by a security event
token (SET).  See <xref target="I-D.ietf-secevent-token"/>.</t>
  <t hangText='NumericDate'><vspace blankLines='0'/>
  A JSON numeric value representing the number of seconds from
1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring
leap seconds.  This is equivalent to the IEEE Std 1003.1, 2013 Edition
<xref target="POSIX.1"></xref> definition “Seconds Since the Epoch”, in
which each day is accounted for by exactly 86400 seconds, other than
that non-integer values can be represented.  See <xref target="RFC3339"/> for
details regarding date/times in general and UTC in particular.</t>
</list></t>

</section>
</section>
<section anchor="event_stream" title="SET Event Stream Protocol">
<t>An Event Stream represents the communication channel over which a 
series of SETs are delivered to a configured Event Receiver.</t>

<section anchor="event_delivery" title="Event Delivery Process">
<t>When an Event occurs, the Event Transmitter constructs a SET
token <xref target="I-D.ietf-secevent-token"/> that describes the Event. The Event Transmitter
determines the Event Streams over which the SET should be distributed
to.</t>

<t>How SETs are defined and the process by which Events are identified for 
Event Receivers is out-of-scope of this    specification.</t>

<t>When a SET is available for an Event Receiver, the Event Transmitter
attempts to deliver the SET based on the Event Receiver’s registered
delivery mechanism:</t>

<t><list style="symbols">
  <t>The Event Transmitter uses an HTTP/1.1 POST to the Event Receiver
endpoint to deliver the SET;</t>
  <t>Or, the Event Transmitter delivers the Event through a different
method not defined by this specification.</t>
</list></t>

<t>In Push-Based SET Delivery Using HTTP, SETs are delivered one at a
time using HTTP POST requests by an Event Transmitter to an Event
Receiver. The HTTP request body is a JSON Web Token <xref target="RFC7519"/>
with a <spanx style="verb">Content-Type</spanx> header of <spanx style="verb">application/secevent+jwt</spanx> as
defined in Section 2.2 and 6.2 of <xref target="I-D.ietf-secevent-token"/>. Upon receipt, the 
Event Receiver acknowledges receipt with a response with HTTP 
Status 202, as described below in <xref target="httpPost"/>.</t>

<t>After successful (acknowledged) SET delivery, Event 
Transmitters SHOULD NOT be required to maintain or record SETs for 
recovery. Once a SET is acknowledged, the Event Receiver SHALL be 
responsible for retention and recovery.</t>

<t>Transmitted SETs SHOULD be self-validating (e.g. signed)
if there is a requirement to verify they were issued by the Event 
Transmitter at a later date when de-coupled from the original 
delivery where authenticity could be checked via the HTTP or 
TLS mutual authentication.</t>

<t>Upon receiving a SET, the Event Receiver reads the SET and validates 
it. The Event Receiver MUST acknowledge receipt to the Event Transmitter, using the 
defined acknowledgement or error method.</t>

<t>The Event Receiver SHALL NOT use the Event acknowledgement mechanism
to report Event errors other than relating to the parsing and validation
of the SET.</t>

</section>
<section anchor="httpPost" title="Push Delivery using HTTP">
<t>This method allows an Event Transmitter to use HTTP POST 
(Section 4.3.3 <xref target="RFC7231"/>) to deliver
SETs to a previously registered web callback URI supplied by the
Event Receiver as part of an Event Stream configuration process 
(not defined by this document).</t>

<t>The SET to be delivered MAY be signed 
and/or encrypted as defined in <xref target="I-D.ietf-secevent-token"/>.</t>

<t>The Event Stream configuration defines a URI of an Event 
Receiver provided endpoint which accepts HTTP POST requests (e.g. 
<spanx style="verb">https://rp.example.com/Events</spanx>).</t>

<t>The HTTP Content-Type (see 
Section 3.1.1.5 <xref target="RFC7231"/>) for the HTTP POST is 
<spanx style="verb">application/secevent+jwt</spanx> and SHALL consist of 
a single SET (see <xref target="I-D.ietf-secevent-token"/>).
As per Section 5.3.2 <xref target="RFC7231"/>, the expected 
media type (<spanx style="verb">Accept</spanx> header) response is 
<spanx style="verb">application/json</spanx>.</t>

<t>To deliver an Event, the Event Transmitter generates an event 
delivery message and uses HTTP POST to the configured endpoint with
the appropriate <spanx style="verb">Accept</spanx> and 
<spanx style="verb">Content-Type</spanx> headers.</t>

<figure title="Example HTTP POST Request" anchor="postSet"><artwork><![CDATA[
POST /Events  HTTP/1.1

Host: notify.examplerp.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Type: application/secevent+jwt
eyJhbGciOiJub25lIn0
.
eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
.
]]></artwork></figure>

<t>Upon receipt of the request, the Event Receiver SHALL 
validate the JWT structure of the SET as defined in 
Section 7.2 <xref target="RFC7519"/>. The Event Receiver 
SHALL also validate the SET information as described
in Section 2 <xref target="I-D.ietf-secevent-token"/>.</t>

<t>If the SET is determined to be valid, the Event Receiver SHALL
“acknowledge” successful submission by responding with HTTP Status
202 as <spanx style="verb">Accepted</spanx> 
(see Section 6.3.3 <xref target="RFC7231"/>).</t>

<t>In order
to maintain compatibility with other methods of transmission, the 
Event Receiver SHOULD NOT include an HTTP response body representation
of the submitted SET or what the SET’s pending status is when 
acknowledging success. In the case of an error (e.g. HTTP Status 400),
the purpose of the HTTP response body is to indicate any SET parsing, 
validation, or cryptographic errors.</t>

<t>The following is a non-normative example of a successful
receipt of a SET.</t>

<figure title="Example Successful Delivery Response" anchor="goodPostResponse"><artwork><![CDATA[
HTTP/1.1 202 Accepted
]]></artwork></figure>

<t>Note that the purpose of the “acknowledgement” response is to let the 
Event Transmitter know that a SET has been delivered and the 
information no longer needs to be retained by the Event Transmitter. 
Before acknowledgement, Event Receivers SHOULD ensure they have 
validated received SETs and retained them in a manner appropriate 
to information retention requirements appropriate to the SET 
event types signaled. The level and method of retention of SETs
by Event Receivers is out-of-scope of this specification.</t>

<t>In the Event of a general HTTP error condition, the Event Receiver
MAY respond with an appropriate HTTP Status code as defined in 
Section 6 <xref target="RFC7231"/>.</t>

<t>When the Event Receiver detects an error parsing or 
validating a received SET (as defined by <xref target="I-D.ietf-secevent-token"/>), 
the Event Receiver SHALL indicate an HTTP Status 400 error with an 
error code as described in <xref target="errorResponse"/>.</t>

<t>The following is an example non-normative error 
response.</t>

<figure title="Example HTTP Status 400 Response" anchor="badPostResponse"><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "err":"dup",
  "description":"SET already received. Ignored."

}
]]></artwork></figure>

</section>
<section anchor="errorResponse" title="Error Response Handling">

<t>If a SET is invalid, the following error codes are defined:</t>

<texttable title="SET Errors" anchor="reqErrors">
      <ttcol align='left'>Err Value</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>json</c>
      <c>Invalid JSON object.</c>
      <c>jwtParse</c>
      <c>Invalid or unparsable JWT or JSON structure.</c>
      <c>jwtHdr</c>
      <c>In invalid JWT header was detected.</c>
      <c>jwtCrypto</c>
      <c>Unable to parse due to unsupported algorithm.</c>
      <c>jws</c>
      <c>Signature was not validated.</c>
      <c>jwe</c>
      <c>Unable to decrypt JWE encoded data.</c>
      <c>jwtAud</c>
      <c>Invalid audience value.</c>
      <c>jwtIss</c>
      <c>Issuer not recognized.</c>
      <c>setType</c>
      <c>An unexpected Event type was received.</c>
      <c>setParse</c>
      <c>Invalid structure was encountered such as an inability to parse or an incomplete set of Event claims.</c>
      <c>setData</c>
      <c>SET event claims incomplete or invalid.</c>
      <c>dup</c>
      <c>A duplicate SET was received and has been ignored.</c>
</texttable>

<t>An error response SHALL include a JSON
object which provides details about the error. The JSON object
includes the JSON attributes:</t>

<t><list style="hanging">
  <t hangText='err'><vspace blankLines='0'/>
  A value which is a keyword that 
describes the error (see <xref target="reqErrors"/>).
description</t>
  <t>A human-readable text that provides
additional diagnostic information.</t>
</list></t>

<t>When included as part of an HTTP Status 400 response, the above
JSON is the HTTP response body (see <xref target="badPostResponse"/>).</t>

</section>
</section>
<section anchor="aa" title="Authentication and Authorization">

<t>The SET delivery method described in this specification is
based upon HTTP and depends on the use of TLS and/or standard 
HTTP authentication and authorization schemes as per 
<xref target="RFC7235"/>. For example, the following
methodologies could be used among others:</t>

<t><list style="hanging">
  <t hangText='TLS Client Authentication'><vspace blankLines='0'/>
  Event delivery
endpoints MAY request TLS mutual client authentication. 
See Section 7.3 <xref target="RFC5246"/>.</t>
  <t hangText='Bearer Tokens'><vspace blankLines='0'/>
  Bearer tokens 
<xref target="RFC6750"/> MAY be used when combined with TLS and a token
framework such as OAuth 2.0 <xref target="RFC6749"/>. 
For security considerations regarding the use of bearer tokens in
SET delivery see <xref target="bearerConsiderations"/>.</t>
  <t hangText='Basic Authentication'><vspace blankLines='0'/>
  Usage of basic
authentication should be avoided due to its use of a single factor
that is based upon a relatively static, symmetric secret.
Implementers SHOULD combine the use of basic authentication with
other factors. The security considerations of HTTP BASIC, are well
documented in <xref target="RFC7617"/> and SHOULD be considered
along with using signed SETs (see SET Payload Authentication below).</t>
  <t hangText='SET Payload Authentication'><vspace blankLines='0'/>
  In scenarios 
where SETs are signed and
the delivery method is HTTP POST (see <xref target="httpPost"/>),
Event Receivers MAY elect to use Basic Authentication or not 
to use HTTP or TLS based authentication at all. See 
<xref target="payloadAuthentication"/> for considerations.</t>
</list></t>

<t>As per Section 4.1 of <xref target="RFC7235"/>, a SET
delivery endpoint SHALL indicate supported HTTP authentication 
schemes via the <spanx style="verb">WWW-Authenticate</spanx> header.</t>

<t>Because SET Delivery describes a simple function, authorization
for the ability to pick-up or deliver SETs can be derived by
considering the identity of the SET issuer, or via an authentication
method above. This specification considers authentication as a
feature to prevent denial-of-service attacks. Because SETs are
not commands (see ), Event Receivers are free to ignore SETs that 
are not of interest.</t>

<t>For illustrative purposes only, SET delivery examples show an OAuth2
bearer token value <xref target="RFC6750"/> in the authorization header.
This is not intended to imply that bearer tokens are
preferred. However, the use of bearer tokens in the specification does
reflect common practice.</t>

<section anchor="authzTokens" title="Use of Tokens as Authorizations">
<t>When using bearer tokens or proof-of-possession tokens that
represent an authorization grant such as issued by OAuth (see <xref target="RFC6749"/>), implementers SHOULD consider the type of
authorization granted, any authorized scopes (see Section 3.3 of <xref target="RFC6749"/>), and the security subject(s) that SHOULD be mapped
from the authorization when considering local access control rules.
Section 6 of the OAuth Assertions draft <xref target="RFC7521"/>, documents common scenarios for
authorization including:</t>

<t><list style="symbols">
  <t>Clients using an assertion to authenticate and/or act on behalf
of itself;</t>
  <t>Clients acting on behalf of a user; and,</t>
  <t>A Client acting on behalf of an anonymous user (e.g., see next
section).</t>
</list></t>

<t>When using OAuth authorization tokens, implementers MUST take
into account the threats and countermeasures documented in the
security considerations for the use of client authorizations (see
Section 8 of <xref target="RFC7521"/>). When using
other token formats or frameworks, implementers MUST take into account
similar threats and countermeasures, especially those documented by
the relevant specifications.</t>

</section>
</section>
<section anchor="Security" title="Security Considerations">

<section anchor="payloadAuthentication" title="Authentication Using Signed SETs">
<t>In scenarios where HTTP authorization or TLS mutual authentication
are not used or are considered weak, JWS signed SETs SHOULD be 
used (see <xref target="RFC7515"/> and 
Security Considerations <xref target="I-D.ietf-secevent-token"/>). This enables the Event Receiver
to validate that the SET issuer is authorized to deliver SETs.</t>

</section>
<section anchor="http-considerations" title="HTTP Considerations">
<t>SET delivery depends on the use of Hypertext Transfer Protocol and thus
subject to the security considerations of HTTP Section 9 <xref target="RFC7230"/> and its related specifications.</t>

<t>As stated in Section 2.7.1 <xref target="RFC7230"/>, an 
HTTP requestor MUST NOT generate the <spanx style="verb">userinfo</spanx>
(i.e., username and password) component (and its “@” delimiter) when
an “http” URI reference is generated with a message as they are now
disallowed in HTTP.</t>

</section>
<section anchor="tls-support-considerations" title="TLS Support Considerations">
<t>SETs contain sensitive information that is considered PII
(e.g. subject claims). Therefore, Event Transmitters and
Event Receivers MUST require the use of a transport-layer 
security mechanism. Event delivery endpoints MUST support TLS 
1.2 <xref target="RFC5246"/> and MAY support additional 
transport-layer mechanisms meeting its security requirements. 
When using TLS, the client MUST perform a TLS/SSL server
certificate check, per <xref target="RFC6125"/>. Implementation
security considerations for TLS can be found in “Recommendations for
Secure Use of TLS and DTLS” <xref target="RFC7525"/>.</t>

</section>
<section anchor="authorization-token-considerations" title="Authorization Token Considerations">
<t>When using authorization tokens such as those issued by OAuth 2.0
<xref target="RFC6749"/>, implementers MUST take into account threats
and countermeasures documented in Section 8 of <xref target="RFC7521"/>.</t>

<section anchor="bearerConsiderations" title="Bearer Token Considerations">
<t>Due to the possibility of interception, Bearer tokens MUST be 
exchanged using TLS.</t>

<t>Bearer tokens MUST have a limited lifetime that can be determined
directly or indirectly (e.g., by checking with a validation service)
by the service provider. By expiring tokens, clients are forced to
obtain a new token (which usually involves re-authentication) for
continued authorized access. For example, in OAuth2, a client MAY use
OAuth token refresh to obtain a new bearer token after authenticating
to an authorization server. See Section 6 of <xref target="RFC6749"/>.</t>

<t>Implementations supporting OAuth bearer tokens need to factor in
security considerations of this authorization method 
<xref target="RFC7521"/>. Since security is only as good
as the weakest link, implementers also need to consider authentication
choices coupled with OAuth bearer tokens. The security considerations
of the default authentication method for OAuth bearer tokens, HTTP
BASIC, are well documented in 
<xref target="RFC7617"/>, therefore implementers
are encouraged to prefer stronger authentication methods. Designating
the specific methods of authentication and authorization are
out-of-scope for the delivery of SET tokens, however this 
information is provided as a resource to implementers.</t>

</section>
</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>If a SET needs to be retained for audit purposes, JWS MAY 
be used to provide verification of its authenticity.</t>

<t>Event Transmitters SHOULD attempt to specialize Event Streams 
so that the content is targeted to the specific business and 
protocol needs of subscribers.</t>

<t>When sharing personally identifiable information or information
that is otherwise considered confidential to affected users, Event 
Transmitters and Receivers MUST have the appropriate legal agreements
and user consent or terms of service in place.</t>

<t>The propagation of subject identifiers can be perceived as personally
identifiable information. Where possible, Event Transmitters and Receivers
SHOULD devise approaches that prevent propagation — for example, the
passing of a hash value that requires the subscriber to already know
the subject.</t>

</section>
<section anchor="IANA" title="IANA Considerations">

<t>There are no IANA considerations.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="I-D.ietf-secevent-token" target='https://www.rfc-editor.org/info/rfc8417'>
<front>
<title>Security Event Token (SET)</title>
<author initials='P.' surname='Hunt' fullname='P. Hunt' role='editor'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='W.' surname='Denniss' fullname='W. Denniss'><organization /></author>
<author initials='M.' surname='Ansari' fullname='M. Ansari'><organization /></author>
<date year='2018' month='July' />
<abstract><t>This specification defines the Security Event Token (SET) data structure.  A SET describes statements of fact from the perspective of an issuer about a subject.  These statements of fact represent an event that occurred directly to or about a security subject, for example, a statement about the issuance or revocation of a token on behalf of a subject.  This specification is intended to enable representing security- and identity-related events.  A SET is a JSON Web Token (JWT), which can be optionally signed and/or encrypted. SETs can be distributed via protocols such as HTTP.</t></abstract>
</front>
<seriesInfo name='RFC' value='8417'/>
<seriesInfo name='DOI' value='10.17487/RFC8417'/>
</reference>


<reference anchor="POSIX.1" >
  <front>
    <title>The Open Group Base Specifications Issue 7</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2013"/>
  </front>
  <seriesInfo name="IEEE" value="Std 1003.1, 2013 Edition"/>
  <format type="HTML" target="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_15"/>
</reference>




<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC7235" target='https://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC6750" target='https://www.rfc-editor.org/info/rfc6750'>
<front>
<title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='D.' surname='Hardt' fullname='D. Hardt'><organization /></author>
<date year='2012' month='October' />
<abstract><t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a &quot;bearer&quot;) can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6750'/>
<seriesInfo name='DOI' value='10.17487/RFC6750'/>
</reference>



<reference  anchor="RFC6749" target='https://www.rfc-editor.org/info/rfc6749'>
<front>
<title>The OAuth 2.0 Authorization Framework</title>
<author initials='D.' surname='Hardt' fullname='D. Hardt' role='editor'><organization /></author>
<date year='2012' month='October' />
<abstract><t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6749'/>
<seriesInfo name='DOI' value='10.17487/RFC6749'/>
</reference>



<reference  anchor="RFC7617" target='https://www.rfc-editor.org/info/rfc7617'>
<front>
<title>The 'Basic' HTTP Authentication Scheme</title>
<author initials='J.' surname='Reschke' fullname='J. Reschke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This document defines the &quot;Basic&quot; Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t></abstract>
</front>
<seriesInfo name='RFC' value='7617'/>
<seriesInfo name='DOI' value='10.17487/RFC7617'/>
</reference>



<reference  anchor="RFC7521" target='https://www.rfc-editor.org/info/rfc7521'>
<front>
<title>Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants</title>
<author initials='B.' surname='Campbell' fullname='B. Campbell'><organization /></author>
<author initials='C.' surname='Mortimore' fullname='C. Mortimore'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='Y.' surname='Goland' fullname='Y. Goland'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification provides a framework for the use of assertions with OAuth 2.0 in the form of a new client authentication mechanism and a new authorization grant type.  Mechanisms are specified for transporting assertions during interactions with a token endpoint; general processing rules are also specified.</t><t>The intent of this specification is to provide a common framework for OAuth 2.0 to interwork with other identity systems using assertions and to provide alternative client authentication mechanisms.</t><t>Note that this specification only defines abstract message flows and processing rules.  In order to be implementable, companion specifications are necessary to provide the corresponding concrete instantiations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7521'/>
<seriesInfo name='DOI' value='10.17487/RFC7521'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6125" target='https://www.rfc-editor.org/info/rfc6125'>
<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<author initials='J.' surname='Hodges' fullname='J. Hodges'><organization /></author>
<date year='2011' month='March' />
<abstract><t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6125'/>
<seriesInfo name='DOI' value='10.17487/RFC6125'/>
</reference>



<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>




    </references>



<section anchor="other-streaming-specifications" title="Other Streaming Specifications">
<t>[[EDITORS NOTE: This section to be removed prior to publication]]</t>

<t>The following pub/sub, queuing, streaming systems were reviewed 
as possible solutions or as input to the current draft:</t>

<t>XMPP Events</t>

<t>The WG considered the XMPP events ands its ability to provide a single
messaging solution without the need for both polling and push modes.
The feeling was the size and methodology of XMPP was to far apart from
the current capabilities of the SECEVENTs community which focuses in
on HTTP based service delivery and authorization.</t>

<t>Amazon Simple Notification Service</t>

<t>Simple Notification Service, is a pub/sub messaging product from 
AWS. SNS supports a variety of subscriber types: HTTP/HTTPS endpoints, 
AWS Lambda functions, email addresses (as JSON or plain text), phone 
numbers (via SMS), and AWS SQS standard queues. It doesn’t directly 
support pull, but subscribers can get the pull model by creating an 
SQS queue and subscribing it to the topic. Note that this puts the 
cost of pull support back onto the subscriber, just as it is in the 
push model. It is not clear that one way is strictly better than the 
other; larger, sophisticated developers may be happy to own message 
persistence so they can have their own internal delivery guarantees. 
The long tail of OIDC clients may not care about that, or may fail 
to get it right. Regardless, I think we can learn something from the 
Delivery Policies supported by SNS, as well as the delivery controls 
that SQS offers (e.g. Visibility Timeout, Dead-Letter Queues). I’m 
not suggesting that we need all of these things in the spec, but 
they give an idea of what features people have found useful.</t>

<t>Other information:</t>

<t><list style="symbols">
  <t>API Reference: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html</t>
  <t>Visibility Timeouts: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html</t>
</list></t>

<t>Apache Kafka</t>

<t>Apache Kafka is an Apache open source project based upon TCP for 
distributed streaming. It prescribes some interesting general 
purpose features that seem to extend far beyond the simpler 
streaming model SECEVENTs is after. A comment from MS has been that 
Kafka does an acknowledge with poll combination event which seems 
to be a performance advantage. See: https://kafka.apache.org/intro</t>

<t>Google Pub/Sub</t>

<t>Google Pub Sub system favours a model whereby polling and acknowledgement
of events is done as separate endpoints as separate functions.</t>

<t>Information:</t>

<t><list style="symbols">
  <t>Cloud Overview - https://cloud.google.com/pubsub/</t>
  <t>Subscriber Overview - https://cloud.google.com/pubsub/docs/subscriber</t>
  <t>Subscriber Pull(poll) - https://cloud.google.com/pubsub/docs/pull</t>
</list></t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>The editors would like to thanks the members of the SCIM WG which 
began discussions of provisioning events starting with: draft-hunt-scim-notify-00 in 2015.</t>

<t>The editors would like to thank the authors of draft-ietf-secevent-delivery-02,
on which this draft is based.</t>

<t>The editor would like to thank the participants in the the SECEVENTS
working group for their support of this specification.</t>

</section>
<section anchor="change-log" title="Change Log">
<t>Draft 00 - AB - Based on draft-ietf-secevent-delivery-02 with the 
following changes:</t>

<t><list style="symbols">
  <t>Renamed to “Push-Based SET Token Delivery Using HTTP”</t>
  <t>Removed references to the HTTP Polling delivery method.</t>
  <t>Removed informative reference to RFC6202.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
YIJva7g1EP8X0QRb6YBcAAA=

-->

</rfc>

