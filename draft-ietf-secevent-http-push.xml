<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-secevent-http-push-00" category="std">

  <front>
    <title abbrev="draft-ietf-secevent-http-push">Push-Based SET Token Delivery Using HTTP</title>

    <author initials="A." surname="Backman" fullname="Annabelle Backman" role="editor">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt">
      <organization>Oracle</organization>
      <address>
        <email>phil.hunt@yahoo.com</email>
      </address>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization>Cisco</organization>
      <address>
        <email>morteza.ansari@cisco.com</email>
      </address>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization>Microsoft</organization>
      <address>
        <email>tonynad@microsoft.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="27"/>

    <area>Security</area>
    <workgroup>Security Events Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines how a series of security event tokens 
(SETs) may be delivered to a previously registered receiver 
using HTTP POST over TLS initiated as a push to the receiver.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction and Overview">
<t>This specification defines how SETs (see
<xref target="SET"/>) can be transmitted to a previously 
registered SET Receiver using HTTP <xref target="RFC7231"/> over TLS. The
specification defines a method to push SETs via HTTP POST.</t>

<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
they appear in all capitals, as shown here.</t>

<t>For purposes of readability examples are not URL encoded.
Implementers MUST percent encode URLs as described in Section 2.1 of
<xref target="RFC3986"/>.</t>

<t>Throughout this documents all figures MAY contain spaces and extra
line-wrapping for readability and space limitations. Similarly, some
URI’s contained within examples, have been shortened for space and
readability reasons.</t>

</section>
<section anchor="defn" title="Definitions">
<t>This specification assumes terminology defined in the Security
Event Token specification <xref target="SET"/>, as well as the terms defined below:</t>

<t><list style="hanging">
  <t hangText='SET Transmitter'><vspace blankLines='0'/>
  A service provider that delivers SETs to other providers known
as SET Receivers.</t>
  <t hangText='SET Receiver'><vspace blankLines='0'/>
  A service provider that registers to receive SETs from an SET
Transmitter and provides an endpoint to receive SETs via HTTP POST.</t>
</list></t>

</section>
</section>
<section anchor="event_delivery" title="Event Delivery">

<section anchor="event_delivery_process" title="Event Delivery Process">
<t>When an Event occurs, the SET Transmitter constructs a SET
token <xref target="SET"/> that describes the Event.</t>

<t>How SETs are defined and the process by which Events are identified for 
SET Receivers is out-of-scope of this    specification.</t>

<t>When a SET is available for an SET Receiver, the SET Transmitter
attempts to deliver the SET based on the SET Receiver’s registered
delivery mechanism:</t>

<t><list style="symbols">
  <t>The SET Transmitter uses an HTTP/1.1 POST to the SET Receiver
endpoint to deliver the SET;</t>
  <t>Or, the SET Transmitter delivers the Event through a different
method not defined by this specification.</t>
</list></t>

<t>In Push-Based SET Delivery Using HTTP, SETs are delivered one at a
time using HTTP POST requests by an SET Transmitter to an SET
Receiver. The HTTP request body is a JSON Web Token <xref target="RFC7519"/>
with a <spanx style="verb">Content-Type</spanx> header of <spanx style="verb">application/secevent+jwt</spanx> as
defined in Section 2.2 and 6.2 of <xref target="SET"/>. Upon receipt, the 
SET Receiver acknowledges receipt with a response with HTTP 
Status 202, as described below in <xref target="httpPost"/>.</t>

<t>After successful (acknowledged) SET delivery, SET 
Transmitters SHOULD NOT be required to maintain or record SETs for 
recovery. Once a SET is acknowledged, the SET Receiver SHALL be 
responsible for retention and recovery.</t>

<t>Transmitted SETs SHOULD be self-validating (e.g. signed)
if there is a requirement to verify they were issued by the SET 
Transmitter at a later date when de-coupled from the original 
delivery where authenticity could be checked via the HTTP or 
TLS mutual authentication.</t>

<t>Upon receiving a SET, the SET Receiver reads the SET and validates 
it. The SET Receiver MUST acknowledge receipt to the SET Transmitter, using the 
defined acknowledgement or error method.</t>

<t>The SET Receiver SHALL NOT use the Event acknowledgement mechanism
to report Event errors other than relating to the parsing and validation
of the SET.</t>

</section>
<section anchor="httpPost" title="Push Delivery using HTTP">
<t>This method allows an SET Transmitter to use HTTP POST 
(Section 4.3.3 <xref target="RFC7231"/>) to deliver
SETs to a previously registered web callback URI supplied by the
SET Receiver as part of a configuration process 
(not defined by this document).</t>

<t>The SET to be delivered MAY be signed 
and/or encrypted as defined in <xref target="SET"/>.</t>

<t>The HTTP Content-Type (see 
Section 3.1.1.5 <xref target="RFC7231"/>) for the HTTP POST is 
<spanx style="verb">application/secevent+jwt</spanx> and SHALL consist of 
a single SET (see <xref target="SET"/>).
As per Section 5.3.2 <xref target="RFC7231"/>, the expected 
media type (<spanx style="verb">Accept</spanx> header) response is 
<spanx style="verb">application/json</spanx>.</t>

<t>To deliver an Event, the SET Transmitter generates an event 
delivery message and uses HTTP POST to the configured endpoint with
the appropriate <spanx style="verb">Accept</spanx> and 
<spanx style="verb">Content-Type</spanx> headers.</t>

<figure title="Example HTTP POST Request" anchor="postSet"><artwork><![CDATA[
POST /Events  HTTP/1.1

Host: notify.examplerp.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Type: application/secevent+jwt
eyJhbGciOiJub25lIn0
.
eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
.
]]></artwork></figure>

<t>Upon receipt of the request, the SET Receiver SHALL 
validate the JWT structure of the SET as defined in 
Section 7.2 <xref target="RFC7519"/>. The SET Receiver 
SHALL also validate the SET information as described
in Section 2 <xref target="SET"/>.</t>

<t>If the SET is determined to be valid, the SET Receiver SHALL
“acknowledge” successful submission by responding with HTTP Status
202 as <spanx style="verb">Accepted</spanx> 
(see Section 6.3.3 <xref target="RFC7231"/>).</t>

<t>In order
to maintain compatibility with other methods of transmission, the 
SET Receiver SHOULD NOT include an HTTP response body representation
of the submitted SET or what the SET’s pending status is when 
acknowledging success. In the case of an error (e.g. HTTP Status 400),
the purpose of the HTTP response body is to indicate any SET parsing, 
validation, or cryptographic errors.</t>

<t>The following is a non-normative example of a successful
receipt of a SET.</t>

<figure title="Example Successful Delivery Response" anchor="goodPostResponse"><artwork><![CDATA[
HTTP/1.1 202 Accepted
]]></artwork></figure>

<t>Note that the purpose of the “acknowledgement” response is to let the 
SET Transmitter know that a SET has been delivered and the 
information no longer needs to be retained by the SET Transmitter. 
Before acknowledgement, SET Receivers SHOULD ensure they have 
validated received SETs and retained them in a manner appropriate 
to information retention requirements appropriate to the SET 
event types signaled. The level and method of retention of SETs
by SET Receivers is out-of-scope of this specification.</t>

<t>In the Event of a general HTTP error condition, the SET Receiver
MAY respond with an appropriate HTTP Status code as defined in 
Section 6 <xref target="RFC7231"/>.</t>

<t>When the SET Receiver detects an error parsing or 
validating a received SET (as defined by <xref target="SET"/>), 
the SET Receiver SHALL indicate an HTTP Status 400 error with an 
error code as described in <xref target="errorResponse"/>.</t>

<t>The following is an example non-normative error 
response.</t>

<figure title="Example HTTP Status 400 Response" anchor="badPostResponse"><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "err":"dup",
  "description":"SET already received. Ignored."

}
]]></artwork></figure>

</section>
<section anchor="errorResponse" title="Error Response Handling">

<t>If a SET is invalid, the following error codes are defined:</t>

<texttable title="SET Errors" anchor="reqErrors">
      <ttcol align='left'>Err Value</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>json</c>
      <c>Invalid JSON object.</c>
      <c>jwtParse</c>
      <c>Invalid or unparsable JWT or JSON structure.</c>
      <c>jwtHdr</c>
      <c>In invalid JWT header was detected.</c>
      <c>jwtCrypto</c>
      <c>Unable to parse due to unsupported algorithm.</c>
      <c>jws</c>
      <c>Signature was not validated.</c>
      <c>jwe</c>
      <c>Unable to decrypt JWE encoded data.</c>
      <c>jwtAud</c>
      <c>Invalid audience value.</c>
      <c>jwtIss</c>
      <c>Issuer not recognized.</c>
      <c>setType</c>
      <c>An unexpected Event type was received.</c>
      <c>setParse</c>
      <c>Invalid structure was encountered such as an inability to parse or an incomplete set of Event claims.</c>
      <c>setData</c>
      <c>SET event claims incomplete or invalid.</c>
      <c>dup</c>
      <c>A duplicate SET was received and has been ignored.</c>
</texttable>

<t>An error response SHALL include a JSON
object which provides details about the error. The JSON object
includes the JSON attributes:</t>

<t><list style="hanging">
  <t hangText='err'><vspace blankLines='0'/>
  A value which is a keyword that 
describes the error (see <xref target="reqErrors"/>).
description</t>
  <t>A human-readable text that provides
additional diagnostic information.</t>
</list></t>

<t>When included as part of an HTTP Status 400 response, the above
JSON is the HTTP response body (see <xref target="badPostResponse"/>).</t>

</section>
</section>
<section anchor="aa" title="Authentication and Authorization">

<t>The SET delivery method described in this specification is
based upon HTTP and depends on the use of TLS and/or standard 
HTTP authentication and authorization schemes as per 
<xref target="RFC7235"/>. For example, the following
methodologies could be used among others:</t>

<t><list style="hanging">
  <t hangText='TLS Client Authentication'><vspace blankLines='0'/>
  Event delivery
endpoints MAY request TLS mutual client authentication. 
See Section 7.3 <xref target="RFC5246"/>.</t>
  <t hangText='Bearer Tokens'><vspace blankLines='0'/>
  Bearer tokens 
<xref target="RFC6750"/> MAY be used when combined with TLS and a token
framework such as OAuth 2.0 <xref target="RFC6749"/>. 
For security considerations regarding the use of bearer tokens in
SET delivery see <xref target="bearerConsiderations"/>.</t>
  <t hangText='Basic Authentication'><vspace blankLines='0'/>
  Usage of basic
authentication should be avoided due to its use of a single factor
that is based upon a relatively static, symmetric secret.
Implementers SHOULD combine the use of basic authentication with
other factors. The security considerations of HTTP BASIC, are well
documented in <xref target="RFC7617"/> and SHOULD be considered
along with using signed SETs (see SET Payload Authentication below).</t>
  <t hangText='SET Payload Authentication'><vspace blankLines='0'/>
  In scenarios 
where SETs are signed and
the delivery method is HTTP POST (see <xref target="httpPost"/>),
SET Receivers MAY elect to use Basic Authentication or not 
to use HTTP or TLS based authentication at all. See 
<xref target="payloadAuthentication"/> for considerations.</t>
</list></t>

<t>As per Section 4.1 of <xref target="RFC7235"/>, a SET
delivery endpoint SHALL indicate supported HTTP authentication 
schemes via the <spanx style="verb">WWW-Authenticate</spanx> header.</t>

<t>Because SET Delivery describes a simple function, authorization
for the ability to pick-up or deliver SETs can be derived by
considering the identity of the SET issuer, or via an authentication
method above. This specification considers authentication as a
feature to prevent denial-of-service attacks. Because SETs are
not commands (see ), SET Receivers are free to ignore SETs that 
are not of interest.</t>

<t>For illustrative purposes only, SET delivery examples show an OAuth2
bearer token value <xref target="RFC6750"/> in the authorization header.
This is not intended to imply that bearer tokens are
preferred. However, the use of bearer tokens in the specification does
reflect common practice.</t>

<section anchor="authzTokens" title="Use of Tokens as Authorizations">
<t>When using bearer tokens or proof-of-possession tokens that
represent an authorization grant such as issued by OAuth (see <xref target="RFC6749"/>), implementers SHOULD consider the type of
authorization granted, any authorized scopes (see Section 3.3 of <xref target="RFC6749"/>), and the security subject(s) that SHOULD be mapped
from the authorization when considering local access control rules.
Section 6 of the OAuth Assertions draft <xref target="RFC7521"/>, documents common scenarios for
authorization including:</t>

<t><list style="symbols">
  <t>Clients using an assertion to authenticate and/or act on behalf
of itself;</t>
  <t>Clients acting on behalf of a user; and,</t>
  <t>A Client acting on behalf of an anonymous user (e.g., see next
section).</t>
</list></t>

<t>When using OAuth authorization tokens, implementers MUST take
into account the threats and countermeasures documented in the
security considerations for the use of client authorizations (see
Section 8 of <xref target="RFC7521"/>). When using
other token formats or frameworks, implementers MUST take into account
similar threats and countermeasures, especially those documented by
the relevant specifications.</t>

</section>
</section>
<section anchor="Security" title="Security Considerations">

<section anchor="payloadAuthentication" title="Authentication Using Signed SETs">
<t>In scenarios where HTTP authorization or TLS mutual authentication
are not used or are considered weak, JWS signed SETs SHOULD be 
used (see <xref target="RFC7515"/> and 
Security Considerations <xref target="SET"/>). This enables the SET Receiver
to validate that the SET issuer is authorized to deliver SETs.</t>

</section>
<section anchor="http-considerations" title="HTTP Considerations">
<t>SET delivery depends on the use of Hypertext Transfer Protocol and thus
subject to the security considerations of HTTP Section 9 <xref target="RFC7230"/> and its related specifications.</t>

<t>As stated in Section 2.7.1 <xref target="RFC7230"/>, an 
HTTP requestor MUST NOT generate the <spanx style="verb">userinfo</spanx>
(i.e., username and password) component (and its “@” delimiter) when
an “http” URI reference is generated with a message as they are now
disallowed in HTTP.</t>

</section>
<section anchor="tls-support-considerations" title="TLS Support Considerations">
<t>SETs contain sensitive information that is considered PII
(e.g. subject claims). Therefore, SET Transmitters and
SET Receivers MUST require the use of a transport-layer 
security mechanism. Event delivery endpoints MUST support TLS 
1.2 <xref target="RFC5246"/> and MAY support additional 
transport-layer mechanisms meeting its security requirements. 
When using TLS, the client MUST perform a TLS/SSL server
certificate check, per <xref target="RFC6125"/>. Implementation
security considerations for TLS can be found in “Recommendations for
Secure Use of TLS and DTLS” <xref target="RFC7525"/>.</t>

</section>
<section anchor="authorization-token-considerations" title="Authorization Token Considerations">
<t>When using authorization tokens such as those issued by OAuth 2.0
<xref target="RFC6749"/>, implementers MUST take into account threats
and countermeasures documented in Section 8 of <xref target="RFC7521"/>.</t>

<section anchor="bearerConsiderations" title="Bearer Token Considerations">
<t>Due to the possibility of interception, Bearer tokens MUST be 
exchanged using TLS.</t>

<t>Bearer tokens MUST have a limited lifetime that can be determined
directly or indirectly (e.g., by checking with a validation service)
by the service provider. By expiring tokens, clients are forced to
obtain a new token (which usually involves re-authentication) for
continued authorized access. For example, in OAuth2, a client MAY use
OAuth token refresh to obtain a new bearer token after authenticating
to an authorization server. See Section 6 of <xref target="RFC6749"/>.</t>

<t>Implementations supporting OAuth bearer tokens need to factor in
security considerations of this authorization method 
<xref target="RFC7521"/>. Since security is only as good
as the weakest link, implementers also need to consider authentication
choices coupled with OAuth bearer tokens. The security considerations
of the default authentication method for OAuth bearer tokens, HTTP
BASIC, are well documented in 
<xref target="RFC7617"/>, therefore implementers
are encouraged to prefer stronger authentication methods. Designating
the specific methods of authentication and authorization are
out-of-scope for the delivery of SET tokens, however this 
information is provided as a resource to implementers.</t>

</section>
</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>If a SET needs to be retained for audit purposes, JWS MAY 
be used to provide verification of its authenticity.</t>

<t>When sharing personally identifiable information or information
that is otherwise considered confidential to affected users, SET 
Transmitters and Receivers MUST have the appropriate legal agreements
and user consent or terms of service in place.</t>

<t>The propagation of subject identifiers can be perceived as personally
identifiable information. Where possible, SET Transmitters and Receivers
SHOULD devise approaches that prevent propagation — for example, the
passing of a hash value that requires the subscriber to already know
the subject.</t>

</section>
<section anchor="IANA" title="IANA Considerations">

<t>There are no IANA considerations.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="SET" target='https://www.rfc-editor.org/info/rfc8417'>
<front>
<title>Security Event Token (SET)</title>
<author initials='P.' surname='Hunt' fullname='P. Hunt' role='editor'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='W.' surname='Denniss' fullname='W. Denniss'><organization /></author>
<author initials='M.' surname='Ansari' fullname='M. Ansari'><organization /></author>
<date year='2018' month='July' />
<abstract><t>This specification defines the Security Event Token (SET) data structure.  A SET describes statements of fact from the perspective of an issuer about a subject.  These statements of fact represent an event that occurred directly to or about a security subject, for example, a statement about the issuance or revocation of a token on behalf of a subject.  This specification is intended to enable representing security- and identity-related events.  A SET is a JSON Web Token (JWT), which can be optionally signed and/or encrypted. SETs can be distributed via protocols such as HTTP.</t></abstract>
</front>
<seriesInfo name='RFC' value='8417'/>
<seriesInfo name='DOI' value='10.17487/RFC8417'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC7235" target='https://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC6750" target='https://www.rfc-editor.org/info/rfc6750'>
<front>
<title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='D.' surname='Hardt' fullname='D. Hardt'><organization /></author>
<date year='2012' month='October' />
<abstract><t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a &quot;bearer&quot;) can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6750'/>
<seriesInfo name='DOI' value='10.17487/RFC6750'/>
</reference>



<reference  anchor="RFC6749" target='https://www.rfc-editor.org/info/rfc6749'>
<front>
<title>The OAuth 2.0 Authorization Framework</title>
<author initials='D.' surname='Hardt' fullname='D. Hardt' role='editor'><organization /></author>
<date year='2012' month='October' />
<abstract><t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6749'/>
<seriesInfo name='DOI' value='10.17487/RFC6749'/>
</reference>



<reference  anchor="RFC7617" target='https://www.rfc-editor.org/info/rfc7617'>
<front>
<title>The 'Basic' HTTP Authentication Scheme</title>
<author initials='J.' surname='Reschke' fullname='J. Reschke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This document defines the &quot;Basic&quot; Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t></abstract>
</front>
<seriesInfo name='RFC' value='7617'/>
<seriesInfo name='DOI' value='10.17487/RFC7617'/>
</reference>



<reference  anchor="RFC7521" target='https://www.rfc-editor.org/info/rfc7521'>
<front>
<title>Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants</title>
<author initials='B.' surname='Campbell' fullname='B. Campbell'><organization /></author>
<author initials='C.' surname='Mortimore' fullname='C. Mortimore'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='Y.' surname='Goland' fullname='Y. Goland'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification provides a framework for the use of assertions with OAuth 2.0 in the form of a new client authentication mechanism and a new authorization grant type.  Mechanisms are specified for transporting assertions during interactions with a token endpoint; general processing rules are also specified.</t><t>The intent of this specification is to provide a common framework for OAuth 2.0 to interwork with other identity systems using assertions and to provide alternative client authentication mechanisms.</t><t>Note that this specification only defines abstract message flows and processing rules.  In order to be implementable, companion specifications are necessary to provide the corresponding concrete instantiations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7521'/>
<seriesInfo name='DOI' value='10.17487/RFC7521'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6125" target='https://www.rfc-editor.org/info/rfc6125'>
<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<author initials='J.' surname='Hodges' fullname='J. Hodges'><organization /></author>
<date year='2011' month='March' />
<abstract><t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6125'/>
<seriesInfo name='DOI' value='10.17487/RFC6125'/>
</reference>



<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>




    </references>



<section anchor="other-streaming-specifications" title="Other Streaming Specifications">
<t>[[EDITORS NOTE: This section to be removed prior to publication]]</t>

<t>The following pub/sub, queuing, streaming systems were reviewed 
as possible solutions or as input to the current draft:</t>

<t>XMPP Events</t>

<t>The WG considered the XMPP events ands its ability to provide a single
messaging solution without the need for both polling and push modes.
The feeling was the size and methodology of XMPP was to far apart from
the current capabilities of the SECEVENTs community which focuses in
on HTTP based service delivery and authorization.</t>

<t>Amazon Simple Notification Service</t>

<t>Simple Notification Service, is a pub/sub messaging product from 
AWS. SNS supports a variety of subscriber types: HTTP/HTTPS endpoints, 
AWS Lambda functions, email addresses (as JSON or plain text), phone 
numbers (via SMS), and AWS SQS standard queues. It doesn’t directly 
support pull, but subscribers can get the pull model by creating an 
SQS queue and subscribing it to the topic. Note that this puts the 
cost of pull support back onto the subscriber, just as it is in the 
push model. It is not clear that one way is strictly better than the 
other; larger, sophisticated developers may be happy to own message 
persistence so they can have their own internal delivery guarantees. 
The long tail of OIDC clients may not care about that, or may fail 
to get it right. Regardless, I think we can learn something from the 
Delivery Policies supported by SNS, as well as the delivery controls 
that SQS offers (e.g. Visibility Timeout, Dead-Letter Queues). I’m 
not suggesting that we need all of these things in the spec, but 
they give an idea of what features people have found useful.</t>

<t>Other information:</t>

<t><list style="symbols">
  <t>API Reference: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html</t>
  <t>Visibility Timeouts: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html</t>
</list></t>

<t>Apache Kafka</t>

<t>Apache Kafka is an Apache open source project based upon TCP for 
distributed streaming. It prescribes some interesting general 
purpose features that seem to extend far beyond the simpler 
streaming model SECEVENTs is after. A comment from MS has been that 
Kafka does an acknowledge with poll combination event which seems 
to be a performance advantage. See: https://kafka.apache.org/intro</t>

<t>Google Pub/Sub</t>

<t>Google Pub Sub system favours a model whereby polling and acknowledgement
of events is done as separate endpoints as separate functions.</t>

<t>Information:</t>

<t><list style="symbols">
  <t>Cloud Overview - https://cloud.google.com/pubsub/</t>
  <t>Subscriber Overview - https://cloud.google.com/pubsub/docs/subscriber</t>
  <t>Subscriber Pull(poll) - https://cloud.google.com/pubsub/docs/pull</t>
</list></t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>The editors would like to thanks the members of the SCIM WG which 
began discussions of provisioning events starting with: draft-hunt-scim-notify-00 in 2015.</t>

<t>The editors would like to thank the authors of draft-ietf-secevent-delivery-02,
on which this draft is based.</t>

<t>The editor would like to thank the participants in the the SECEVENTS
working group for their support of this specification.</t>

</section>
<section anchor="change-log" title="Change Log">
<t>Draft 00 - AB - Based on draft-ietf-secevent-delivery-02 with the 
following changes:</t>

<t><list style="symbols">
  <t>Renamed to “Push-Based SET Token Delivery Using HTTP”</t>
  <t>Removed references to the HTTP Polling delivery method.</t>
  <t>Removed informative reference to RFC6202.</t>
</list></t>

<t>Draft 01 - AB</t>

<t><list style="symbols">
  <t>Converted to Markdown</t>
  <t>Removed NumericDate definition (unused).</t>
  <t>Removed Event and Subject definitions (defined in SET).</t>
  <t>Removed text related to Event Streams.</t>
  <t>Removed Mike Jones and Phil Hunt as editors, per respective requests.</t>
  <t>Fixed area and workgroup to match secevent.</t>
  <t>Renamed Event Transmitter and Event Receiver to SET Transmitter and SET Receiver, respectively.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
D3nADKvPLBErWi+AabaVLrvifwGGv0pLGFIAAA==

-->

</rfc>

