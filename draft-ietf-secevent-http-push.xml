<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-secevent-http-push-00" category="std">

  <front>
    <title abbrev="draft-ietf-secevent-http-push">Push-Based SET Token Delivery Using HTTP</title>

    <author initials="A." surname="Backman" fullname="Annabelle Backman" role="editor">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt">
      <organization>Oracle</organization>
      <address>
        <email>phil.hunt@yahoo.com</email>
      </address>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization>Cisco</organization>
      <address>
        <email>morteza.ansari@cisco.com</email>
      </address>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization>Microsoft</organization>
      <address>
        <email>tonynad@microsoft.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="27"/>

    <area>Security</area>
    <workgroup>Security Events Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines how a series of security event tokens 
(SETs) may be delivered to a previously registered receiver 
using HTTP POST over TLS initiated as a push to the receiver.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction and Overview">
<t>This specification defines how SETs (see
<xref target="SET"/>) can be transmitted to a previously 
registered Event Receiver using HTTP <xref target="RFC7231"/> over TLS. The
specification defines a method to push SETs via HTTP POST.</t>

<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
they appear in all capitals, as shown here.</t>

<t>For purposes of readability examples are not URL encoded.
Implementers MUST percent encode URLs as described in Section 2.1 of
<xref target="RFC3986"/>.</t>

<t>Throughout this documents all figures MAY contain spaces and extra
line-wrapping for readability and space limitations. Similarly, some
URI’s contained within examples, have been shortened for space and
readability reasons.</t>

</section>
<section anchor="defn" title="Definitions">
<t>This specification assumes terminology defined in the Security
Event Token specification <xref target="SET"/>, as well as the terms defined below:</t>

<t><list style="hanging">
  <t hangText='Event Transmitter'><vspace blankLines='0'/>
  A service provider that delivers SETs to other providers known
as Event Receivers.</t>
  <t hangText='Event Receiver'><vspace blankLines='0'/>
  A service provider that registers to receive SETs from an Event
Transmitter and provides an endpoint to receive SETs via HTTP POST.</t>
</list></t>

</section>
</section>
<section anchor="event_delivery" title="Event Delivery">

<section anchor="event_delivery_process" title="Event Delivery Process">
<t>When an Event occurs, the Event Transmitter constructs a SET
token <xref target="SET"/> that describes the Event.</t>

<t>How SETs are defined and the process by which Events are identified for 
Event Receivers is out-of-scope of this    specification.</t>

<t>When a SET is available for an Event Receiver, the Event Transmitter
attempts to deliver the SET based on the Event Receiver’s registered
delivery mechanism:</t>

<t><list style="symbols">
  <t>The Event Transmitter uses an HTTP/1.1 POST to the Event Receiver
endpoint to deliver the SET;</t>
  <t>Or, the Event Transmitter delivers the Event through a different
method not defined by this specification.</t>
</list></t>

<t>In Push-Based SET Delivery Using HTTP, SETs are delivered one at a
time using HTTP POST requests by an Event Transmitter to an Event
Receiver. The HTTP request body is a JSON Web Token <xref target="RFC7519"/>
with a <spanx style="verb">Content-Type</spanx> header of <spanx style="verb">application/secevent+jwt</spanx> as
defined in Section 2.2 and 6.2 of <xref target="SET"/>. Upon receipt, the 
Event Receiver acknowledges receipt with a response with HTTP 
Status 202, as described below in <xref target="httpPost"/>.</t>

<t>After successful (acknowledged) SET delivery, Event 
Transmitters SHOULD NOT be required to maintain or record SETs for 
recovery. Once a SET is acknowledged, the Event Receiver SHALL be 
responsible for retention and recovery.</t>

<t>Transmitted SETs SHOULD be self-validating (e.g. signed)
if there is a requirement to verify they were issued by the Event 
Transmitter at a later date when de-coupled from the original 
delivery where authenticity could be checked via the HTTP or 
TLS mutual authentication.</t>

<t>Upon receiving a SET, the Event Receiver reads the SET and validates 
it. The Event Receiver MUST acknowledge receipt to the Event Transmitter, using the 
defined acknowledgement or error method.</t>

<t>The Event Receiver SHALL NOT use the Event acknowledgement mechanism
to report Event errors other than relating to the parsing and validation
of the SET.</t>

</section>
<section anchor="httpPost" title="Push Delivery using HTTP">
<t>This method allows an Event Transmitter to use HTTP POST 
(Section 4.3.3 <xref target="RFC7231"/>) to deliver
SETs to a previously registered web callback URI supplied by the
Event Receiver as part of a configuration process 
(not defined by this document).</t>

<t>The SET to be delivered MAY be signed 
and/or encrypted as defined in <xref target="SET"/>.</t>

<t>The HTTP Content-Type (see 
Section 3.1.1.5 <xref target="RFC7231"/>) for the HTTP POST is 
<spanx style="verb">application/secevent+jwt</spanx> and SHALL consist of 
a single SET (see <xref target="SET"/>).
As per Section 5.3.2 <xref target="RFC7231"/>, the expected 
media type (<spanx style="verb">Accept</spanx> header) response is 
<spanx style="verb">application/json</spanx>.</t>

<t>To deliver an Event, the Event Transmitter generates an event 
delivery message and uses HTTP POST to the configured endpoint with
the appropriate <spanx style="verb">Accept</spanx> and 
<spanx style="verb">Content-Type</spanx> headers.</t>

<figure title="Example HTTP POST Request" anchor="postSet"><artwork><![CDATA[
POST /Events  HTTP/1.1

Host: notify.examplerp.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Type: application/secevent+jwt
eyJhbGciOiJub25lIn0
.
eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
.
]]></artwork></figure>

<t>Upon receipt of the request, the Event Receiver SHALL 
validate the JWT structure of the SET as defined in 
Section 7.2 <xref target="RFC7519"/>. The Event Receiver 
SHALL also validate the SET information as described
in Section 2 <xref target="SET"/>.</t>

<t>If the SET is determined to be valid, the Event Receiver SHALL
“acknowledge” successful submission by responding with HTTP Status
202 as <spanx style="verb">Accepted</spanx> 
(see Section 6.3.3 <xref target="RFC7231"/>).</t>

<t>In order
to maintain compatibility with other methods of transmission, the 
Event Receiver SHOULD NOT include an HTTP response body representation
of the submitted SET or what the SET’s pending status is when 
acknowledging success. In the case of an error (e.g. HTTP Status 400),
the purpose of the HTTP response body is to indicate any SET parsing, 
validation, or cryptographic errors.</t>

<t>The following is a non-normative example of a successful
receipt of a SET.</t>

<figure title="Example Successful Delivery Response" anchor="goodPostResponse"><artwork><![CDATA[
HTTP/1.1 202 Accepted
]]></artwork></figure>

<t>Note that the purpose of the “acknowledgement” response is to let the 
Event Transmitter know that a SET has been delivered and the 
information no longer needs to be retained by the Event Transmitter. 
Before acknowledgement, Event Receivers SHOULD ensure they have 
validated received SETs and retained them in a manner appropriate 
to information retention requirements appropriate to the SET 
event types signaled. The level and method of retention of SETs
by Event Receivers is out-of-scope of this specification.</t>

<t>In the Event of a general HTTP error condition, the Event Receiver
MAY respond with an appropriate HTTP Status code as defined in 
Section 6 <xref target="RFC7231"/>.</t>

<t>When the Event Receiver detects an error parsing or 
validating a received SET (as defined by <xref target="SET"/>), 
the Event Receiver SHALL indicate an HTTP Status 400 error with an 
error code as described in <xref target="errorResponse"/>.</t>

<t>The following is an example non-normative error 
response.</t>

<figure title="Example HTTP Status 400 Response" anchor="badPostResponse"><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "err":"dup",
  "description":"SET already received. Ignored."

}
]]></artwork></figure>

</section>
<section anchor="errorResponse" title="Error Response Handling">

<t>If a SET is invalid, the following error codes are defined:</t>

<texttable title="SET Errors" anchor="reqErrors">
      <ttcol align='left'>Err Value</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>json</c>
      <c>Invalid JSON object.</c>
      <c>jwtParse</c>
      <c>Invalid or unparsable JWT or JSON structure.</c>
      <c>jwtHdr</c>
      <c>In invalid JWT header was detected.</c>
      <c>jwtCrypto</c>
      <c>Unable to parse due to unsupported algorithm.</c>
      <c>jws</c>
      <c>Signature was not validated.</c>
      <c>jwe</c>
      <c>Unable to decrypt JWE encoded data.</c>
      <c>jwtAud</c>
      <c>Invalid audience value.</c>
      <c>jwtIss</c>
      <c>Issuer not recognized.</c>
      <c>setType</c>
      <c>An unexpected Event type was received.</c>
      <c>setParse</c>
      <c>Invalid structure was encountered such as an inability to parse or an incomplete set of Event claims.</c>
      <c>setData</c>
      <c>SET event claims incomplete or invalid.</c>
      <c>dup</c>
      <c>A duplicate SET was received and has been ignored.</c>
</texttable>

<t>An error response SHALL include a JSON
object which provides details about the error. The JSON object
includes the JSON attributes:</t>

<t><list style="hanging">
  <t hangText='err'><vspace blankLines='0'/>
  A value which is a keyword that 
describes the error (see <xref target="reqErrors"/>).
description</t>
  <t>A human-readable text that provides
additional diagnostic information.</t>
</list></t>

<t>When included as part of an HTTP Status 400 response, the above
JSON is the HTTP response body (see <xref target="badPostResponse"/>).</t>

</section>
</section>
<section anchor="aa" title="Authentication and Authorization">

<t>The SET delivery method described in this specification is
based upon HTTP and depends on the use of TLS and/or standard 
HTTP authentication and authorization schemes as per 
<xref target="RFC7235"/>. For example, the following
methodologies could be used among others:</t>

<t><list style="hanging">
  <t hangText='TLS Client Authentication'><vspace blankLines='0'/>
  Event delivery
endpoints MAY request TLS mutual client authentication. 
See Section 7.3 <xref target="RFC5246"/>.</t>
  <t hangText='Bearer Tokens'><vspace blankLines='0'/>
  Bearer tokens 
<xref target="RFC6750"/> MAY be used when combined with TLS and a token
framework such as OAuth 2.0 <xref target="RFC6749"/>. 
For security considerations regarding the use of bearer tokens in
SET delivery see <xref target="bearerConsiderations"/>.</t>
  <t hangText='Basic Authentication'><vspace blankLines='0'/>
  Usage of basic
authentication should be avoided due to its use of a single factor
that is based upon a relatively static, symmetric secret.
Implementers SHOULD combine the use of basic authentication with
other factors. The security considerations of HTTP BASIC, are well
documented in <xref target="RFC7617"/> and SHOULD be considered
along with using signed SETs (see SET Payload Authentication below).</t>
  <t hangText='SET Payload Authentication'><vspace blankLines='0'/>
  In scenarios 
where SETs are signed and
the delivery method is HTTP POST (see <xref target="httpPost"/>),
Event Receivers MAY elect to use Basic Authentication or not 
to use HTTP or TLS based authentication at all. See 
<xref target="payloadAuthentication"/> for considerations.</t>
</list></t>

<t>As per Section 4.1 of <xref target="RFC7235"/>, a SET
delivery endpoint SHALL indicate supported HTTP authentication 
schemes via the <spanx style="verb">WWW-Authenticate</spanx> header.</t>

<t>Because SET Delivery describes a simple function, authorization
for the ability to pick-up or deliver SETs can be derived by
considering the identity of the SET issuer, or via an authentication
method above. This specification considers authentication as a
feature to prevent denial-of-service attacks. Because SETs are
not commands (see ), Event Receivers are free to ignore SETs that 
are not of interest.</t>

<t>For illustrative purposes only, SET delivery examples show an OAuth2
bearer token value <xref target="RFC6750"/> in the authorization header.
This is not intended to imply that bearer tokens are
preferred. However, the use of bearer tokens in the specification does
reflect common practice.</t>

<section anchor="authzTokens" title="Use of Tokens as Authorizations">
<t>When using bearer tokens or proof-of-possession tokens that
represent an authorization grant such as issued by OAuth (see <xref target="RFC6749"/>), implementers SHOULD consider the type of
authorization granted, any authorized scopes (see Section 3.3 of <xref target="RFC6749"/>), and the security subject(s) that SHOULD be mapped
from the authorization when considering local access control rules.
Section 6 of the OAuth Assertions draft <xref target="RFC7521"/>, documents common scenarios for
authorization including:</t>

<t><list style="symbols">
  <t>Clients using an assertion to authenticate and/or act on behalf
of itself;</t>
  <t>Clients acting on behalf of a user; and,</t>
  <t>A Client acting on behalf of an anonymous user (e.g., see next
section).</t>
</list></t>

<t>When using OAuth authorization tokens, implementers MUST take
into account the threats and countermeasures documented in the
security considerations for the use of client authorizations (see
Section 8 of <xref target="RFC7521"/>). When using
other token formats or frameworks, implementers MUST take into account
similar threats and countermeasures, especially those documented by
the relevant specifications.</t>

</section>
</section>
<section anchor="Security" title="Security Considerations">

<section anchor="payloadAuthentication" title="Authentication Using Signed SETs">
<t>In scenarios where HTTP authorization or TLS mutual authentication
are not used or are considered weak, JWS signed SETs SHOULD be 
used (see <xref target="RFC7515"/> and 
Security Considerations <xref target="SET"/>). This enables the Event Receiver
to validate that the SET issuer is authorized to deliver SETs.</t>

</section>
<section anchor="http-considerations" title="HTTP Considerations">
<t>SET delivery depends on the use of Hypertext Transfer Protocol and thus
subject to the security considerations of HTTP Section 9 <xref target="RFC7230"/> and its related specifications.</t>

<t>As stated in Section 2.7.1 <xref target="RFC7230"/>, an 
HTTP requestor MUST NOT generate the <spanx style="verb">userinfo</spanx>
(i.e., username and password) component (and its “@” delimiter) when
an “http” URI reference is generated with a message as they are now
disallowed in HTTP.</t>

</section>
<section anchor="tls-support-considerations" title="TLS Support Considerations">
<t>SETs contain sensitive information that is considered PII
(e.g. subject claims). Therefore, Event Transmitters and
Event Receivers MUST require the use of a transport-layer 
security mechanism. Event delivery endpoints MUST support TLS 
1.2 <xref target="RFC5246"/> and MAY support additional 
transport-layer mechanisms meeting its security requirements. 
When using TLS, the client MUST perform a TLS/SSL server
certificate check, per <xref target="RFC6125"/>. Implementation
security considerations for TLS can be found in “Recommendations for
Secure Use of TLS and DTLS” <xref target="RFC7525"/>.</t>

</section>
<section anchor="authorization-token-considerations" title="Authorization Token Considerations">
<t>When using authorization tokens such as those issued by OAuth 2.0
<xref target="RFC6749"/>, implementers MUST take into account threats
and countermeasures documented in Section 8 of <xref target="RFC7521"/>.</t>

<section anchor="bearerConsiderations" title="Bearer Token Considerations">
<t>Due to the possibility of interception, Bearer tokens MUST be 
exchanged using TLS.</t>

<t>Bearer tokens MUST have a limited lifetime that can be determined
directly or indirectly (e.g., by checking with a validation service)
by the service provider. By expiring tokens, clients are forced to
obtain a new token (which usually involves re-authentication) for
continued authorized access. For example, in OAuth2, a client MAY use
OAuth token refresh to obtain a new bearer token after authenticating
to an authorization server. See Section 6 of <xref target="RFC6749"/>.</t>

<t>Implementations supporting OAuth bearer tokens need to factor in
security considerations of this authorization method 
<xref target="RFC7521"/>. Since security is only as good
as the weakest link, implementers also need to consider authentication
choices coupled with OAuth bearer tokens. The security considerations
of the default authentication method for OAuth bearer tokens, HTTP
BASIC, are well documented in 
<xref target="RFC7617"/>, therefore implementers
are encouraged to prefer stronger authentication methods. Designating
the specific methods of authentication and authorization are
out-of-scope for the delivery of SET tokens, however this 
information is provided as a resource to implementers.</t>

</section>
</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>If a SET needs to be retained for audit purposes, JWS MAY 
be used to provide verification of its authenticity.</t>

<t>When sharing personally identifiable information or information
that is otherwise considered confidential to affected users, Event 
Transmitters and Receivers MUST have the appropriate legal agreements
and user consent or terms of service in place.</t>

<t>The propagation of subject identifiers can be perceived as personally
identifiable information. Where possible, Event Transmitters and Receivers
SHOULD devise approaches that prevent propagation — for example, the
passing of a hash value that requires the subscriber to already know
the subject.</t>

</section>
<section anchor="IANA" title="IANA Considerations">

<t>There are no IANA considerations.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="SET" target='https://www.rfc-editor.org/info/rfc8417'>
<front>
<title>Security Event Token (SET)</title>
<author initials='P.' surname='Hunt' fullname='P. Hunt' role='editor'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='W.' surname='Denniss' fullname='W. Denniss'><organization /></author>
<author initials='M.' surname='Ansari' fullname='M. Ansari'><organization /></author>
<date year='2018' month='July' />
<abstract><t>This specification defines the Security Event Token (SET) data structure.  A SET describes statements of fact from the perspective of an issuer about a subject.  These statements of fact represent an event that occurred directly to or about a security subject, for example, a statement about the issuance or revocation of a token on behalf of a subject.  This specification is intended to enable representing security- and identity-related events.  A SET is a JSON Web Token (JWT), which can be optionally signed and/or encrypted. SETs can be distributed via protocols such as HTTP.</t></abstract>
</front>
<seriesInfo name='RFC' value='8417'/>
<seriesInfo name='DOI' value='10.17487/RFC8417'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC7235" target='https://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC6750" target='https://www.rfc-editor.org/info/rfc6750'>
<front>
<title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='D.' surname='Hardt' fullname='D. Hardt'><organization /></author>
<date year='2012' month='October' />
<abstract><t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a &quot;bearer&quot;) can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6750'/>
<seriesInfo name='DOI' value='10.17487/RFC6750'/>
</reference>



<reference  anchor="RFC6749" target='https://www.rfc-editor.org/info/rfc6749'>
<front>
<title>The OAuth 2.0 Authorization Framework</title>
<author initials='D.' surname='Hardt' fullname='D. Hardt' role='editor'><organization /></author>
<date year='2012' month='October' />
<abstract><t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6749'/>
<seriesInfo name='DOI' value='10.17487/RFC6749'/>
</reference>



<reference  anchor="RFC7617" target='https://www.rfc-editor.org/info/rfc7617'>
<front>
<title>The 'Basic' HTTP Authentication Scheme</title>
<author initials='J.' surname='Reschke' fullname='J. Reschke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This document defines the &quot;Basic&quot; Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t></abstract>
</front>
<seriesInfo name='RFC' value='7617'/>
<seriesInfo name='DOI' value='10.17487/RFC7617'/>
</reference>



<reference  anchor="RFC7521" target='https://www.rfc-editor.org/info/rfc7521'>
<front>
<title>Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants</title>
<author initials='B.' surname='Campbell' fullname='B. Campbell'><organization /></author>
<author initials='C.' surname='Mortimore' fullname='C. Mortimore'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='Y.' surname='Goland' fullname='Y. Goland'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification provides a framework for the use of assertions with OAuth 2.0 in the form of a new client authentication mechanism and a new authorization grant type.  Mechanisms are specified for transporting assertions during interactions with a token endpoint; general processing rules are also specified.</t><t>The intent of this specification is to provide a common framework for OAuth 2.0 to interwork with other identity systems using assertions and to provide alternative client authentication mechanisms.</t><t>Note that this specification only defines abstract message flows and processing rules.  In order to be implementable, companion specifications are necessary to provide the corresponding concrete instantiations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7521'/>
<seriesInfo name='DOI' value='10.17487/RFC7521'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6125" target='https://www.rfc-editor.org/info/rfc6125'>
<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<author initials='J.' surname='Hodges' fullname='J. Hodges'><organization /></author>
<date year='2011' month='March' />
<abstract><t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6125'/>
<seriesInfo name='DOI' value='10.17487/RFC6125'/>
</reference>



<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>




    </references>



<section anchor="other-streaming-specifications" title="Other Streaming Specifications">
<t>[[EDITORS NOTE: This section to be removed prior to publication]]</t>

<t>The following pub/sub, queuing, streaming systems were reviewed 
as possible solutions or as input to the current draft:</t>

<t>XMPP Events</t>

<t>The WG considered the XMPP events ands its ability to provide a single
messaging solution without the need for both polling and push modes.
The feeling was the size and methodology of XMPP was to far apart from
the current capabilities of the SECEVENTs community which focuses in
on HTTP based service delivery and authorization.</t>

<t>Amazon Simple Notification Service</t>

<t>Simple Notification Service, is a pub/sub messaging product from 
AWS. SNS supports a variety of subscriber types: HTTP/HTTPS endpoints, 
AWS Lambda functions, email addresses (as JSON or plain text), phone 
numbers (via SMS), and AWS SQS standard queues. It doesn’t directly 
support pull, but subscribers can get the pull model by creating an 
SQS queue and subscribing it to the topic. Note that this puts the 
cost of pull support back onto the subscriber, just as it is in the 
push model. It is not clear that one way is strictly better than the 
other; larger, sophisticated developers may be happy to own message 
persistence so they can have their own internal delivery guarantees. 
The long tail of OIDC clients may not care about that, or may fail 
to get it right. Regardless, I think we can learn something from the 
Delivery Policies supported by SNS, as well as the delivery controls 
that SQS offers (e.g. Visibility Timeout, Dead-Letter Queues). I’m 
not suggesting that we need all of these things in the spec, but 
they give an idea of what features people have found useful.</t>

<t>Other information:</t>

<t><list style="symbols">
  <t>API Reference: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html</t>
  <t>Visibility Timeouts: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html</t>
</list></t>

<t>Apache Kafka</t>

<t>Apache Kafka is an Apache open source project based upon TCP for 
distributed streaming. It prescribes some interesting general 
purpose features that seem to extend far beyond the simpler 
streaming model SECEVENTs is after. A comment from MS has been that 
Kafka does an acknowledge with poll combination event which seems 
to be a performance advantage. See: https://kafka.apache.org/intro</t>

<t>Google Pub/Sub</t>

<t>Google Pub Sub system favours a model whereby polling and acknowledgement
of events is done as separate endpoints as separate functions.</t>

<t>Information:</t>

<t><list style="symbols">
  <t>Cloud Overview - https://cloud.google.com/pubsub/</t>
  <t>Subscriber Overview - https://cloud.google.com/pubsub/docs/subscriber</t>
  <t>Subscriber Pull(poll) - https://cloud.google.com/pubsub/docs/pull</t>
</list></t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>The editors would like to thanks the members of the SCIM WG which 
began discussions of provisioning events starting with: draft-hunt-scim-notify-00 in 2015.</t>

<t>The editors would like to thank the authors of draft-ietf-secevent-delivery-02,
on which this draft is based.</t>

<t>The editor would like to thank the participants in the the SECEVENTS
working group for their support of this specification.</t>

</section>
<section anchor="change-log" title="Change Log">
<t>Draft 00 - AB - Based on draft-ietf-secevent-delivery-02 with the 
following changes:</t>

<t><list style="symbols">
  <t>Renamed to “Push-Based SET Token Delivery Using HTTP”</t>
  <t>Removed references to the HTTP Polling delivery method.</t>
  <t>Removed informative reference to RFC6202.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
sIbW7/W74n8BSRAk3uJQAAA=

-->

</rfc>

