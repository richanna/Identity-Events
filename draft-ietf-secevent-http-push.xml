<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-secevent-http-push-00" category="std">

  <front>
    <title abbrev="draft-ietf-secevent-http-push">Push-Based SET Token Delivery Using HTTP</title>

    <author initials="A." surname="Backman" fullname="Annabelle Backman" role="editor">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt">
      <organization>Oracle</organization>
      <address>
        <email>phil.hunt@yahoo.com</email>
      </address>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization>Cisco</organization>
      <address>
        <email>morteza.ansari@cisco.com</email>
      </address>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization>Microsoft</organization>
      <address>
        <email>tonynad@microsoft.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="27"/>

    <area>Security</area>
    <workgroup>Security Events Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines how a series of security event tokens 
(SETs) may be delivered to a previously registered receiver 
using HTTP POST over TLS initiated as a push to the receiver.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction and Overview">
<t>This specification defines how SETs (see
<xref target="SET"/>) can be transmitted to a previously 
registered SET Receiver using HTTP <xref target="RFC7231"/> over TLS. The
specification defines a method to push SETs via HTTP POST.</t>

<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
they appear in all capitals, as shown here.</t>

<t>For purposes of readability examples are not URL encoded.
Implementers MUST percent encode URLs as described in Section 2.1 of
<xref target="RFC3986"/>.</t>

<t>Throughout this documents all figures MAY contain spaces and extra
line-wrapping for readability and space limitations. Similarly, some
URI’s contained within examples, have been shortened for space and
readability reasons.</t>

</section>
<section anchor="defn" title="Definitions">
<t>This specification assumes terminology defined in the Security
Event Token specification <xref target="SET"/>, as well as the terms defined below:</t>

<t><list style="hanging">
  <t hangText='SET Transmitter'><vspace blankLines='0'/>
  A service provider that delivers SETs to other providers known
as SET Receivers.</t>
  <t hangText='SET Receiver'><vspace blankLines='0'/>
  A service provider that registers to receive SETs from an SET
Transmitter and provides an endpoint to receive SETs via HTTP POST.</t>
</list></t>

</section>
</section>
<section anchor="event_delivery" title="Event Delivery">

<section anchor="event_delivery_process" title="Event Delivery Process">
<t>When an Event occurs, the SET Transmitter constructs a SET
token <xref target="SET"/> that describes the Event.</t>

<t>How SETs are defined and the process by which Events are identified for 
SET Receivers is out-of-scope of this    specification.</t>

<t>When a SET is available for an SET Receiver, the SET Transmitter
attempts to deliver the SET based on the SET Receiver’s registered
delivery mechanism:</t>

<t><list style="symbols">
  <t>The SET Transmitter uses an HTTP/1.1 POST to the SET Receiver
endpoint to deliver the SET;</t>
  <t>Or, the SET Transmitter delivers the Event through a different
method not defined by this specification.</t>
</list></t>

<t>In Push-Based SET Delivery Using HTTP, SETs are delivered one at a
time using HTTP POST requests by an SET Transmitter to an SET
Receiver. The HTTP request body is a JSON Web Token <xref target="RFC7519"/>
with a <spanx style="verb">Content-Type</spanx> header of <spanx style="verb">application/secevent+jwt</spanx> as
defined in Section 2.2 and 6.2 of <xref target="SET"/>. Upon receipt, the 
SET Receiver acknowledges receipt with a response with HTTP 
Status 202, as described below in <xref target="httpPost"/>.</t>

<t>After successful (acknowledged) SET delivery, SET 
Transmitters SHOULD NOT be required to maintain or record SETs for 
recovery. Once a SET is acknowledged, the SET Receiver SHALL be 
responsible for retention and recovery.</t>

<t>Transmitted SETs SHOULD be self-validating (e.g. signed)
if there is a requirement to verify they were issued by the SET 
Transmitter at a later date when de-coupled from the original 
delivery where authenticity could be checked via the HTTP or 
TLS mutual authentication.</t>

<t>Upon receiving a SET, the SET Receiver reads the SET and validates 
it. The SET Receiver MUST acknowledge receipt to the SET Transmitter, using the 
defined acknowledgement or error method.</t>

<t>The SET Receiver SHALL NOT use the Event acknowledgement mechanism
to report Event errors other than relating to the parsing and validation
of the SET.</t>

</section>
<section anchor="httpPost" title="Push Delivery using HTTP">
<t>This method allows an SET Transmitter to use HTTP POST 
(Section 4.3.3 <xref target="RFC7231"/>) to deliver
SETs to a previously registered web callback URI supplied by the
SET Receiver as part of a configuration process 
(not defined by this document).</t>

<t>The SET to be delivered MAY be signed 
and/or encrypted as defined in <xref target="SET"/>.</t>

<t>The HTTP Content-Type (see 
Section 3.1.1.5 <xref target="RFC7231"/>) for the HTTP POST is 
<spanx style="verb">application/secevent+jwt</spanx> and SHALL consist of 
a single SET (see <xref target="SET"/>).
As per Section 5.3.2 <xref target="RFC7231"/>, the expected 
media type (<spanx style="verb">Accept</spanx> header) response is 
<spanx style="verb">application/json</spanx>.</t>

<t>To deliver an Event, the SET Transmitter generates an event 
delivery message and uses HTTP POST to the configured endpoint with
the appropriate <spanx style="verb">Accept</spanx> and 
<spanx style="verb">Content-Type</spanx> headers.</t>

<figure title="Example HTTP POST Request" anchor="postSet"><artwork><![CDATA[
POST /Events  HTTP/1.1

Host: notify.examplerp.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Type: application/secevent+jwt
eyJhbGciOiJub25lIn0
.
eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
.
]]></artwork></figure>

<t>Upon receipt of the request, the SET Receiver SHALL 
validate the JWT structure of the SET as defined in 
Section 7.2 <xref target="RFC7519"/>. The SET Receiver 
SHALL also validate the SET information as described
in Section 2 <xref target="SET"/>.</t>

<t>If the SET is determined to be valid, the SET Receiver SHALL
“acknowledge” successful submission by responding with HTTP Status
202 as <spanx style="verb">Accepted</spanx> 
(see Section 6.3.3 <xref target="RFC7231"/>).</t>

<t>In order
to maintain compatibility with other methods of transmission, the 
SET Receiver SHOULD NOT include an HTTP response body representation
of the submitted SET or what the SET’s pending status is when 
acknowledging success. In the case of an error (e.g. HTTP Status 400),
the purpose of the HTTP response body is to indicate any SET parsing, 
validation, or cryptographic errors.</t>

<t>The following is a non-normative example of a successful
receipt of a SET.</t>

<figure title="Example Successful Delivery Response" anchor="goodPostResponse"><artwork><![CDATA[
HTTP/1.1 202 Accepted
]]></artwork></figure>

<t>Note that the purpose of the “acknowledgement” response is to let the 
SET Transmitter know that a SET has been delivered and the 
information no longer needs to be retained by the SET Transmitter. 
Before acknowledgement, SET Receivers SHOULD ensure they have 
validated received SETs and retained them in a manner appropriate 
to information retention requirements appropriate to the SET 
event types signaled. The level and method of retention of SETs
by SET Receivers is out-of-scope of this specification.</t>

<t>In the Event of a general HTTP error condition, the SET Receiver
MAY respond with an appropriate HTTP Status code as defined in 
Section 6 <xref target="RFC7231"/>.</t>

<t>When the SET Receiver detects an error parsing or 
validating a received SET (as defined by <xref target="SET"/>), 
the SET Receiver SHALL indicate an HTTP Status 400 error with an 
error response as described in <xref target="errorResponse"/>.</t>

<t>The following is an example non-normative error 
response.</t>

<figure title="Example HTTP Status 400 Response" anchor="badPostResponse"><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "err":"dup",
  "description":"SET already received. Ignored."

}
]]></artwork></figure>

</section>
<section anchor="error_codes" title="Security Event Token Delivery Error Codes">
<t>Security Event Token Delivery Error Codes are strings that identify a specific type of error that may occur when parsing or validating a SET. Every Security Event Token Delivery Error Code MUST have a unique name registered in the IANA “Security Event Token Delivery Error Codes” registry established by <xref target="iana_set_errors"/>.</t>

<t>The following table presents the initial set of Error Codes that are registered in the IANA “Security Event Token Delivery Error Codes” registry:</t>

<texttable title="SET Delivery Error Codes" anchor="tabErrors">
      <ttcol align='left'>Err Value</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>json</c>
      <c>Invalid JSON object.</c>
      <c>jwtParse</c>
      <c>Invalid or unparsable JWT or JSON structure.</c>
      <c>jwtHdr</c>
      <c>In invalid JWT header was detected.</c>
      <c>jwtCrypto</c>
      <c>Unable to parse due to unsupported algorithm.</c>
      <c>jws</c>
      <c>Signature was not validated.</c>
      <c>jwe</c>
      <c>Unable to decrypt JWE encoded data.</c>
      <c>jwtAud</c>
      <c>Invalid audience value.</c>
      <c>jwtIss</c>
      <c>Issuer not recognized.</c>
      <c>setType</c>
      <c>An unexpected Event type was received.</c>
      <c>setParse</c>
      <c>Invalid structure was encountered such as an inability to parse or an incomplete set of Event claims.</c>
      <c>setData</c>
      <c>SET event claims incomplete or invalid.</c>
      <c>dup</c>
      <c>A duplicate SET was received and has been ignored.</c>
</texttable>

</section>
<section anchor="errorResponse" title="Error Response Handling">
<t>An error response SHALL include a JSON
object which provides details about the error. The JSON object
includes the JSON attributes:</t>

<t><list style="hanging">
  <t hangText='err'><vspace blankLines='0'/>
  A Security Event Token Delivery Error Code (see <xref target="error_codes"/>).
description</t>
  <t>A human-readable text that provides
additional diagnostic information.</t>
</list></t>

<t>When included as part of an HTTP Status 400 response, the above
JSON is the HTTP response body (see <xref target="badPostResponse"/>).</t>

</section>
</section>
<section anchor="aa" title="Authentication and Authorization">

<t>The SET delivery method described in this specification is
based upon HTTP and depends on the use of TLS and/or standard 
HTTP authentication and authorization schemes as per 
<xref target="RFC7235"/>.</t>

<t>As per Section 4.1 of <xref target="RFC7235"/>, a SET
delivery endpoint SHALL indicate supported HTTP authentication 
schemes via the <spanx style="verb">WWW-Authenticate</spanx> header.</t>

<t>Because SET Delivery describes a simple function, authorization
for the ability to pick-up or deliver SETs can be derived by
considering the identity of the SET issuer, or via other employed
authentication methods.  Because SETs are
not commands (see ), SET Receivers are free to ignore SETs that 
are not of interest.</t>

<t>For illustrative purposes only, SET delivery examples show an OAuth2
bearer token value <xref target="RFC6750"/> in the authorization header.
This is not intended to imply that bearer tokens are
preferred. However, the use of bearer tokens in the specification does
reflect common practice.</t>

<section anchor="authzTokens" title="Use of Tokens as Authorizations">
<t>When using bearer tokens or proof-of-possession tokens that
represent an authorization grant such as issued by OAuth (see <xref target="RFC6749"/>), implementers SHOULD consider the type of
authorization granted, any authorized scopes (see Section 3.3 of <xref target="RFC6749"/>), and the security subject(s) that SHOULD be mapped
from the authorization when considering local access control rules.
Section 6 of the OAuth Assertions draft <xref target="RFC7521"/>, documents common scenarios for
authorization including:</t>

<t><list style="symbols">
  <t>Clients using an assertion to authenticate and/or act on behalf
of itself;</t>
  <t>Clients acting on behalf of a user; and,</t>
  <t>A Client acting on behalf of an anonymous user (e.g., see next
section).</t>
</list></t>

<t>When using OAuth authorization tokens, implementers MUST take
into account the threats and countermeasures documented in the
security considerations for the use of client authorizations (see
Section 8 of <xref target="RFC7521"/>). When using
other token formats or frameworks, implementers MUST take into account
similar threats and countermeasures, especially those documented by
the relevant specifications.</t>

</section>
</section>
<section anchor="Security" title="Security Considerations">

<section anchor="payloadAuthentication" title="Authentication Using Signed SETs">
<t>In scenarios where HTTP authorization or TLS mutual authentication
are not used or are considered weak, JWS signed SETs SHOULD be 
used (see <xref target="RFC7515"/> and 
Security Considerations <xref target="SET"/>). This enables the SET Receiver
to validate that the SET issuer is authorized to deliver SETs.</t>

</section>
<section anchor="tls-support-considerations" title="TLS Support Considerations">
<t>SETs contain sensitive information that is considered PII
(e.g. subject claims). Therefore, SET Transmitters and
SET Receivers MUST require the use of a transport-layer 
security mechanism. Event delivery endpoints MUST support TLS 
1.2 <xref target="RFC5246"/> and MAY support additional 
transport-layer mechanisms meeting its security requirements. 
When using TLS, the client MUST perform a TLS/SSL server
certificate check, per <xref target="RFC6125"/>. Implementation
security considerations for TLS can be found in “Recommendations for
Secure Use of TLS and DTLS” <xref target="RFC7525"/>.</t>

</section>
<section anchor="denial-of-service" title="Denial of Service">
<t>The SET Receiver may be vulnerable to a denial-of-service attack where a malicious party makes a high volume of requests containing invalid SETs, causing the endpoint to expend significant resources on cryptographic operations that are bound to fail. This may be mitigated by authenticating SET Transmitters with a mechanism with low runtime overhead, such as mutual TLS or statically assigned bearer tokens.</t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>If a SET needs to be retained for audit purposes, JWS MAY 
be used to provide verification of its authenticity.</t>

<t>When sharing personally identifiable information or information
that is otherwise considered confidential to affected users, SET 
Transmitters and Receivers MUST have the appropriate legal agreements
and user consent or terms of service in place.</t>

<t>The propagation of subject identifiers can be perceived as personally
identifiable information. Where possible, SET Transmitters and Receivers
SHOULD devise approaches that prevent propagation — for example, the
passing of a hash value that requires the subscriber to already know
the subject.</t>

</section>
<section anchor="IANA" title="IANA Considerations">

<section anchor="iana_set_errors" title="Security Event Token Delivery Error Codes">
<t>This document defines Security Event Token Delivery Error Codes, for which IANA is asked to create and maintain a new registry titled “Security Event Token Delivery Error Codes”.  Initial values for the Security Event Token Delivery Error Codes registry are given in <xref target="tabErrors"/>.  Future assignments are to be made through the Expert Review registration policy (<xref target="BCP26"/>) and shall follow the template presented in <xref target="iana_set_errors_template"/>.</t>

<section anchor="iana_set_errors_template" title="Registration Template">

<t><list style="hanging">
  <t hangText='Error Code'><vspace blankLines='0'/>
  The name of the Security Event Token Delivery Error Code, as described in <xref target="error_codes"/>. The name MUST be a case-sensitive ASCII string consisting only of upper-case letters (“A” - “Z”), lower-case letters (“a” - “z”), and digits (“0” - “9”).</t>
  <t hangText='Descrption'><vspace blankLines='0'/>
  A brief human-readable description of the Security Event Token Delivery Error Code.</t>
  <t hangText='Change Controller'><vspace blankLines='0'/>
  For error codes registered by the IETF or its working groups, list “IETF Secevent Working Group”.  For all other error codes, list the name of the party responsible for the registration.  Contact information such as mailing address, email address, or phone number may also be provided.</t>
  <t hangText='Defining Document(s)'><vspace blankLines='0'/>
  A reference to the document or documents that define the Security Event Token Delivery Error Code. The definition MUST specify the name and description of the error code, and explain under what circumstances the error code may be used. URIs that can be used to retrieve copies of each document at no cost SHOULD be included.</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<section anchor="json" title="json">
<t><list style="symbols">
  <t>Name: json</t>
  <t>Description: Invalid JSON object.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="jwtparse" title="jwtParse">
<t><list style="symbols">
  <t>Name: jwtParse</t>
  <t>Description: Invalid or unparsable JWT or JSON structure.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="jwthdr" title="jwtHdr">
<t><list style="symbols">
  <t>Name: jwtHdr</t>
  <t>Description: In invalid JWT header was detected.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="jwtcrypto" title="jwtCrypto">
<t><list style="symbols">
  <t>Name: jwtCrypto</t>
  <t>Description: Unable to parse due to unsupported algorithm.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="jws" title="jws">
<t><list style="symbols">
  <t>Name: jws</t>
  <t>Description: Signature was not validated.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="jwe" title="jwe">
<t><list style="symbols">
  <t>Name: jwe</t>
  <t>Description: Unable to decrypt JWE encoded data.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="jwtaud" title="jwtAud">
<t><list style="symbols">
  <t>Name: jwtAud</t>
  <t>Description: Invalid audience value.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="jwtiss" title="jwtIss">
<t><list style="symbols">
  <t>Name: jwtIss</t>
  <t>Description: Issuer not recognized.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="settype" title="setType">
<t><list style="symbols">
  <t>Name: setType</t>
  <t>Description: An unexpected Event type was received.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="setparse" title="setParse">
<t><list style="symbols">
  <t>Name: setParse</t>
  <t>Description: Invalid structure was encountered such as an inability to parse or an incomplete set of Event claims.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="setdata" title="setData">
<t><list style="symbols">
  <t>Name: setData</t>
  <t>Description: SET event claims incomplete or invalid.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="dup" title="dup">
<t><list style="symbols">
  <t>Name: dup</t>
  <t>Description: A duplicate SET was received and has been ignored.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="SET" target='https://www.rfc-editor.org/info/rfc8417'>
<front>
<title>Security Event Token (SET)</title>
<author initials='P.' surname='Hunt' fullname='P. Hunt' role='editor'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='W.' surname='Denniss' fullname='W. Denniss'><organization /></author>
<author initials='M.' surname='Ansari' fullname='M. Ansari'><organization /></author>
<date year='2018' month='July' />
<abstract><t>This specification defines the Security Event Token (SET) data structure.  A SET describes statements of fact from the perspective of an issuer about a subject.  These statements of fact represent an event that occurred directly to or about a security subject, for example, a statement about the issuance or revocation of a token on behalf of a subject.  This specification is intended to enable representing security- and identity-related events.  A SET is a JSON Web Token (JWT), which can be optionally signed and/or encrypted. SETs can be distributed via protocols such as HTTP.</t></abstract>
</front>
<seriesInfo name='RFC' value='8417'/>
<seriesInfo name='DOI' value='10.17487/RFC8417'/>
</reference>



<reference  anchor="BCP26" target='https://www.rfc-editor.org/info/rfc8126'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='M.' surname='Cotton' fullname='M. Cotton'><organization /></author>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<date year='2017' month='June' />
<abstract><t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t><t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t><t>This is the third edition of this document; it obsoletes RFC 5226.</t></abstract>
</front>
<seriesInfo name='BCP' value='26'/>
<seriesInfo name='RFC' value='8126'/>
<seriesInfo name='DOI' value='10.17487/RFC8126'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC7235" target='https://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC6750" target='https://www.rfc-editor.org/info/rfc6750'>
<front>
<title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='D.' surname='Hardt' fullname='D. Hardt'><organization /></author>
<date year='2012' month='October' />
<abstract><t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a &quot;bearer&quot;) can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6750'/>
<seriesInfo name='DOI' value='10.17487/RFC6750'/>
</reference>



<reference  anchor="RFC6749" target='https://www.rfc-editor.org/info/rfc6749'>
<front>
<title>The OAuth 2.0 Authorization Framework</title>
<author initials='D.' surname='Hardt' fullname='D. Hardt' role='editor'><organization /></author>
<date year='2012' month='October' />
<abstract><t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6749'/>
<seriesInfo name='DOI' value='10.17487/RFC6749'/>
</reference>



<reference  anchor="RFC7521" target='https://www.rfc-editor.org/info/rfc7521'>
<front>
<title>Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants</title>
<author initials='B.' surname='Campbell' fullname='B. Campbell'><organization /></author>
<author initials='C.' surname='Mortimore' fullname='C. Mortimore'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='Y.' surname='Goland' fullname='Y. Goland'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification provides a framework for the use of assertions with OAuth 2.0 in the form of a new client authentication mechanism and a new authorization grant type.  Mechanisms are specified for transporting assertions during interactions with a token endpoint; general processing rules are also specified.</t><t>The intent of this specification is to provide a common framework for OAuth 2.0 to interwork with other identity systems using assertions and to provide alternative client authentication mechanisms.</t><t>Note that this specification only defines abstract message flows and processing rules.  In order to be implementable, companion specifications are necessary to provide the corresponding concrete instantiations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7521'/>
<seriesInfo name='DOI' value='10.17487/RFC7521'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC6125" target='https://www.rfc-editor.org/info/rfc6125'>
<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<author initials='J.' surname='Hodges' fullname='J. Hodges'><organization /></author>
<date year='2011' month='March' />
<abstract><t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6125'/>
<seriesInfo name='DOI' value='10.17487/RFC6125'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>




    </references>


<section anchor="other-streaming-specifications" title="Other Streaming Specifications">
<t>[[EDITORS NOTE: This section to be removed prior to publication]]</t>

<t>The following pub/sub, queuing, streaming systems were reviewed 
as possible solutions or as input to the current draft:</t>

<t>XMPP Events</t>

<t>The WG considered the XMPP events ands its ability to provide a single
messaging solution without the need for both polling and push modes.
The feeling was the size and methodology of XMPP was to far apart from
the current capabilities of the SECEVENTs community which focuses in
on HTTP based service delivery and authorization.</t>

<t>Amazon Simple Notification Service</t>

<t>Simple Notification Service, is a pub/sub messaging product from 
AWS. SNS supports a variety of subscriber types: HTTP/HTTPS endpoints, 
AWS Lambda functions, email addresses (as JSON or plain text), phone 
numbers (via SMS), and AWS SQS standard queues. It doesn’t directly 
support pull, but subscribers can get the pull model by creating an 
SQS queue and subscribing it to the topic. Note that this puts the 
cost of pull support back onto the subscriber, just as it is in the 
push model. It is not clear that one way is strictly better than the 
other; larger, sophisticated developers may be happy to own message 
persistence so they can have their own internal delivery guarantees. 
The long tail of OIDC clients may not care about that, or may fail 
to get it right. Regardless, I think we can learn something from the 
Delivery Policies supported by SNS, as well as the delivery controls 
that SQS offers (e.g. Visibility Timeout, Dead-Letter Queues). I’m 
not suggesting that we need all of these things in the spec, but 
they give an idea of what features people have found useful.</t>

<t>Other information:</t>

<t><list style="symbols">
  <t>API Reference: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html</t>
  <t>Visibility Timeouts: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html</t>
</list></t>

<t>Apache Kafka</t>

<t>Apache Kafka is an Apache open source project based upon TCP for 
distributed streaming. It prescribes some interesting general 
purpose features that seem to extend far beyond the simpler 
streaming model SECEVENTs is after. A comment from MS has been that 
Kafka does an acknowledge with poll combination event which seems 
to be a performance advantage. See: https://kafka.apache.org/intro</t>

<t>Google Pub/Sub</t>

<t>Google Pub Sub system favours a model whereby polling and acknowledgement
of events is done as separate endpoints as separate functions.</t>

<t>Information:</t>

<t><list style="symbols">
  <t>Cloud Overview - https://cloud.google.com/pubsub/</t>
  <t>Subscriber Overview - https://cloud.google.com/pubsub/docs/subscriber</t>
  <t>Subscriber Pull(poll) - https://cloud.google.com/pubsub/docs/pull</t>
</list></t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>The editors would like to thanks the members of the SCIM WG which 
began discussions of provisioning events starting with: draft-hunt-scim-notify-00 in 2015.</t>

<t>The editors would like to thank the authors of draft-ietf-secevent-delivery-02,
on which this draft is based.</t>

<t>The editor would like to thank the participants in the the SECEVENTS
working group for their support of this specification.</t>

</section>
<section anchor="change-log" title="Change Log">
<t>Draft 00 - AB - Based on draft-ietf-secevent-delivery-02 with the 
following changes:</t>

<t><list style="symbols">
  <t>Renamed to “Push-Based SET Token Delivery Using HTTP”</t>
  <t>Removed references to the HTTP Polling delivery method.</t>
  <t>Removed informative reference to RFC6202.</t>
</list></t>

<t>Draft 01 - AB</t>

<t><list style="symbols">
  <t>Converted to Markdown</t>
  <t>Removed NumericDate definition (unused).</t>
  <t>Removed Event and Subject definitions (defined in SET).</t>
  <t>Removed text related to Event Streams.</t>
  <t>Removed Mike Jones and Phil Hunt as editors, per respective requests.</t>
  <t>Fixed area and workgroup to match secevent.</t>
  <t>Renamed Event Transmitter and Event Receiver to SET Transmitter and SET Receiver, respectively.</t>
  <t>Added IANA registry for SET Delivery Error Codes.</t>
  <t>Removed enumeration of HTTP authentication methods.</t>
  <t>Removed generally applicable guidance for HTTP, authorization tokens, and bearer tokens.</t>
  <t>Elaborated on guidance for DoS protection via authn, and moved it to Security Considerations.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
Pf1xXfE/GTxlU6dZAAA=

-->

</rfc>

