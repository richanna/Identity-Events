<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-secevent-http-push-00" category="std">

  <front>
    <title abbrev="draft-ietf-secevent-http-push">Push-Based SET Token Delivery Using HTTP</title>

    <author initials="A." surname="Backman" fullname="Annabelle Backman" role="editor">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt">
      <organization>Oracle</organization>
      <address>
        <email>phil.hunt@yahoo.com</email>
      </address>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization>Cisco</organization>
      <address>
        <email>morteza.ansari@cisco.com</email>
      </address>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization>Microsoft</organization>
      <address>
        <email>tonynad@microsoft.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="27"/>

    <area>Security</area>
    <workgroup>Security Events Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines how a series of security event tokens 
(SETs) may be delivered to a previously registered receiver 
using HTTP POST over TLS initiated as a push to the receiver.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction and Overview">
<t>This specification defines how SETs (see
<xref target="SET"/>) can be transmitted to a previously 
registered SET Receiver using HTTP <xref target="RFC7231"/> over TLS. The
specification defines a method to push SETs via HTTP POST.</t>

<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
they appear in all capitals, as shown here.</t>

<t>For purposes of readability examples are not URL encoded.
Implementers MUST percent encode URLs as described in Section 2.1 of
<xref target="RFC3986"/>.</t>

<t>Throughout this documents all figures MAY contain spaces and extra
line-wrapping for readability and space limitations. Similarly, some
URI’s contained within examples, have been shortened for space and
readability reasons.</t>

</section>
<section anchor="defn" title="Definitions">
<t>This specification assumes terminology defined in the Security
Event Token specification <xref target="SET"/>, as well as the terms defined below:</t>

<t><list style="hanging">
  <t hangText='SET Transmitter'><vspace blankLines='0'/>
  A service provider that delivers SETs to other providers known
as SET Receivers.</t>
  <t hangText='SET Receiver'><vspace blankLines='0'/>
  A service provider that registers to receive SETs from an SET
Transmitter and provides an endpoint to receive SETs via HTTP POST.</t>
</list></t>

</section>
</section>
<section anchor="event_delivery" title="Event Delivery">

<section anchor="event_delivery_process" title="Event Delivery Process">
<t>When an Event occurs, the SET Transmitter constructs a SET
token <xref target="SET"/> that describes the Event.</t>

<t>How SETs are defined and the process by which Events are identified for 
SET Receivers is out-of-scope of this    specification.</t>

<t>When a SET is available for an SET Receiver, the SET Transmitter
attempts to deliver the SET based on the SET Receiver’s registered
delivery mechanism:</t>

<t><list style="symbols">
  <t>The SET Transmitter uses an HTTP/1.1 POST to the SET Receiver
endpoint to deliver the SET;</t>
  <t>Or, the SET Transmitter delivers the Event through a different
method not defined by this specification.</t>
</list></t>

<t>In Push-Based SET Delivery Using HTTP, SETs are delivered one at a
time using HTTP POST requests by an SET Transmitter to an SET
Receiver. The HTTP request body is a JSON Web Token <xref target="RFC7519"/>
with a <spanx style="verb">Content-Type</spanx> header of <spanx style="verb">application/secevent+jwt</spanx> as
defined in Section 2.2 and 6.2 of <xref target="SET"/>. Upon receipt, the 
SET Receiver acknowledges receipt with a response with HTTP 
Status 202, as described below in <xref target="httpPost"/>.</t>

<t>After successful (acknowledged) SET delivery, SET 
Transmitters SHOULD NOT be required to maintain or record SETs for 
recovery. Once a SET is acknowledged, the SET Receiver SHALL be 
responsible for retention and recovery.</t>

<t>Transmitted SETs SHOULD be self-validating (e.g. signed)
if there is a requirement to verify they were issued by the SET 
Transmitter at a later date when de-coupled from the original 
delivery where authenticity could be checked via the HTTP or 
TLS mutual authentication.</t>

<t>Upon receiving a SET, the SET Receiver reads the SET and validates 
it. The SET Receiver MUST acknowledge receipt to the SET Transmitter, using the 
defined acknowledgement or error method.</t>

<t>The SET Receiver SHALL NOT use the Event acknowledgement mechanism
to report Event errors other than relating to the parsing and validation
of the SET.</t>

</section>
<section anchor="httpPost" title="Push Delivery using HTTP">
<t>This method allows an SET Transmitter to use HTTP POST 
(Section 4.3.3 <xref target="RFC7231"/>) to deliver
SETs to a previously registered web callback URI supplied by the
SET Receiver as part of a configuration process 
(not defined by this document).</t>

<t>The SET to be delivered MAY be signed 
and/or encrypted as defined in <xref target="SET"/>.</t>

<t>The HTTP Content-Type (see 
Section 3.1.1.5 <xref target="RFC7231"/>) for the HTTP POST is 
<spanx style="verb">application/secevent+jwt</spanx> and SHALL consist of 
a single SET (see <xref target="SET"/>).
As per Section 5.3.2 <xref target="RFC7231"/>, the expected 
media type (<spanx style="verb">Accept</spanx> header) response is 
<spanx style="verb">application/json</spanx>.</t>

<t>To deliver an Event, the SET Transmitter generates an event 
delivery message and uses HTTP POST to the configured endpoint with
the appropriate <spanx style="verb">Accept</spanx> and 
<spanx style="verb">Content-Type</spanx> headers.</t>

<figure title="Example HTTP POST Request" anchor="postSet"><artwork><![CDATA[
POST /Events  HTTP/1.1

Host: notify.examplerp.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Type: application/secevent+jwt
eyJhbGciOiJub25lIn0
.
eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
.
]]></artwork></figure>

<t>Upon receipt of the request, the SET Receiver SHALL 
validate the JWT structure of the SET as defined in 
Section 7.2 <xref target="RFC7519"/>. The SET Receiver 
SHALL also validate the SET information as described
in Section 2 <xref target="SET"/>.</t>

<t>If the SET is determined to be valid, the SET Receiver SHALL
“acknowledge” successful submission by responding with HTTP Status
202 as <spanx style="verb">Accepted</spanx> 
(see Section 6.3.3 <xref target="RFC7231"/>).</t>

<t>In order
to maintain compatibility with other methods of transmission, the 
SET Receiver SHOULD NOT include an HTTP response body representation
of the submitted SET or what the SET’s pending status is when 
acknowledging success. In the case of an error (e.g. HTTP Status 400),
the purpose of the HTTP response body is to indicate any SET parsing, 
validation, or cryptographic errors.</t>

<t>The following is a non-normative example of a successful
receipt of a SET.</t>

<figure title="Example Successful Delivery Response" anchor="goodPostResponse"><artwork><![CDATA[
HTTP/1.1 202 Accepted
]]></artwork></figure>

<t>Note that the purpose of the “acknowledgement” response is to let the 
SET Transmitter know that a SET has been delivered and the 
information no longer needs to be retained by the SET Transmitter. 
Before acknowledgement, SET Receivers SHOULD ensure they have 
validated received SETs and retained them in a manner appropriate 
to information retention requirements appropriate to the SET 
event types signaled. The level and method of retention of SETs
by SET Receivers is out-of-scope of this specification.</t>

<t>In the Event of a general HTTP error condition, the SET Receiver
MAY respond with an appropriate HTTP Status code as defined in 
Section 6 <xref target="RFC7231"/>.</t>

<t>When the SET Receiver detects an error parsing or 
validating a received SET (as defined by <xref target="SET"/>), 
the SET Receiver SHALL indicate an HTTP Status 400 error with an 
error response as described in <xref target="errorResponse"/>.</t>

<t>The following is an example non-normative error 
response.</t>

<figure title="Example HTTP Status 400 Response" anchor="badPostResponse"><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "err":"dup",
  "description":"SET already received. Ignored."

}
]]></artwork></figure>

</section>
<section anchor="error_codes" title="Security Event Token Delivery Error Codes">
<t>Security Event Token Delivery Error Codes are strings that identify a specific type of error that may occur when parsing or validating a SET. Every Security Event Token Delivery Error Code MUST have a unique name registered in the IANA “Security Event Token Delivery Error Codes” registry established by <xref target="iana_set_errors"/>.</t>

<t>The following table presents the initial set of Error Codes that are registered in the IANA “Security Event Token Delivery Error Codes” registry:</t>

<texttable title="SET Delivery Error Codes" anchor="tabErrors">
      <ttcol align='left'>Err Value</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>json</c>
      <c>Invalid JSON object.</c>
      <c>jwtParse</c>
      <c>Invalid or unparsable JWT or JSON structure.</c>
      <c>jwtHdr</c>
      <c>In invalid JWT header was detected.</c>
      <c>jwtCrypto</c>
      <c>Unable to parse due to unsupported algorithm.</c>
      <c>jws</c>
      <c>Signature was not validated.</c>
      <c>jwe</c>
      <c>Unable to decrypt JWE encoded data.</c>
      <c>jwtAud</c>
      <c>Invalid audience value.</c>
      <c>jwtIss</c>
      <c>Issuer not recognized.</c>
      <c>setType</c>
      <c>An unexpected Event type was received.</c>
      <c>setParse</c>
      <c>Invalid structure was encountered such as an inability to parse or an incomplete set of Event claims.</c>
      <c>setData</c>
      <c>SET event claims incomplete or invalid.</c>
      <c>dup</c>
      <c>A duplicate SET was received and has been ignored.</c>
</texttable>

</section>
<section anchor="errorResponse" title="Error Response Handling">
<t>An error response SHALL include a JSON
object which provides details about the error. The JSON object
includes the JSON attributes:</t>

<t><list style="hanging">
  <t hangText='err'><vspace blankLines='0'/>
  A Security Event Token Delivery Error Code (see <xref target="error_codes"/>).
description</t>
  <t>A human-readable text that provides
additional diagnostic information.</t>
</list></t>

<t>When included as part of an HTTP Status 400 response, the above
JSON is the HTTP response body (see <xref target="badPostResponse"/>).</t>

</section>
</section>
<section anchor="aa" title="Authentication and Authorization">

<t>The SET delivery method described in this specification is
based upon HTTP and depends on the use of TLS and/or standard 
HTTP authentication and authorization schemes as per 
<xref target="RFC7235"/>.</t>

<t>Because SET Delivery describes a simple function, authorization
for the ability to pick-up or deliver SETs can be derived by
considering the identity of the SET issuer, or via other employed
authentication methods.  Because SETs are
not commands (see ), SET Receivers are free to ignore SETs that 
are not of interest.</t>

<t>For illustrative purposes only, SET delivery examples show an OAuth2
bearer token value <xref target="RFC6750"/> in the authorization header.
This is not intended to imply that bearer tokens are
preferred. However, the use of bearer tokens in the specification does
reflect common practice.</t>

</section>
<section anchor="Security" title="Security Considerations">

<section anchor="payloadAuthentication" title="Authentication Using Signed SETs">
<t>In scenarios where HTTP authorization or TLS mutual authentication
are not used or are considered weak, JWS signed SETs SHOULD be 
used (see <xref target="RFC7515"/> and 
Security Considerations <xref target="SET"/>). This enables the SET Receiver
to validate that the SET issuer is authorized to deliver SETs.</t>

</section>
<section anchor="tls-support-considerations" title="TLS Support Considerations">
<t>SETs contain sensitive information that is considered PII
(e.g. subject claims). Therefore, SET Transmitters and
SET Receivers MUST require the use of a transport-layer 
security mechanism. Event delivery endpoints MUST support TLS 
1.2 <xref target="RFC5246"/> and MAY support additional 
transport-layer mechanisms meeting its security requirements. 
When using TLS, the client MUST perform a TLS/SSL server
certificate check, per <xref target="RFC6125"/>. Implementation
security considerations for TLS can be found in “Recommendations for
Secure Use of TLS and DTLS” <xref target="RFC7525"/>.</t>

</section>
<section anchor="denial-of-service" title="Denial of Service">
<t>The SET Receiver may be vulnerable to a denial-of-service attack where a malicious party makes a high volume of requests containing invalid SETs, causing the endpoint to expend significant resources on cryptographic operations that are bound to fail. This may be mitigated by authenticating SET Transmitters with a mechanism with low runtime overhead, such as mutual TLS or statically assigned bearer tokens.</t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>If a SET needs to be retained for audit purposes, JWS MAY 
be used to provide verification of its authenticity.</t>

<t>When sharing personally identifiable information or information
that is otherwise considered confidential to affected users, SET 
Transmitters and Receivers MUST have the appropriate legal agreements
and user consent or terms of service in place.</t>

<t>The propagation of subject identifiers can be perceived as personally
identifiable information. Where possible, SET Transmitters and Receivers
SHOULD devise approaches that prevent propagation — for example, the
passing of a hash value that requires the subscriber to already know
the subject.</t>

</section>
<section anchor="IANA" title="IANA Considerations">

<section anchor="iana_set_errors" title="Security Event Token Delivery Error Codes">
<t>This document defines Security Event Token Delivery Error Codes, for which IANA is asked to create and maintain a new registry titled “Security Event Token Delivery Error Codes”.  Initial values for the Security Event Token Delivery Error Codes registry are given in <xref target="tabErrors"/>.  Future assignments are to be made through the Expert Review registration policy (<xref target="BCP26"/>) and shall follow the template presented in <xref target="iana_set_errors_template"/>.</t>

<section anchor="iana_set_errors_template" title="Registration Template">

<t><list style="hanging">
  <t hangText='Error Code'><vspace blankLines='0'/>
  The name of the Security Event Token Delivery Error Code, as described in <xref target="error_codes"/>. The name MUST be a case-sensitive ASCII string consisting only of upper-case letters (“A” - “Z”), lower-case letters (“a” - “z”), and digits (“0” - “9”).</t>
  <t hangText='Descrption'><vspace blankLines='0'/>
  A brief human-readable description of the Security Event Token Delivery Error Code.</t>
  <t hangText='Change Controller'><vspace blankLines='0'/>
  For error codes registered by the IETF or its working groups, list “IETF Secevent Working Group”.  For all other error codes, list the name of the party responsible for the registration.  Contact information such as mailing address, email address, or phone number may also be provided.</t>
  <t hangText='Defining Document(s)'><vspace blankLines='0'/>
  A reference to the document or documents that define the Security Event Token Delivery Error Code. The definition MUST specify the name and description of the error code, and explain under what circumstances the error code may be used. URIs that can be used to retrieve copies of each document at no cost SHOULD be included.</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<section anchor="json" title="json">
<t><list style="symbols">
  <t>Name: json</t>
  <t>Description: Invalid JSON object.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="jwtparse" title="jwtParse">
<t><list style="symbols">
  <t>Name: jwtParse</t>
  <t>Description: Invalid or unparsable JWT or JSON structure.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="jwthdr" title="jwtHdr">
<t><list style="symbols">
  <t>Name: jwtHdr</t>
  <t>Description: In invalid JWT header was detected.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="jwtcrypto" title="jwtCrypto">
<t><list style="symbols">
  <t>Name: jwtCrypto</t>
  <t>Description: Unable to parse due to unsupported algorithm.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="jws" title="jws">
<t><list style="symbols">
  <t>Name: jws</t>
  <t>Description: Signature was not validated.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="jwe" title="jwe">
<t><list style="symbols">
  <t>Name: jwe</t>
  <t>Description: Unable to decrypt JWE encoded data.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="jwtaud" title="jwtAud">
<t><list style="symbols">
  <t>Name: jwtAud</t>
  <t>Description: Invalid audience value.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="jwtiss" title="jwtIss">
<t><list style="symbols">
  <t>Name: jwtIss</t>
  <t>Description: Issuer not recognized.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="settype" title="setType">
<t><list style="symbols">
  <t>Name: setType</t>
  <t>Description: An unexpected Event type was received.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="setparse" title="setParse">
<t><list style="symbols">
  <t>Name: setParse</t>
  <t>Description: Invalid structure was encountered such as an inability to parse or an incomplete set of Event claims.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="setdata" title="setData">
<t><list style="symbols">
  <t>Name: setData</t>
  <t>Description: SET event claims incomplete or invalid.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
<section anchor="dup" title="dup">
<t><list style="symbols">
  <t>Name: dup</t>
  <t>Description: A duplicate SET was received and has been ignored.</t>
  <t>Change Controller: IETF Secevent Working Group</t>
  <t>Defining Document(s): <xref target="error_codes"/> of this document.</t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="SET" target='https://www.rfc-editor.org/info/rfc8417'>
<front>
<title>Security Event Token (SET)</title>
<author initials='P.' surname='Hunt' fullname='P. Hunt' role='editor'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='W.' surname='Denniss' fullname='W. Denniss'><organization /></author>
<author initials='M.' surname='Ansari' fullname='M. Ansari'><organization /></author>
<date year='2018' month='July' />
<abstract><t>This specification defines the Security Event Token (SET) data structure.  A SET describes statements of fact from the perspective of an issuer about a subject.  These statements of fact represent an event that occurred directly to or about a security subject, for example, a statement about the issuance or revocation of a token on behalf of a subject.  This specification is intended to enable representing security- and identity-related events.  A SET is a JSON Web Token (JWT), which can be optionally signed and/or encrypted. SETs can be distributed via protocols such as HTTP.</t></abstract>
</front>
<seriesInfo name='RFC' value='8417'/>
<seriesInfo name='DOI' value='10.17487/RFC8417'/>
</reference>



<reference  anchor="BCP26" target='https://www.rfc-editor.org/info/rfc8126'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='M.' surname='Cotton' fullname='M. Cotton'><organization /></author>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<date year='2017' month='June' />
<abstract><t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t><t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t><t>This is the third edition of this document; it obsoletes RFC 5226.</t></abstract>
</front>
<seriesInfo name='BCP' value='26'/>
<seriesInfo name='RFC' value='8126'/>
<seriesInfo name='DOI' value='10.17487/RFC8126'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC7235" target='https://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC6750" target='https://www.rfc-editor.org/info/rfc6750'>
<front>
<title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='D.' surname='Hardt' fullname='D. Hardt'><organization /></author>
<date year='2012' month='October' />
<abstract><t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a &quot;bearer&quot;) can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6750'/>
<seriesInfo name='DOI' value='10.17487/RFC6750'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC6125" target='https://www.rfc-editor.org/info/rfc6125'>
<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<author initials='J.' surname='Hodges' fullname='J. Hodges'><organization /></author>
<date year='2011' month='March' />
<abstract><t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6125'/>
<seriesInfo name='DOI' value='10.17487/RFC6125'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>




    </references>


<section anchor="other-streaming-specifications" title="Other Streaming Specifications">
<t>[[EDITORS NOTE: This section to be removed prior to publication]]</t>

<t>The following pub/sub, queuing, streaming systems were reviewed 
as possible solutions or as input to the current draft:</t>

<t>XMPP Events</t>

<t>The WG considered the XMPP events ands its ability to provide a single
messaging solution without the need for both polling and push modes.
The feeling was the size and methodology of XMPP was to far apart from
the current capabilities of the SECEVENTs community which focuses in
on HTTP based service delivery and authorization.</t>

<t>Amazon Simple Notification Service</t>

<t>Simple Notification Service, is a pub/sub messaging product from 
AWS. SNS supports a variety of subscriber types: HTTP/HTTPS endpoints, 
AWS Lambda functions, email addresses (as JSON or plain text), phone 
numbers (via SMS), and AWS SQS standard queues. It doesn’t directly 
support pull, but subscribers can get the pull model by creating an 
SQS queue and subscribing it to the topic. Note that this puts the 
cost of pull support back onto the subscriber, just as it is in the 
push model. It is not clear that one way is strictly better than the 
other; larger, sophisticated developers may be happy to own message 
persistence so they can have their own internal delivery guarantees. 
The long tail of OIDC clients may not care about that, or may fail 
to get it right. Regardless, I think we can learn something from the 
Delivery Policies supported by SNS, as well as the delivery controls 
that SQS offers (e.g. Visibility Timeout, Dead-Letter Queues). I’m 
not suggesting that we need all of these things in the spec, but 
they give an idea of what features people have found useful.</t>

<t>Other information:</t>

<t><list style="symbols">
  <t>API Reference: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html</t>
  <t>Visibility Timeouts: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html</t>
</list></t>

<t>Apache Kafka</t>

<t>Apache Kafka is an Apache open source project based upon TCP for 
distributed streaming. It prescribes some interesting general 
purpose features that seem to extend far beyond the simpler 
streaming model SECEVENTs is after. A comment from MS has been that 
Kafka does an acknowledge with poll combination event which seems 
to be a performance advantage. See: https://kafka.apache.org/intro</t>

<t>Google Pub/Sub</t>

<t>Google Pub Sub system favours a model whereby polling and acknowledgement
of events is done as separate endpoints as separate functions.</t>

<t>Information:</t>

<t><list style="symbols">
  <t>Cloud Overview - https://cloud.google.com/pubsub/</t>
  <t>Subscriber Overview - https://cloud.google.com/pubsub/docs/subscriber</t>
  <t>Subscriber Pull(poll) - https://cloud.google.com/pubsub/docs/pull</t>
</list></t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>The editors would like to thanks the members of the SCIM WG which 
began discussions of provisioning events starting with: draft-hunt-scim-notify-00 in 2015.</t>

<t>The editors would like to thank the authors of draft-ietf-secevent-delivery-02,
on which this draft is based.</t>

<t>The editor would like to thank the participants in the the SECEVENTS
working group for their support of this specification.</t>

</section>
<section anchor="change-log" title="Change Log">
<t>Draft 00 - AB - Based on draft-ietf-secevent-delivery-02 with the 
following changes:</t>

<t><list style="symbols">
  <t>Renamed to “Push-Based SET Token Delivery Using HTTP”</t>
  <t>Removed references to the HTTP Polling delivery method.</t>
  <t>Removed informative reference to RFC6202.</t>
</list></t>

<t>Draft 01 - AB</t>

<t><list style="symbols">
  <t>Converted to Markdown</t>
  <t>Removed NumericDate definition (unused).</t>
  <t>Removed Event and Subject definitions (defined in SET).</t>
  <t>Removed text related to Event Streams.</t>
  <t>Removed Mike Jones and Phil Hunt as editors, per respective requests.</t>
  <t>Fixed area and workgroup to match secevent.</t>
  <t>Renamed Event Transmitter and Event Receiver to SET Transmitter and SET Receiver, respectively.</t>
  <t>Added IANA registry for SET Delivery Error Codes.</t>
  <t>Removed enumeration of HTTP authentication methods.</t>
  <t>Removed generally applicable guidance for HTTP, authorization tokens, and bearer tokens.</t>
  <t>Elaborated on guidance for DoS protection via authn, and moved it to Security Considerations.</t>
  <t>Removed redundant instruction to use <spanx style="verb">WWW-Authenticate</spanx> header.</t>
  <t>Removed further generally applicable guidance for authorization tokens.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
65Kctd8nwjr0u+J/AFrjYE8TVQAA

-->

</rfc>

