<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-secevent-http-push-00" category="std">

  <front>
    <title abbrev="draft-ietf-secevent-http-push">Push-Based SET Token Delivery Using HTTP</title>

    <author initials="A." surname="Backman" fullname="Annabelle Backman" role="editor">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones" role="editor">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt" role="editor">
      <organization>Oracle</organization>
      <address>
        <email>phil.hunt@yahoo.com</email>
      </address>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization>Cisco</organization>
      <address>
        <email>morteza.ansari@cisco.com</email>
      </address>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization>Microsoft</organization>
      <address>
        <email>tonynad@microsoft.com</email>
      </address>
    </author>

    <date year="2018" month="July" day="20"/>

    <area>Network</area>
    <workgroup>Network Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines how a series of security event tokens 
(SETs) may be delivered to a previously registered receiver 
using HTTP POST over TLS initiated as a push to the receiver.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction and Overview">
<t>This specification defines how a stream of SETs (see
<xref target="SET"/>) can be transmitted to a previously 
registered Event Receiver using HTTP <xref target="RFC7231"/> over TLS. The
specification defines a method to push SETs via HTTP POST.</t>

<t>This specification defines a method for SET delivery in what
is known as Event Streams.</t>

<t>This specification does not define the method by which Event 
Streams are defined, provisioned, managed, monitored,
and configured and is out of scope of this specification.</t>

<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
they appear in all capitals, as shown here.</t>

<t>For purposes of readability examples are not URL encoded.
Implementers MUST percent encode URLs as described in Section 2.1 of
<xref target="RFC3986"/>.</t>

<t>Throughout this documents all figures MAY contain spaces and extra
line-wrapping for readability and space limitations. Similarly, some
URI’s contained within examples, have been shortened for space and
readability reasons.</t>

</section>
<section anchor="defn" title="Definitions">
<t>This specification assumes terminology defined in the Security
Event Token specification <xref target="SET"/>, as well as the terms defined below:</t>

<t><list style="hanging">
  <t hangText='Event Transmitter'><vspace blankLines='0'/>
  A service provider that delivers SETs to other providers known
as Event Receivers. An Event Transmitter is responsible for offering a
service that allows the Event Receiver to check the Event Stream
configuration and status known as the “Control Plane”.</t>
  <t hangText='Event Receiver'><vspace blankLines='0'/>
  A service provider that registers to receive SETs from an Event
Transmitter and provides an endpoint to receive SETs via HTTP POST. 
Event Receivers can check current Event Stream configuration and status
by accessing the Event Transmitters “Control Plane”.</t>
  <t hangText='Event Stream'><vspace blankLines='0'/>
  An Event Stream is a defined location, distribution method and
whereby an Event Transmitter and Event Receiver exchange a pre-
defined family of SETs. A Stream is assumed to have configuration data
such as HTTP endpoints, timeouts, public key sets for signing and
encryption, and Event Families.</t>
</list></t>

</section>
</section>
<section anchor="event_stream" title="SET Event Stream Protocol">
<t>An Event Stream represents the communication channel over which a 
series of SETs are delivered to a configured Event Receiver.</t>

<section anchor="event_delivery" title="Event Delivery Process">
<t>When an Event occurs, the Event Transmitter constructs a SET
token <xref target="SET"/> that describes the Event. The Event Transmitter
determines the Event Streams over which the SET should be distributed
to.</t>

<t>How SETs are defined and the process by which Events are identified for 
Event Receivers is out-of-scope of this    specification.</t>

<t>When a SET is available for an Event Receiver, the Event Transmitter
attempts to deliver the SET based on the Event Receiver’s registered
delivery mechanism:</t>

<t><list style="symbols">
  <t>The Event Transmitter uses an HTTP/1.1 POST to the Event Receiver
endpoint to deliver the SET;</t>
  <t>Or, the Event Transmitter delivers the Event through a different
method not defined by this specification.</t>
</list></t>

<t>In Push-Based SET Delivery Using HTTP, SETs are delivered one at a
time using HTTP POST requests by an Event Transmitter to an Event
Receiver. The HTTP request body is a JSON Web Token <xref target="RFC7519"/>
with a <spanx style="verb">Content-Type</spanx> header of <spanx style="verb">application/secevent+jwt</spanx> as
defined in Section 2.2 and 6.2 of <xref target="SET"/>. Upon receipt, the 
Event Receiver acknowledges receipt with a response with HTTP 
Status 202, as described below in <xref target="httpPost"/>.</t>

<t>After successful (acknowledged) SET delivery, Event 
Transmitters SHOULD NOT be required to maintain or record SETs for 
recovery. Once a SET is acknowledged, the Event Receiver SHALL be 
responsible for retention and recovery.</t>

<t>Transmitted SETs SHOULD be self-validating (e.g. signed)
if there is a requirement to verify they were issued by the Event 
Transmitter at a later date when de-coupled from the original 
delivery where authenticity could be checked via the HTTP or 
TLS mutual authentication.</t>

<t>Upon receiving a SET, the Event Receiver reads the SET and validates 
it. The Event Receiver MUST acknowledge receipt to the Event Transmitter, using the 
defined acknowledgement or error method.</t>

<t>The Event Receiver SHALL NOT use the Event acknowledgement mechanism
to report Event errors other than relating to the parsing and validation
of the SET.</t>

</section>
<section anchor="httpPost" title="Push Delivery using HTTP">
<t>This method allows an Event Transmitter to use HTTP POST 
(Section 4.3.3 <xref target="RFC7231"/>) to deliver
SETs to a previously registered web callback URI supplied by the
Event Receiver as part of an Event Stream configuration process 
(not defined by this document).</t>

<t>The SET to be delivered MAY be signed 
and/or encrypted as defined in <xref target="SET"/>.</t>

<t>The Event Stream configuration defines a URI of an Event 
Receiver provided endpoint which accepts HTTP POST requests (e.g. 
<spanx style="verb">https://rp.example.com/Events</spanx>).</t>

<t>The HTTP Content-Type (see 
Section 3.1.1.5 <xref target="RFC7231"/>) for the HTTP POST is 
<spanx style="verb">application/secevent+jwt</spanx> and SHALL consist of 
a single SET (see <xref target="SET"/>).
As per Section 5.3.2 <xref target="RFC7231"/>, the expected 
media type (<spanx style="verb">Accept</spanx> header) response is 
<spanx style="verb">application/json</spanx>.</t>

<t>To deliver an Event, the Event Transmitter generates an event 
delivery message and uses HTTP POST to the configured endpoint with
the appropriate <spanx style="verb">Accept</spanx> and 
<spanx style="verb">Content-Type</spanx> headers.</t>

<figure title="Example HTTP POST Request" anchor="postSet"><artwork><![CDATA[
POST /Events  HTTP/1.1

Host: notify.examplerp.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Type: application/secevent+jwt
eyJhbGciOiJub25lIn0
.
eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
.
]]></artwork></figure>

<t>Upon receipt of the request, the Event Receiver SHALL 
validate the JWT structure of the SET as defined in 
Section 7.2 <xref target="RFC7519"/>. The Event Receiver 
SHALL also validate the SET information as described
in Section 2 <xref target="SET"/>.</t>

<t>If the SET is determined to be valid, the Event Receiver SHALL
“acknowledge” successful submission by responding with HTTP Status
202 as <spanx style="verb">Accepted</spanx> 
(see Section 6.3.3 <xref target="RFC7231"/>).</t>

<t>In order
to maintain compatibility with other methods of transmission, the 
Event Receiver SHOULD NOT include an HTTP response body representation
of the submitted SET or what the SET’s pending status is when 
acknowledging success. In the case of an error (e.g. HTTP Status 400),
the purpose of the HTTP response body is to indicate any SET parsing, 
validation, or cryptographic errors.</t>

<t>The following is a non-normative example of a successful
receipt of a SET.</t>

<figure title="Example Successful Delivery Response" anchor="goodPostResponse"><artwork><![CDATA[
HTTP/1.1 202 Accepted
]]></artwork></figure>

<t>Note that the purpose of the “acknowledgement” response is to let the 
Event Transmitter know that a SET has been delivered and the 
information no longer needs to be retained by the Event Transmitter. 
Before acknowledgement, Event Receivers SHOULD ensure they have 
validated received SETs and retained them in a manner appropriate 
to information retention requirements appropriate to the SET 
event types signaled. The level and method of retention of SETs
by Event Receivers is out-of-scope of this specification.</t>

<t>In the Event of a general HTTP error condition, the Event Receiver
MAY respond with an appropriate HTTP Status code as defined in 
Section 6 <xref target="RFC7231"/>.</t>

<t>When the Event Receiver detects an error parsing or 
validating a received SET (as defined by <xref target="SET"/>), 
the Event Receiver SHALL indicate an HTTP Status 400 error with an 
error code as described in <xref target="errorResponse"/>.</t>

<t>The following is an example non-normative error 
response.</t>

<figure title="Example HTTP Status 400 Response" anchor="badPostResponse"><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "err":"dup",
  "description":"SET already received. Ignored."

}
]]></artwork></figure>

</section>
<section anchor="errorResponse" title="Error Response Handling">

<t>If a SET is invalid, the following error codes are defined:</t>

<texttable title="SET Errors" anchor="reqErrors">
      <ttcol align='left'>Err Value</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>json</c>
      <c>Invalid JSON object.</c>
      <c>jwtParse</c>
      <c>Invalid or unparsable JWT or JSON structure.</c>
      <c>jwtHdr</c>
      <c>In invalid JWT header was detected.</c>
      <c>jwtCrypto</c>
      <c>Unable to parse due to unsupported algorithm.</c>
      <c>jws</c>
      <c>Signature was not validated.</c>
      <c>jwe</c>
      <c>Unable to decrypt JWE encoded data.</c>
      <c>jwtAud</c>
      <c>Invalid audience value.</c>
      <c>jwtIss</c>
      <c>Issuer not recognized.</c>
      <c>setType</c>
      <c>An unexpected Event type was received.</c>
      <c>setParse</c>
      <c>Invalid structure was encountered such as an inability to parse or an incomplete set of Event claims.</c>
      <c>setData</c>
      <c>SET event claims incomplete or invalid.</c>
      <c>dup</c>
      <c>A duplicate SET was received and has been ignored.</c>
</texttable>

<t>An error response SHALL include a JSON
object which provides details about the error. The JSON object
includes the JSON attributes:</t>

<t><list style="hanging">
  <t hangText='err'><vspace blankLines='0'/>
  A value which is a keyword that 
describes the error (see <xref target="reqErrors"/>).
description</t>
  <t>A human-readable text that provides
additional diagnostic information.</t>
</list></t>

<t>When included as part of an HTTP Status 400 response, the above
JSON is the HTTP response body (see <xref target="badPostResponse"/>).</t>

</section>
</section>
<section anchor="aa" title="Authentication and Authorization">

<t>The SET delivery method described in this specification is
based upon HTTP and depends on the use of TLS and/or standard 
HTTP authentication and authorization schemes as per 
<xref target="RFC7235"/>. For example, the following
methodologies could be used among others:</t>

<t><list style="hanging">
  <t hangText='TLS Client Authentication'><vspace blankLines='0'/>
  Event delivery
endpoints MAY request TLS mutual client authentication. 
See Section 7.3 <xref target="RFC5246"/>.</t>
  <t hangText='Bearer Tokens'><vspace blankLines='0'/>
  Bearer tokens 
<xref target="RFC6750"/> MAY be used when combined with TLS and a token
framework such as OAuth 2.0 <xref target="RFC6749"/>. 
For security considerations regarding the use of bearer tokens in
SET delivery see <xref target="bearerConsiderations"/>.</t>
  <t hangText='Basic Authentication'><vspace blankLines='0'/>
  Usage of basic
authentication should be avoided due to its use of a single factor
that is based upon a relatively static, symmetric secret.
Implementers SHOULD combine the use of basic authentication with
other factors. The security considerations of HTTP BASIC, are well
documented in <xref target="RFC7617"/> and SHOULD be considered
along with using signed SETs (see SET Payload Authentication below).</t>
  <t hangText='SET Payload Authentication'><vspace blankLines='0'/>
  In scenarios 
where SETs are signed and
the delivery method is HTTP POST (see <xref target="httpPost"/>),
Event Receivers MAY elect to use Basic Authentication or not 
to use HTTP or TLS based authentication at all. See 
<xref target="payloadAuthentication"/> for considerations.</t>
</list></t>

<t>As per Section 4.1 of <xref target="RFC7235"/>, a SET
delivery endpoint SHALL indicate supported HTTP authentication 
schemes via the <spanx style="verb">WWW-Authenticate</spanx> header.</t>

<t>Because SET Delivery describes a simple function, authorization
for the ability to pick-up or deliver SETs can be derived by
considering the identity of the SET issuer, or via an authentication
method above. This specification considers authentication as a
feature to prevent denial-of-service attacks. Because SETs are
not commands (see ), Event Receivers are free to ignore SETs that 
are not of interest.</t>

<t>For illustrative purposes only, SET delivery examples show an OAuth2
bearer token value <xref target="RFC6750"/> in the authorization header.
This is not intended to imply that bearer tokens are
preferred. However, the use of bearer tokens in the specification does
reflect common practice.</t>

<section anchor="authzTokens" title="Use of Tokens as Authorizations">
<t>When using bearer tokens or proof-of-possession tokens that
represent an authorization grant such as issued by OAuth (see <xref target="RFC6749"/>), implementers SHOULD consider the type of
authorization granted, any authorized scopes (see Section 3.3 of <xref target="RFC6749"/>), and the security subject(s) that SHOULD be mapped
from the authorization when considering local access control rules.
Section 6 of the OAuth Assertions draft <xref target="RFC7521"/>, documents common scenarios for
authorization including:</t>

<t><list style="symbols">
  <t>Clients using an assertion to authenticate and/or act on behalf
of itself;</t>
  <t>Clients acting on behalf of a user; and,</t>
  <t>A Client acting on behalf of an anonymous user (e.g., see next
section).</t>
</list></t>

<t>When using OAuth authorization tokens, implementers MUST take
into account the threats and countermeasures documented in the
security considerations for the use of client authorizations (see
Section 8 of <xref target="RFC7521"/>). When using
other token formats or frameworks, implementers MUST take into account
similar threats and countermeasures, especially those documented by
the relevant specifications.</t>

</section>
</section>
<section anchor="Security" title="Security Considerations">

<section anchor="payloadAuthentication" title="Authentication Using Signed SETs">
<t>In scenarios where HTTP authorization or TLS mutual authentication
are not used or are considered weak, JWS signed SETs SHOULD be 
used (see <xref target="RFC7515"/> and 
Security Considerations <xref target="SET"/>). This enables the Event Receiver
to validate that the SET issuer is authorized to deliver SETs.</t>

</section>
<section anchor="http-considerations" title="HTTP Considerations">
<t>SET delivery depends on the use of Hypertext Transfer Protocol and thus
subject to the security considerations of HTTP Section 9 <xref target="RFC7230"/> and its related specifications.</t>

<t>As stated in Section 2.7.1 <xref target="RFC7230"/>, an 
HTTP requestor MUST NOT generate the <spanx style="verb">userinfo</spanx>
(i.e., username and password) component (and its “@” delimiter) when
an “http” URI reference is generated with a message as they are now
disallowed in HTTP.</t>

</section>
<section anchor="tls-support-considerations" title="TLS Support Considerations">
<t>SETs contain sensitive information that is considered PII
(e.g. subject claims). Therefore, Event Transmitters and
Event Receivers MUST require the use of a transport-layer 
security mechanism. Event delivery endpoints MUST support TLS 
1.2 <xref target="RFC5246"/> and MAY support additional 
transport-layer mechanisms meeting its security requirements. 
When using TLS, the client MUST perform a TLS/SSL server
certificate check, per <xref target="RFC6125"/>. Implementation
security considerations for TLS can be found in “Recommendations for
Secure Use of TLS and DTLS” <xref target="RFC7525"/>.</t>

</section>
<section anchor="authorization-token-considerations" title="Authorization Token Considerations">
<t>When using authorization tokens such as those issued by OAuth 2.0
<xref target="RFC6749"/>, implementers MUST take into account threats
and countermeasures documented in Section 8 of <xref target="RFC7521"/>.</t>

<section anchor="bearerConsiderations" title="Bearer Token Considerations">
<t>Due to the possibility of interception, Bearer tokens MUST be 
exchanged using TLS.</t>

<t>Bearer tokens MUST have a limited lifetime that can be determined
directly or indirectly (e.g., by checking with a validation service)
by the service provider. By expiring tokens, clients are forced to
obtain a new token (which usually involves re-authentication) for
continued authorized access. For example, in OAuth2, a client MAY use
OAuth token refresh to obtain a new bearer token after authenticating
to an authorization server. See Section 6 of <xref target="RFC6749"/>.</t>

<t>Implementations supporting OAuth bearer tokens need to factor in
security considerations of this authorization method 
<xref target="RFC7521"/>. Since security is only as good
as the weakest link, implementers also need to consider authentication
choices coupled with OAuth bearer tokens. The security considerations
of the default authentication method for OAuth bearer tokens, HTTP
BASIC, are well documented in 
<xref target="RFC7617"/>, therefore implementers
are encouraged to prefer stronger authentication methods. Designating
the specific methods of authentication and authorization are
out-of-scope for the delivery of SET tokens, however this 
information is provided as a resource to implementers.</t>

</section>
</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>If a SET needs to be retained for audit purposes, JWS MAY 
be used to provide verification of its authenticity.</t>

<t>Event Transmitters SHOULD attempt to specialize Event Streams 
so that the content is targeted to the specific business and 
protocol needs of subscribers.</t>

<t>When sharing personally identifiable information or information
that is otherwise considered confidential to affected users, Event 
Transmitters and Receivers MUST have the appropriate legal agreements
and user consent or terms of service in place.</t>

<t>The propagation of subject identifiers can be perceived as personally
identifiable information. Where possible, Event Transmitters and Receivers
SHOULD devise approaches that prevent propagation — for example, the
passing of a hash value that requires the subscriber to already know
the subject.</t>

</section>
<section anchor="IANA" title="IANA Considerations">

<t>There are no IANA considerations.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="SET" target='https://www.rfc-editor.org/info/rfc8417'>
<front>
<title>Security Event Token (SET)</title>
<author initials='P.' surname='Hunt' fullname='P. Hunt' role='editor'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='W.' surname='Denniss' fullname='W. Denniss'><organization /></author>
<author initials='M.' surname='Ansari' fullname='M. Ansari'><organization /></author>
<date year='2018' month='July' />
<abstract><t>This specification defines the Security Event Token (SET) data structure.  A SET describes statements of fact from the perspective of an issuer about a subject.  These statements of fact represent an event that occurred directly to or about a security subject, for example, a statement about the issuance or revocation of a token on behalf of a subject.  This specification is intended to enable representing security- and identity-related events.  A SET is a JSON Web Token (JWT), which can be optionally signed and/or encrypted. SETs can be distributed via protocols such as HTTP.</t></abstract>
</front>
<seriesInfo name='RFC' value='8417'/>
<seriesInfo name='DOI' value='10.17487/RFC8417'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC7235" target='https://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC6750" target='https://www.rfc-editor.org/info/rfc6750'>
<front>
<title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='D.' surname='Hardt' fullname='D. Hardt'><organization /></author>
<date year='2012' month='October' />
<abstract><t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a &quot;bearer&quot;) can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6750'/>
<seriesInfo name='DOI' value='10.17487/RFC6750'/>
</reference>



<reference  anchor="RFC6749" target='https://www.rfc-editor.org/info/rfc6749'>
<front>
<title>The OAuth 2.0 Authorization Framework</title>
<author initials='D.' surname='Hardt' fullname='D. Hardt' role='editor'><organization /></author>
<date year='2012' month='October' />
<abstract><t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6749'/>
<seriesInfo name='DOI' value='10.17487/RFC6749'/>
</reference>



<reference  anchor="RFC7617" target='https://www.rfc-editor.org/info/rfc7617'>
<front>
<title>The 'Basic' HTTP Authentication Scheme</title>
<author initials='J.' surname='Reschke' fullname='J. Reschke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This document defines the &quot;Basic&quot; Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t></abstract>
</front>
<seriesInfo name='RFC' value='7617'/>
<seriesInfo name='DOI' value='10.17487/RFC7617'/>
</reference>



<reference  anchor="RFC7521" target='https://www.rfc-editor.org/info/rfc7521'>
<front>
<title>Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants</title>
<author initials='B.' surname='Campbell' fullname='B. Campbell'><organization /></author>
<author initials='C.' surname='Mortimore' fullname='C. Mortimore'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='Y.' surname='Goland' fullname='Y. Goland'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification provides a framework for the use of assertions with OAuth 2.0 in the form of a new client authentication mechanism and a new authorization grant type.  Mechanisms are specified for transporting assertions during interactions with a token endpoint; general processing rules are also specified.</t><t>The intent of this specification is to provide a common framework for OAuth 2.0 to interwork with other identity systems using assertions and to provide alternative client authentication mechanisms.</t><t>Note that this specification only defines abstract message flows and processing rules.  In order to be implementable, companion specifications are necessary to provide the corresponding concrete instantiations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7521'/>
<seriesInfo name='DOI' value='10.17487/RFC7521'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6125" target='https://www.rfc-editor.org/info/rfc6125'>
<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<author initials='J.' surname='Hodges' fullname='J. Hodges'><organization /></author>
<date year='2011' month='March' />
<abstract><t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6125'/>
<seriesInfo name='DOI' value='10.17487/RFC6125'/>
</reference>



<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>




    </references>



<section anchor="other-streaming-specifications" title="Other Streaming Specifications">
<t>[[EDITORS NOTE: This section to be removed prior to publication]]</t>

<t>The following pub/sub, queuing, streaming systems were reviewed 
as possible solutions or as input to the current draft:</t>

<t>XMPP Events</t>

<t>The WG considered the XMPP events ands its ability to provide a single
messaging solution without the need for both polling and push modes.
The feeling was the size and methodology of XMPP was to far apart from
the current capabilities of the SECEVENTs community which focuses in
on HTTP based service delivery and authorization.</t>

<t>Amazon Simple Notification Service</t>

<t>Simple Notification Service, is a pub/sub messaging product from 
AWS. SNS supports a variety of subscriber types: HTTP/HTTPS endpoints, 
AWS Lambda functions, email addresses (as JSON or plain text), phone 
numbers (via SMS), and AWS SQS standard queues. It doesn’t directly 
support pull, but subscribers can get the pull model by creating an 
SQS queue and subscribing it to the topic. Note that this puts the 
cost of pull support back onto the subscriber, just as it is in the 
push model. It is not clear that one way is strictly better than the 
other; larger, sophisticated developers may be happy to own message 
persistence so they can have their own internal delivery guarantees. 
The long tail of OIDC clients may not care about that, or may fail 
to get it right. Regardless, I think we can learn something from the 
Delivery Policies supported by SNS, as well as the delivery controls 
that SQS offers (e.g. Visibility Timeout, Dead-Letter Queues). I’m 
not suggesting that we need all of these things in the spec, but 
they give an idea of what features people have found useful.</t>

<t>Other information:</t>

<t><list style="symbols">
  <t>API Reference: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html</t>
  <t>Visibility Timeouts: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html</t>
</list></t>

<t>Apache Kafka</t>

<t>Apache Kafka is an Apache open source project based upon TCP for 
distributed streaming. It prescribes some interesting general 
purpose features that seem to extend far beyond the simpler 
streaming model SECEVENTs is after. A comment from MS has been that 
Kafka does an acknowledge with poll combination event which seems 
to be a performance advantage. See: https://kafka.apache.org/intro</t>

<t>Google Pub/Sub</t>

<t>Google Pub Sub system favours a model whereby polling and acknowledgement
of events is done as separate endpoints as separate functions.</t>

<t>Information:</t>

<t><list style="symbols">
  <t>Cloud Overview - https://cloud.google.com/pubsub/</t>
  <t>Subscriber Overview - https://cloud.google.com/pubsub/docs/subscriber</t>
  <t>Subscriber Pull(poll) - https://cloud.google.com/pubsub/docs/pull</t>
</list></t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>The editors would like to thanks the members of the SCIM WG which 
began discussions of provisioning events starting with: draft-hunt-scim-notify-00 in 2015.</t>

<t>The editors would like to thank the authors of draft-ietf-secevent-delivery-02,
on which this draft is based.</t>

<t>The editor would like to thank the participants in the the SECEVENTS
working group for their support of this specification.</t>

</section>
<section anchor="change-log" title="Change Log">
<t>Draft 00 - AB - Based on draft-ietf-secevent-delivery-02 with the 
following changes:</t>

<t><list style="symbols">
  <t>Renamed to “Push-Based SET Token Delivery Using HTTP”</t>
  <t>Removed references to the HTTP Polling delivery method.</t>
  <t>Removed informative reference to RFC6202.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

