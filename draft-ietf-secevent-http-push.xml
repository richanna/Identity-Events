<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-secevent-http-push-01" category="std">

  <front>
    <title abbrev="draft-ietf-secevent-http-push">Push-Based SET Token Delivery Using HTTP</title>

    <author initials="A." surname="Backman" fullname="Annabelle Backman" role="editor">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt">
      <organization>Oracle</organization>
      <address>
        <email>phil.hunt@yahoo.com</email>
      </address>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="M." surname="Ansari" fullname="Morteza Ansari">
      <organization>Cisco</organization>
      <address>
        <email>morteza.ansari@cisco.com</email>
      </address>
    </author>
    <author initials="A." surname="Nadalin" fullname="Anthony Nadalin">
      <organization>Microsoft</organization>
      <address>
        <email>tonynad@microsoft.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="23"/>

    <area>Security</area>
    <workgroup>Security Events Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines how a series of security event tokens 
(SETs) may be delivered to a previously registered receiver 
using HTTP POST over TLS initiated as a push to the receiver.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction and Overview">
<t>This specification defines how a stream of SETs <xref target="SET"/> can be
transmitted to a previously registered Event Receiver using <xref target="HTTP"/>
over TLS.  The specification defines a method to push SETs via HTTP
POST.</t>

<t>This specification defines a method for SET delivery in what
is known as Event Streams.</t>

<t>This specification does not define the method by which Event 
Streams are defined, provisioned, managed, monitored,
and configured and is out of scope of this specification.</t>

<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
they appear in all capitals, as shown here.</t>

<t>For purposes of readability examples are not URL encoded.
Implementers MUST percent encode URLs as described in Section 2.1 of
<xref target="RFC3986"/>.</t>

<t>Throughout this documents all figures MAY contain spaces and extra
line-wrapping for readability and space limitations. Similarly, some
URI’s contained within examples, have been shortened for space and
readability reasons.</t>

</section>
<section anchor="defn" title="Definitions">
<t>This specification assumes terminology defined in the Security
Event Token specification <xref target="SET"/>.</t>

<t>The following definitions are defined for Security Event distribution:</t>

<t><list style="hanging">
  <t hangText='Event Transmitter'><vspace blankLines='0'/>
  A service provider that delivers SETs to other providers known
as Event Receivers. An Event Transmitter is responsible for offering a
service that allows the Event Receiver to check the Event Stream
configuration and status known as the “Control Plane”.</t>
  <t hangText='Event Receiver'><vspace blankLines='0'/>
  A service provider that registers to receive SETs from an Event
Transmitter and provides an endpoint to receive SETs via HTTP POST. 
Event Receivers can check current Event Stream configuration and status
by accessing the Event Transmitters “Control Plane”.</t>
  <t hangText='Event Stream'><vspace blankLines='0'/>
  An Event Stream is a defined location, distribution method and
whereby an Event Transmitter and Event Receiver exchange a pre-
defined family of SETs. A Stream is assumed to have configuration data
such as HTTP endpoints, timeouts, public key sets for signing and
encryption, and Event Families.</t>
  <t hangText='Subject'><vspace blankLines='0'/>
  The security subject around which a security event has occurred. For
example, a security subject might per a user, a person, an email
address, a service provider entity, an IP address, an OAuth Client, a
mobile device, or any identifiable thing referenced in security and
authorization systems.</t>
  <t hangText='Event'><vspace blankLines='0'/>
  An Event is defined to be an event as represented by a security event
token (SET).  See <xref target="SET"/>.</t>
  <t hangText='NumericDate'><vspace blankLines='0'/>
  A JSON numeric value representing the number of seconds from
1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring
leap seconds.  This is equivalent to the IEEE Std 1003.1, 2013 Edition
<xref target="POSIX.1"></xref> definition “Seconds Since the Epoch”, in
which each day is accounted for by exactly 86400 seconds, other than
that non-integer values can be represented.  See <xref target="RFC3339"/> for
details regarding date/times in general and UTC in particular.</t>
</list></t>

</section>
</section>
<section anchor="event_stream" title="SET Event Stream Protocol">
<t>An Event Stream represents the communication channel over which a 
series of SETs are delivered to a configured Event Receiver.</t>

<section anchor="event_delivery" title="Event Delivery Process">
<t>When an Event occurs, the Event Transmitter constructs a SET
token <xref target="SET"/> that describes the Event. The Event Transmitter
determines the Event Streams over which the SET should be distributed
to.</t>

<t>How SETs are defined and the process by which Events are identified for 
Event Receivers is out-of-scope of this    specification.</t>

<t>When a SET is available for an Event Receiver, the Event Transmitter
attempts to deliver the SET based on the Event Receiver’s registered
delivery mechanism:</t>

<t><list style="symbols">
  <t>The Event Transmitter uses an HTTP/1.1 POST to the Event Receiver
endpoint to deliver the SET;</t>
  <t>Or, the Event Transmitter delivers the Event through a different
method not defined by this specification.</t>
</list></t>

<t>In Push-Based SET Delivery Using HTTP, SETs are delivered one at a
time using HTTP POST requests by an Event Transmitter to an Event
Receiver. The HTTP request body is a JSON Web Token <xref target="RFC7519"/>
with a <spanx style="verb">Content-Type</spanx> header of <spanx style="verb">application/secevent+jwt</spanx> as
defined in Section 2.2 and 6.2 of <xref target="SET"/>. Upon receipt, the 
Event Receiver acknowledges receipt with a response with HTTP 
Status 202, as described below in <xref target="httpPost"/>.</t>

<t>After successful (acknowledged) SET delivery, Event 
Transmitters SHOULD NOT be required to maintain or record SETs for 
recovery. Once a SET is acknowledged, the Event Receiver SHALL be 
responsible for retention and recovery.</t>

<t>Transmitted SETs SHOULD be self-validating (e.g. signed)
if there is a requirement to verify they were issued by the Event 
Transmitter at a later date when de-coupled from the original 
delivery where authenticity could be checked via the HTTP or 
TLS mutual authentication.</t>

<t>Upon receiving a SET, the Event Receiver reads the SET and validates 
it. The Event Receiver MUST acknowledge receipt to the Event Transmitter, using the 
defined acknowledgement or error method.</t>

<t>The Event Receiver SHALL NOT use the Event acknowledgement mechanism
to report Event errors other than relating to the parsing and validation
of the SET.</t>

</section>
<section anchor="httpPost" title="Push Delivery using HTTP">
<t>This method allows an Event Transmitter to use HTTP POST 
(Section 4.3.3 of <xref target="RFC7231"/>) to deliver
SETs to a previously registered web callback URI supplied by the
Event Receiver as part of an Event Stream configuration process 
(not defined by this document).</t>

<t>The SET to be delivered MAY be signed 
and/or encrypted as defined in <xref target="SET"/>.</t>

<t>The Event Stream configuration defines a URI of an Event 
Receiver provided endpoint which accepts HTTP POST requests (e.g. 
<spanx style="verb">https://rp.example.com/Events</spanx>).</t>

<t>The HTTP Content-Type (see 
Section 3.1.1.5 of <xref target="RFC7231"/>) for the HTTP POST is 
<spanx style="verb">application/secevent+jwt</spanx> and SHALL consist of 
a single SET (see <xref target="SET"/>).
As per Section 5.3.2 of <xref target="RFC7231"/>, the expected 
media type (<spanx style="verb">Accept</spanx> header) response is 
<spanx style="verb">application/json</spanx>.</t>

<t>To deliver an Event, the Event Transmitter generates an event 
delivery message and uses HTTP POST to the configured endpoint with
the appropriate <spanx style="verb">Accept</spanx> and 
<spanx style="verb">Content-Type</spanx> headers.</t>

<figure title="Example HTTP POST Request" anchor="postSet"><artwork><![CDATA[
POST /Events  HTTP/1.1

Host: notify.examplerp.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Type: application/secevent+jwt
eyJhbGciOiJub25lIn0
.
eyJwdWJsaXNoZXJVcmkiOiJodHRwczovL3NjaW0uZXhhbXBsZS5jb20iLCJmZWV
kVXJpcyI6WyJodHRwczovL2podWIuZXhhbXBsZS5jb20vRmVlZHMvOThkNTI0Nj
FmYTViYmM4Nzk1OTNiNzc1NCIsImh0dHBzOi8vamh1Yi5leGFtcGxlLmNvbS9GZ
WVkcy81ZDc2MDQ1MTZiMWQwODY0MWQ3Njc2ZWU3Il0sInJlc291cmNlVXJpcyI6
WyJodHRwczovL3NjaW0uZXhhbXBsZS5jb20vVXNlcnMvNDRmNjE0MmRmOTZiZDZ
hYjYxZTc1MjFkOSJdLCJldmVudFR5cGVzIjpbIkNSRUFURSJdLCJhdHRyaWJ1dG
VzIjpbImlkIiwibmFtZSIsInVzZXJOYW1lIiwicGFzc3dvcmQiLCJlbWFpbHMiX
SwidmFsdWVzIjp7ImVtYWlscyI6W3sidHlwZSI6IndvcmsiLCJ2YWx1ZSI6Impk
b2VAZXhhbXBsZS5jb20ifV0sInBhc3N3b3JkIjoibm90NHUybm8iLCJ1c2VyTmF
tZSI6Impkb2UiLCJpZCI6IjQ0ZjYxNDJkZjk2YmQ2YWI2MWU3NTIxZDkiLCJuYW
1lIjp7ImdpdmVuTmFtZSI6IkpvaG4iLCJmYW1pbHlOYW1lIjoiRG9lIn19fQ
.
]]></artwork></figure>

<t>Upon receipt of the request, the Event Receiver SHALL 
validate the JWT structure of the SET as defined in 
Section 7.2 of <xref target="RFC7519"/>. The Event Receiver 
SHALL also validate the SET information as described
in Section 2 of <xref target="SET"/>.</t>

<t>If the SET is determined to be valid, the Event Receiver SHALL
“acknowledge” successful submission by responding with HTTP Status
202 as <spanx style="verb">Accepted</spanx> 
(see Section 6.3.3 of <xref target="RFC7231"/>).</t>

<t>In order
to maintain compatibility with other methods of transmission, the 
Event Receiver SHOULD NOT include an HTTP response body representation
of the submitted SET or what the SET’s pending status is when 
acknowledging success. In the case of an error (e.g. HTTP Status 400),
the purpose of the HTTP response body is to indicate any SET parsing, 
validation, or cryptographic errors.</t>

<t>The following is a non-normative example of a successful
receipt of a SET.</t>

<figure title="Example Successful Delivery Response" anchor="goodPostResponse"><artwork><![CDATA[
HTTP/1.1 202 Accepted
]]></artwork></figure>

<t>Note that the purpose of the “acknowledgement” response is to let the 
Event Transmitter know that a SET has been delivered and the 
information no longer needs to be retained by the Event Transmitter. 
Before acknowledgement, Event Receivers SHOULD ensure they have 
validated received SETs and retained them in a manner appropriate 
to information retention requirements appropriate to the SET 
event types signaled. The level and method of retention of SETs
by Event Receivers is out-of-scope of this specification.</t>

<t>In the Event of a general HTTP error condition, the Event Receiver
MAY respond with an appropriate HTTP Status code as defined in 
Section 6 of <xref target="RFC7231"/>.</t>

<t>When the Event Receiver detects an error parsing or 
validating a received SET (as defined by <xref target="SET"/>), 
the Event Receiver SHALL indicate an HTTP Status 400 error with an 
error code as described in <xref target="errorResponse"/>.</t>

<t>The following is an example non-normative error 
response.</t>

<figure title="Example HTTP Status 400 Response" anchor="badPostResponse"><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "err":"dup",
  "description":"SET already received. Ignored."

}
]]></artwork></figure>

</section>
<section anchor="errorResponse" title="Error Response Handling">

<t>If a SET is invalid, the following error codes are defined:</t>

<figure title="SET Errors" anchor="reqErrors"><artwork><![CDATA[
+-----------+------------------------------------------------------+
| Err Value | Description                                          |
+-----------+------------------------------------------------------+
| json      | Invalid JSON object.                                 |
| jwtParse  | Invalid or unparsable JWT or JSON structure.         |
| jwtHdr    | In invalid JWT header was detected.                  |
| jwtCrypto | Unable to parse due to unsupported algorithm.        |
| jws       | Signature was not validated.                         |
| jwe       | Unable to decrypt JWE encoded data.                  |
| jwtAud    | Invalid audience value.                              |
| jwtIss    | Issuer not recognized.                               |
| setType   | An unexpected Event type was received.               |
| setParse  | Invalid structure was encountered such as an         |
|           | inability to parse or an incomplete set of Event     |
|           | claims.                                              |
| setData   | SET event claims incomplete or invalid.              |
| dup       | A duplicate SET was received and has been ignored    |
+-----------+------------------------------------------------------+
]]></artwork></figure>

<t>An error response SHALL include a JSON
object which provides details about the error. The JSON object
includes the JSON attributes:</t>

<t><list style="hanging">
  <t hangText='err'><vspace blankLines='0'/>
  A value which is a keyword that 
describes the error (see <xref target="reqErrors"/>).
description</t>
  <t>A human-readable text that provides
additional diagnostic information.</t>
</list></t>

<t>When included as part of an HTTP Status 400 response, the above
JSON is the HTTP response body (see <xref target="badPostResponse"/>).</t>

</section>
</section>
<section anchor="aa" title="Authentication and Authorization">

<t>The SET delivery method described in this specification is
based upon HTTP and depends on the use of TLS and/or standard 
HTTP authentication and authorization schemes as per 
<xref target="RFC7235"/>. For example, the following
methodologies could be used among others:</t>

<t><list style="hanging">
  <t hangText='TLS Client Authentication'><vspace blankLines='0'/>
  Event delivery
endpoints MAY request TLS mutual client authentication. 
See Section 7.3 of <xref target="RFC5246"/>.</t>
  <t hangText='Bearer Tokens'><vspace blankLines='0'/>
  Bearer tokens 
<xref target="RFC6750"/> MAY be used when combined with TLS and a token
framework such as OAuth 2.0 <xref target="RFC6749"/>. 
For security considerations regarding the use of bearer tokens in
SET delivery see <xref target="bearerConsiderations"/>.</t>
  <t hangText='Basic Authentication'><vspace blankLines='0'/>
  Usage of basic
authentication should be avoided due to its use of a single factor
that is based upon a relatively static, symmetric secret.
Implementers SHOULD combine the use of basic authentication with
other factors. The security considerations of HTTP BASIC, are well
documented in <xref target="RFC7617"/> and SHOULD be considered
along with using signed SETs (see SET Payload Authentication below).</t>
  <t hangText='SET Payload Authentication'><vspace blankLines='0'/>
  In scenarios 
where SETs are signed and
the delivery method is HTTP POST (see <xref target="httpPost"/>),
Event Receivers MAY elect to use Basic Authentication or not 
to use HTTP or TLS based authentication at all. See 
<xref target="payloadAuthentication"/> for considerations.</t>
</list></t>

<t>As per Section 4.1 of <xref target="RFC7235"/>, a SET
delivery endpoint SHALL indicate supported HTTP authentication 
schemes via the <spanx style="verb">WWW-Authenticate</spanx> header.</t>

<t>Because SET Delivery describes a simple function, authorization
for the ability to pick-up or deliver SETs can be derived by
considering the identity of the SET issuer, or via an authentication
method above. This specification considers authentication as a
feature to prevent denial-of-service attacks. Because SETs are
not commands (see ), Event Receivers are free to ignore SETs that 
are not of interest.</t>

<t>For illustrative purposes only, SET delivery examples show an OAuth2
bearer token value <xref target="RFC6750"/> in the authorization header.
This is not intended to imply that bearer tokens are
preferred. However, the use of bearer tokens in the specification does
reflect common practice.</t>

<section anchor="authzTokens" title="Use of Tokens as Authorizations">
<t>When using bearer tokens or proof-of-possession tokens that
represent an authorization grant such as issued by OAuth (see <xref target="RFC6749"/>), implementers SHOULD consider the type of
authorization granted, any authorized scopes (see Section 3.3 of <xref target="RFC6749"/>), and the security subject(s) that SHOULD be mapped
from the authorization when considering local access control rules.
Section 6 of the OAuth Assertions draft <xref target="RFC7521"/>, documents common scenarios for
authorization including:</t>

<t><list style="symbols">
  <t>Clients using an assertion to authenticate and/or act on behalf
of itself;</t>
  <t>Clients acting on behalf of a user; and,</t>
  <t>A Client acting on behalf of an anonymous user (e.g., see next
section).</t>
</list></t>

<t>When using OAuth authorization tokens, implementers MUST take
into account the threats and countermeasures documented in the
security considerations for the use of client authorizations (see
Section 8 of <xref target="RFC7521"/>). When using
other token formats or frameworks, implementers MUST take into account
similar threats and countermeasures, especially those documented by
the relevant specifications.</t>

</section>
</section>
<section anchor="Security" title="Security Considerations">

<section anchor="payloadAuthentication" title="Authentication Using Signed SETs">
<t>In scenarios where HTTP authorization or TLS mutual authentication
are not used or are considered weak, JWS signed SETs SHOULD be 
used (see <xref target="RFC7515"/> and <xref target="SET"/>
Security Considerations). This enables the Event Receiver
to validate that the SET issuer is authorized to deliver SETs.</t>

</section>
<section anchor="http-considerations" title="HTTP Considerations">
<t>SET delivery depends on the use of Hypertext Transfer Protocol and thus
subject to the security considerations of HTTP Section 9 of <xref target="RFC7230"/> and its related specifications.</t>

<t>As stated in Section 2.7.1 of <xref target="RFC7230"/>, an 
HTTP requestor MUST NOT generate the <spanx style="verb">userinfo</spanx>
(i.e., username and password) component (and its “@” delimiter) when
an “http” URI reference is generated with a message as they are now
disallowed in HTTP.</t>

</section>
<section anchor="tls-support-considerations" title="TLS Support Considerations">
<t>SETs contain sensitive information that is considered PII
(e.g. subject claims). Therefore, Event Transmitters and
Event Receivers MUST require the use of a transport-layer 
security mechanism. Event delivery endpoints MUST support TLS 
1.2 <xref target="RFC5246"/> and MAY support additional 
transport-layer mechanisms meeting its security requirements. 
When using TLS, the client MUST perform a TLS/SSL server
certificate check, per <xref target="RFC6125"/>. Implementation
security considerations for TLS can be found in “Recommendations for
Secure Use of TLS and DTLS” <xref target="RFC7525"/>.</t>

</section>
<section anchor="authorization-token-considerations" title="Authorization Token Considerations">
<t>When using authorization tokens such as those issued by OAuth 2.0
<xref target="RFC6749"/>, implementers MUST take into account threats
and countermeasures documented in Section 8 of <xref target="RFC7521"/>.</t>

</section>
<section anchor="bearerConsiderations" title="Bearer Token Considerations">
<t>Due to the possibility of interception, Bearer tokens MUST be 
exchanged using TLS.</t>

<t>Bearer tokens MUST have a limited lifetime that can be determined
directly or indirectly (e.g., by checking with a validation service)
by the service provider. By expiring tokens, clients are forced to
obtain a new token (which usually involves re-authentication) for
continued authorized access. For example, in OAuth2, a client MAY use
OAuth token refresh to obtain a new bearer token after authenticating
to an authorization server. See Section 6 of <xref target="RFC6749"/>.</t>

<t>Implementations supporting OAuth bearer tokens need to factor in
security considerations of this authorization method 
<xref target="RFC7521"/>. Since security is only as good
as the weakest link, implementers also need to consider authentication
choices coupled with OAuth bearer tokens. The security considerations
of the default authentication method for OAuth bearer tokens, HTTP
BASIC, are well documented in 
<xref target="RFC7617"/>, therefore implementers
are encouraged to prefer stronger authentication methods. Designating
the specific methods of authentication and authorization are
out-of-scope for the delivery of SET tokens, however this 
information is provided as a resource to implementers.</t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>If a SET needs to be retained for audit purposes, JWS MAY 
be used to provide verification of its authenticity.</t>

<t>Event Transmitters SHOULD attempt to specialize Event Streams 
so that the content is targeted to the specific business and 
protocol needs of subscribers.</t>

<t>When sharing personally identifiable information or information
that is otherwise considered confidential to affected users, Event 
Transmitters and Receivers MUST have the appropriate legal agreements
and user consent or terms of service in place.</t>

<t>The propagation of subject identifiers can be perceived as personally
identifiable information. Where possible, Event Transmitters and Receivers
SHOULD devise approaches that prevent propagation — for example, the
passing of a hash value that requires the subscriber to already know
the subject.</t>

</section>
<section anchor="IANA" title="IANA Considerations">

<t>There are no IANA considerations.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="SET" target='https://www.rfc-editor.org/info/rfc8417'>
<front>
<title>Security Event Token (SET)</title>
<author initials='P.' surname='Hunt' fullname='P. Hunt' role='editor'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='W.' surname='Denniss' fullname='W. Denniss'><organization /></author>
<author initials='M.' surname='Ansari' fullname='M. Ansari'><organization /></author>
<date year='2018' month='July' />
<abstract><t>This specification defines the Security Event Token (SET) data structure.  A SET describes statements of fact from the perspective of an issuer about a subject.  These statements of fact represent an event that occurred directly to or about a security subject, for example, a statement about the issuance or revocation of a token on behalf of a subject.  This specification is intended to enable representing security- and identity-related events.  A SET is a JSON Web Token (JWT), which can be optionally signed and/or encrypted. SETs can be distributed via protocols such as HTTP.</t></abstract>
</front>
<seriesInfo name='RFC' value='8417'/>
<seriesInfo name='DOI' value='10.17487/RFC8417'/>
</reference>



<reference  anchor="HTTP" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>


<reference anchor="POSIX.1" >
  <front>
    <title>The Open Group Base Specifications Issue 7</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2013"/>
  </front>
  <seriesInfo name="IEEE" value="Std 1003.1, 2013 Edition"/>
  <format type="HTML" target="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_15"/>
</reference>




<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>



<reference  anchor="RFC7519" target='https://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7235" target='https://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC6750" target='https://www.rfc-editor.org/info/rfc6750'>
<front>
<title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='D.' surname='Hardt' fullname='D. Hardt'><organization /></author>
<date year='2012' month='October' />
<abstract><t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a &quot;bearer&quot;) can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6750'/>
<seriesInfo name='DOI' value='10.17487/RFC6750'/>
</reference>



<reference  anchor="RFC6749" target='https://www.rfc-editor.org/info/rfc6749'>
<front>
<title>The OAuth 2.0 Authorization Framework</title>
<author initials='D.' surname='Hardt' fullname='D. Hardt' role='editor'><organization /></author>
<date year='2012' month='October' />
<abstract><t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6749'/>
<seriesInfo name='DOI' value='10.17487/RFC6749'/>
</reference>



<reference  anchor="RFC7617" target='https://www.rfc-editor.org/info/rfc7617'>
<front>
<title>The 'Basic' HTTP Authentication Scheme</title>
<author initials='J.' surname='Reschke' fullname='J. Reschke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This document defines the &quot;Basic&quot; Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t></abstract>
</front>
<seriesInfo name='RFC' value='7617'/>
<seriesInfo name='DOI' value='10.17487/RFC7617'/>
</reference>



<reference  anchor="RFC7521" target='https://www.rfc-editor.org/info/rfc7521'>
<front>
<title>Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants</title>
<author initials='B.' surname='Campbell' fullname='B. Campbell'><organization /></author>
<author initials='C.' surname='Mortimore' fullname='C. Mortimore'><organization /></author>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='Y.' surname='Goland' fullname='Y. Goland'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification provides a framework for the use of assertions with OAuth 2.0 in the form of a new client authentication mechanism and a new authorization grant type.  Mechanisms are specified for transporting assertions during interactions with a token endpoint; general processing rules are also specified.</t><t>The intent of this specification is to provide a common framework for OAuth 2.0 to interwork with other identity systems using assertions and to provide alternative client authentication mechanisms.</t><t>Note that this specification only defines abstract message flows and processing rules.  In order to be implementable, companion specifications are necessary to provide the corresponding concrete instantiations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7521'/>
<seriesInfo name='DOI' value='10.17487/RFC7521'/>
</reference>



<reference  anchor="RFC7515" target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6125" target='https://www.rfc-editor.org/info/rfc6125'>
<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<author initials='J.' surname='Hodges' fullname='J. Hodges'><organization /></author>
<date year='2011' month='March' />
<abstract><t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6125'/>
<seriesInfo name='DOI' value='10.17487/RFC6125'/>
</reference>



<reference  anchor="RFC7525" target='https://www.rfc-editor.org/info/rfc7525'>
<front>
<title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='R.' surname='Holz' fullname='R. Holz'><organization /></author>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'><organization /></author>
<date year='2015' month='May' />
<abstract><t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t></abstract>
</front>
<seriesInfo name='BCP' value='195'/>
<seriesInfo name='RFC' value='7525'/>
<seriesInfo name='DOI' value='10.17487/RFC7525'/>
</reference>




    </references>



<section anchor="other-streaming-specifications" title="Other Streaming Specifications">
<t>[[EDITORS NOTE: This section to be removed prior to publication]]</t>

<t>The following pub/sub, queuing, streaming systems were reviewed 
as possible solutions or as input to the current draft:</t>

<t>XMPP Events
The WG considered the XMPP events ands its ability to provide a single
messaging solution without the need for both polling and push modes.
The feeling was the size and methodology of XMPP was to far apart from
the current capabilities of the SECEVENTs community which focuses in
on HTTP based service delivery and authorization.</t>

<t>Amazon Simple Notification Service
Simple Notification Service, is a pub/sub messaging product from 
AWS. SNS supports a variety of subscriber types: HTTP/HTTPS endpoints, 
AWS Lambda functions, email addresses (as JSON or plain text), phone 
numbers (via SMS), and AWS SQS standard queues. It doesn’t directly 
support pull, but subscribers can get the pull model by creating an 
SQS queue and subscribing it to the topic. Note that this puts the 
cost of pull support back onto the subscriber, just as it is in the 
push model. It is not clear that one way is strictly better than the 
other; larger, sophisticated developers may be happy to own message 
persistence so they can have their own internal delivery guarantees. 
The long tail of OIDC clients may not care about that, or may fail 
to get it right. Regardless, I think we can learn something from the 
Delivery Policies supported by SNS, as well as the delivery controls 
that SQS offers (e.g. Visibility Timeout, Dead-Letter Queues). I’m 
not suggesting that we need all of these things in the spec, but 
they give an idea of what features people have found useful.
Other information:</t>

<t><list style="symbols">
  <t>API Reference: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html</t>
  <t>Visibility Timeouts: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html</t>
</list></t>

<t>Apache Kafka
Apache Kafka is an Apache open source project based upon TCP for 
distributed streaming. It prescribes some interesting general 
purpose features that seem to extend far beyond the simpler 
streaming model SECEVENTs is after. A comment from MS has been that 
Kafka does an acknowledge with poll combination event which seems 
to be a performance advantage. See: https://kafka.apache.org/intro</t>

<t>Google Pub/Sub
Google Pub Sub system favours a model whereby polling and acknowledgement
of events is done as separate endpoints as separate functions.
Information:</t>

<t><list style="symbols">
  <t>Cloud Overview - https://cloud.google.com/pubsub/</t>
  <t>Subscriber Overview - https://cloud.google.com/pubsub/docs/subscriber</t>
  <t>Subscriber Pull(poll) - https://cloud.google.com/pubsub/docs/pull</t>
</list></t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>The editors would like to thanks the members of the SCIM WG which 
began discussions of provisioning events starting with: draft-hunt-scim-notify-00 in 2015.</t>

<t>The editors would like to thank the authors of draft-ietf-secevent-delivery-02,
on which this draft is based.</t>

<t>The editor would like to thank the participants in the the SECEVENTS
working group for their support of this specification.</t>

</section>
<section anchor="change-log" title="Change Log">
<t>Draft 00 - AB - Based on draft-ietf-secevent-delivery-02 with the 
following changes:</t>

<t><list style="symbols">
  <t>Renamed to “Push-Based SET Token Delivery Using HTTP”</t>
  <t>Removed references to the HTTP Polling delivery method.</t>
  <t>Removed informative reference to RFC6202.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
HxgEU3vD/rAn/i/oDeNYvV0AAA==

-->

</rfc>

